<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gongluck&#39;s blog</title>
    <link>https://gongluck.github.io/</link>
    <description>Recent content on gongluck&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 08 Sep 2024 18:54:21 +0800</lastBuildDate>
    
        <atom:link href="https://gongluck.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>编译Android系统源码中screencap</title>
        <link>https://gongluck.github.io/av/screencap/</link>
        <pubDate>Sun, 08 Sep 2024 18:54:21 +0800</pubDate>
        
        <guid>https://gongluck.github.io/av/screencap/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/av/screencap/ -&lt;p&gt;之前需要在安卓系统上做采集屏幕，第一时间查到的都是使用&lt;code&gt;java&lt;/code&gt;的方案，就想能不能使用纯&lt;code&gt;cpp&lt;/code&gt;就可以实现呢？刚好安卓源码中就有一个自带的截图工具&lt;code&gt;screencap&lt;/code&gt;，是纯&lt;code&gt;cpp&lt;/code&gt;源码实现的。但是要编译出来，还是有些额外的准备工作的。&lt;/p&gt;
&lt;h2 id=&#34;下载源码&#34;&gt;下载源码&lt;/h2&gt;
&lt;p&gt;理论上可以把android的所有代码都下载下来，但是没必要。下面只会下载需要用到的部分，使用android10分支。可以从&lt;a href=&#34;https://android.googlesource.com&#34;&gt;android.googlesource.com&lt;/a&gt;下载各模块源码的压缩包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;https://android.googlesource.com/platform/system/core/+archive/refs/heads/android10-release.tar.gz
https://android.googlesource.com/platform/frameworks/native/+archive/refs/heads/android10-release.tar.gz
https://android.googlesource.com/platform/external/skia/+archive/refs/heads/android10-release.tar.gz
https://android.googlesource.com/platform/prebuilts/vndk/v30/+archive/refs/heads/main.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后将对应模块的源码解压到对应的目录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tree /root/android10/ -L &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;
/root/android10/
├── platform
│   ├── external
│   │   └── skia
│   ├── frameworks
│   │   └── native
│   ├── prebuilts
│   │   └── vndk
│   └── system
│       └── core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，还需要&lt;code&gt;screencap&lt;/code&gt;的源码，只是单独一个文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;https://android.googlesource.com/platform/frameworks/base/+/refs/heads/android10-release/cmds/screencap/screencap.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置项目&#34;&gt;配置项目&lt;/h2&gt;
&lt;p&gt;创建一个CMake项目。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cmake_minimum_required(VERSION 3.15)

set(CMAKE_CXX_STANDARD 17)

&lt;span style=&#34;color:#228b22&#34;&gt;# 获取当前文件夹名&lt;/span&gt;
string(REGEX REPLACE &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.*/(.*)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\\1&amp;#34;&lt;/span&gt; CURRENT_FOLDER &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;)

project(&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;CURRENT_FOLDER&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;)

&lt;span style=&#34;color:#228b22&#34;&gt;# ##############################################################################&lt;/span&gt;
set(subject &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;)

include_directories(&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt; include/
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/system/core/include
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/system/core/base/include

  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/frameworks/native/include
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/frameworks/native/libs/math/include
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/frameworks/native/libs/nativebase/include
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/frameworks/native/libs/nativewindow/include

  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/external/skia/include/core
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/external/skia/include/config
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/external/skia/include/config/android

  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/system/libhidl/base/include
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/hardware/libhardware/include
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/system/libhidl/transport/token/1.0/utils/include

  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/generated-headers/hardware/interfaces/graphics/common/1.0/android.hardware.graphics.common@1.0_genc++_headers/gen
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/generated-headers/hardware/interfaces/graphics/common/1.1/android.hardware.graphics.common@1.1_genc++_headers/gen
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/generated-headers/hardware/interfaces/graphics/common/1.2/android.hardware.graphics.common@1.2_genc++_headers/gen

  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/generated-headers/hardware/interfaces/graphics/bufferqueue/1.0/android.hardware.graphics.bufferqueue@1.0_genc++_headers/gen
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/generated-headers/hardware/interfaces/graphics/bufferqueue/2.0/android.hardware.graphics.bufferqueue@2.0_genc++_headers/gen
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/generated-headers/system/libhidl/transport/base/1.0/android.hidl.base@1.0_genc++_headers/gen
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/generated-headers/system/libhidl/transport/manager/1.0/android.hidl.manager@1.0_genc++_headers/gen
  &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/prebuilts/vndk/v30/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/include/generated-headers/hardware/interfaces/media/1.0/android.hardware.media@1.0_genc++_headers/gen
)

link_directories(&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt; lib/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_ABI&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/bin/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;platform&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_ABI&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/debug)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/bin/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;platform&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_ABI&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/release)

&lt;span style=&#34;color:#228b22&#34;&gt;# 查找目录下所有源文件并保存到变量&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# aux_source_directory(src SRCS)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 搜索源码文件保存到变量&lt;/span&gt;
FILE(GLOB SRCS src/*.h src/*.cpp)

add_executable(&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;SRCS&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;)

target_compile_options(&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt; PRIVATE
  -fno-rtti
  -Wno-inconsistent-missing-override
)

target_link_libraries(&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt; log android gui binder utils ui hwui hwbinder)

set_property(TARGET &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt; PROPERTY DEBUG_POSTFIX _&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_ABI&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;_d)
set_property(TARGET &lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt; PROPERTY RELEASE_POSTFIX _&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_ABI&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;_r)

&lt;span style=&#34;color:#228b22&#34;&gt;# ##############################################################################&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;项目需要链接&lt;code&gt;gui&lt;/code&gt;、&lt;code&gt;binder&lt;/code&gt;、&lt;code&gt;utils&lt;/code&gt;、&lt;code&gt;ui&lt;/code&gt;、&lt;code&gt;hwui&lt;/code&gt;、&lt;code&gt;hwbinder&lt;/code&gt;这几个库，直接从安卓机上拷贝到&lt;code&gt;lib&lt;/code&gt;目录就好。&lt;/p&gt;
&lt;p&gt;使用一个脚本，一键编译。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_NDK_ROOT&lt;/span&gt;=/root/android-ndk-r27
&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;ANDROID_PLATFORM_DIR&lt;/span&gt;=/root/android10/platform
&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;PREBUILT&lt;/span&gt;=arm64

&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;platform&lt;/span&gt;=android-29
&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;abi&lt;/span&gt;=arm64-v8a

&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;BUILDPATH&lt;/span&gt;=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;)&lt;/span&gt;/build
&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;INSTALLPATH&lt;/span&gt;=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;)&lt;/span&gt;/bin

rm -r &lt;span style=&#34;color:#00688b&#34;&gt;$BUILDPATH&lt;/span&gt;
rm -r &lt;span style=&#34;color:#00688b&#34;&gt;$INSTALLPATH&lt;/span&gt;

&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;buildparams&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-DCMAKE_TOOLCHAIN_FILE=&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;$ANDROID_NDK_ROOT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;/build/cmake/android.toolchain.cmake -DCMAKE_MAKE_PROGRAM=&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;$ANDROID_NDK_ROOT&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;/prebuilt/linux-x86_64/bin/make&amp;#34;&lt;/span&gt;

cmake -G &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Unix Makefiles&amp;#34;&lt;/span&gt; -S . -B &lt;span style=&#34;color:#00688b&#34;&gt;$BUILDPATH&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&lt;/span&gt;   -DANDROID_NDK=&lt;span style=&#34;color:#00688b&#34;&gt;$ANDROID_NDK_ROOT&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;$buildparams&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&lt;/span&gt;   -DCMAKE_BUILD_TYPE=release -DANDROID_ABI=&lt;span style=&#34;color:#00688b&#34;&gt;$abi&lt;/span&gt; -DANDROID_PLATFORM=&lt;span style=&#34;color:#00688b&#34;&gt;$platform&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&lt;/span&gt;   -DANDROID_PLATFORM_DIR=&lt;span style=&#34;color:#00688b&#34;&gt;$ANDROID_PLATFORM_DIR&lt;/span&gt; -DPREBUILT=&lt;span style=&#34;color:#00688b&#34;&gt;$PREBUILT&lt;/span&gt;
cmake --build &lt;span style=&#34;color:#00688b&#34;&gt;$BUILDPATH&lt;/span&gt; --clean-first --config release --target all -- -j8

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;整个项目的布局。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tree /root/AnalysisAVP/example/android/capture/screencap/ -L &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;
/root/AnalysisAVP/example/android/capture/screencap/
├── build_android.sh
├── CMakeLists.txt
├── lib
│   ├── arm64-v8a
│   └── armeabi-v7a
└── src
    └── screencap.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;编译运行&#34;&gt;编译运行&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;root@gongluck:~/AnalysisAVP/example/android/capture/screencap# ./build_android.sh 
-- The C compiler identification is Clang 18.0.1
-- The CXX compiler identification is Clang 18.0.1
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;
-- Check &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; working C compiler: /root/android-ndk-r27/toolchains/llvm/prebuilt/linux-x86_64/bin/clang - skipped
-- Detecting C compile features
-- Detecting C compile features - &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;
-- Check &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; working CXX compiler: /root/android-ndk-r27/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;
-- Configuring &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;
-- Generating &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;
-- Build files have been written to: /root/AnalysisAVP/example/android/capture/screencap/build
[ 50%] Building CXX object CMakeFiles/screencap.dir/src/screencap.cpp.o
[100%] Linking CXX executable ../bin/arm64-v8a/release/screencap_arm64-v8a_r
[100%] Built target screencap
root@gongluck:~/AnalysisAVP/example/android/capture/screencap# adb push bin/arm64-v8a/release/screencap_arm64-v8a_r /data/local/tmp/
bin/arm64-v8a/release/screencap_arm64-v8a_r: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; file pushed. 10.4 MB/s (&lt;span style=&#34;color:#b452cd&#34;&gt;391064&lt;/span&gt; bytes in 0.036s)
root@gongluck:~/AnalysisAVP/example/android/capture/screencap# adb shell &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/data/local/tmp/screencap_arm64-v8a_r -p &amp;gt; /data/local/tmp/save.png&amp;#34;&lt;/span&gt;
root@gongluck:~/AnalysisAVP/example/android/capture/screencap# adb shell &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;file /data/local/tmp/save.png&amp;#34;&lt;/span&gt;
/data/local/tmp/save.png: PNG image data, &lt;span style=&#34;color:#b452cd&#34;&gt;720&lt;/span&gt; x 1280, 8-bit/color RGBA, non-interlaced

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;完整代码&#34;&gt;完整代码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/AnalysisAVP/tree/master/example/android/capture/screencap&#34;&gt;https://github.com/gongluck/AnalysisAVP/tree/master/example/android/capture/screencap&lt;/a&gt;&lt;/p&gt;- https://gongluck.github.io/av/screencap/ - </description>
        </item>
    
    
    
        <item>
        <title>分布式专题</title>
        <link>https://gongluck.github.io/linux/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/</link>
        <pubDate>Mon, 28 Dec 2020 22:24:36 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ -&lt;h2 id=&#34;十三分布式专题&#34;&gt;十三、分布式专题&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1udp可靠传输&#34;&gt;1.UDP可靠传输&lt;/h3&gt;
&lt;h4 id=&#34;11-tcp和udp比较&#34;&gt;1.1 TCP和UDP比较&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/TCP%E5%92%8CUDP.png?raw=true&#34; alt=&#34;TCP和UDP&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;12-kcp&#34;&gt;1.2 KCP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;KCP&lt;/strong&gt;是一个快速可靠协议，能以比&lt;strong&gt;TCP&lt;/strong&gt;浪费10%-20%的带宽的代价，换取平均延迟降低30%-40%，且最大延迟降低三倍的传输效果。纯算法实现，并不负责底层协议（如&lt;strong&gt;UDP&lt;/strong&gt;）的收发，需要使用者自己定义下层数据包的发送方式，以&lt;strong&gt;callback&lt;/strong&gt;的方式提供给&lt;strong&gt;KCP&lt;/strong&gt;。 连时钟都需要外部传递进来，内部不会有任何一次系统调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整个协议只有&lt;strong&gt;ikcp.h&lt;/strong&gt;，&lt;strong&gt;ikcp.c&lt;/strong&gt;两个源文件，可以方便的集成到用户自己的协议栈中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TCP&lt;/strong&gt;是为流量设计的（每秒内可以传输多少&lt;strong&gt;KB&lt;/strong&gt;的数据），讲究的是充分利用带宽。而&lt;strong&gt;KCP&lt;/strong&gt;是为流速设计的（单个数据包从一端发送到一端需要多少时间），以10%-20%带宽浪费的代价换取了比&lt;strong&gt;TCP&lt;/strong&gt;快30%-40%的传输速度。&lt;strong&gt;TCP&lt;/strong&gt;信道是一条流速很慢，但每秒流量很大的大运河，而&lt;strong&gt;KCP&lt;/strong&gt;是水流湍急的小激流。&lt;strong&gt;KCP&lt;/strong&gt;有正常模式和快速模式两种。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RTO&lt;/strong&gt;翻倍&lt;strong&gt;vs&lt;/strong&gt;不翻倍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP&lt;/strong&gt;超时计算是&lt;strong&gt;RTOx2&lt;/strong&gt;，这样连续丢三次包就变成&lt;strong&gt;RTOx8&lt;/strong&gt;了，十分恐怖，而&lt;strong&gt;KCP&lt;/strong&gt;启动快速模式后不&lt;strong&gt;x2&lt;/strong&gt;，只是&lt;strong&gt;x1.5&lt;/strong&gt;（实验证明1.5这个值相对比较好），提高了传输速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择性重传&lt;strong&gt;vs&lt;/strong&gt;全部重传：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP&lt;/strong&gt;丢包时会全部重传从丢的那个包开始以后的数据，&lt;strong&gt;KCP&lt;/strong&gt;是选择性重传，只重传真正丢失的数据包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速重传：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送端发送了1,2,3,4,5几个包，然后收到远端的&lt;strong&gt;ACK&lt;/strong&gt;: 1, 3, 4, 5，当收到&lt;strong&gt;ACK3&lt;/strong&gt;时，&lt;strong&gt;KCP&lt;/strong&gt;知道2被跳过1次，收到&lt;strong&gt;ACK4&lt;/strong&gt;时，知道2被跳过了2次，此时可以认为2号丢失，不用等超时，直接重传2号包，大大改善了丢包时的传输速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;延迟&lt;strong&gt;ACK&lt;/strong&gt; &lt;strong&gt;vs&lt;/strong&gt; 非延迟&lt;strong&gt;ACK&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP&lt;/strong&gt;为了充分利用带宽，延迟发送&lt;strong&gt;ACK&lt;/strong&gt;（&lt;strong&gt;NODELAY&lt;/strong&gt;都没用），这样超时计算会算出较大&lt;strong&gt;RTT&lt;/strong&gt;时间，延长了丢包时的判断过程。&lt;strong&gt;KCP&lt;/strong&gt;的&lt;strong&gt;ACK&lt;/strong&gt;是否延迟发送可以调节。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UNA&lt;/strong&gt; &lt;strong&gt;vs&lt;/strong&gt; &lt;strong&gt;ACK+UNA&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ARQ&lt;/strong&gt;模型响应有两种，&lt;strong&gt;UNA&lt;/strong&gt;（此编号前所有包已收到，如&lt;strong&gt;TCP&lt;/strong&gt;）和&lt;strong&gt;ACK&lt;/strong&gt;（该编号包已收到），光用UNA将导致全部重传，光用&lt;strong&gt;ACK&lt;/strong&gt;则丢失成本太高，以往协议都是二选其一，而&lt;strong&gt;KCP&lt;/strong&gt;协议中，除去单独的&lt;strong&gt;ACK&lt;/strong&gt;包外，所有包都有&lt;strong&gt;UNA&lt;/strong&gt;信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非退让流控：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;KCP&lt;/strong&gt;正常模式同&lt;strong&gt;TCP&lt;/strong&gt;一样使用公平退让法则，即发送窗口大小由：发送缓存大小、接收端剩余接收缓存大小、丢包退让及慢启动这四要素决定。但传送及时性要求很高的小数据时，可选择通过配置跳过后两步，仅用前两项来控制发送频率。以牺牲部分公平性及带宽利用率之代价，换取了开着&lt;strong&gt;BT&lt;/strong&gt;都能流畅传输的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2dpdk&#34;&gt;2.DPDK&lt;/h3&gt;
- https://gongluck.github.io/linux/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ - </description>
        </item>
    
    
    
        <item>
        <title>集群专题</title>
        <link>https://gongluck.github.io/linux/%E9%9B%86%E7%BE%A4%E4%B8%93%E9%A2%98/</link>
        <pubDate>Mon, 28 Dec 2020 22:23:37 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E9%9B%86%E7%BE%A4%E4%B8%93%E9%A2%98/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E9%9B%86%E7%BE%A4%E4%B8%93%E9%A2%98/ -&lt;h2 id=&#34;十二集群专题&#34;&gt;十二、集群专题&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1redis集群&#34;&gt;1.Redis集群&lt;/h3&gt;
&lt;h4 id=&#34;11-主从复制&#34;&gt;1.1 主从复制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;主从模式的一个作用是备份数据，这样当一个节点损坏时，数据因为有备份，可以方便恢复。另一个作用是负载均衡，所有客户端都访问一个节点肯定会影响&lt;strong&gt;Redis&lt;/strong&gt;工作效率，有了主 从以后，查询操作就可以通过查询从节点来完成。&lt;/li&gt;
&lt;li&gt;默认配置下，&lt;strong&gt;master&lt;/strong&gt;节点可以进行读和写，&lt;strong&gt;slave&lt;/strong&gt;节点只能进行读操作，写操作被禁止。&lt;/li&gt;
&lt;li&gt;不要修改配置让&lt;strong&gt;slave&lt;/strong&gt;节点支持写操作，没有意义，原因一，写入的数据不会被同步到其他节点；原因二，当&lt;strong&gt;master&lt;/strong&gt;节点修改同一条数据后，&lt;strong&gt;slave&lt;/strong&gt;节点的数据会被覆盖掉。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slave&lt;/strong&gt;节点挂了不影响其他&lt;strong&gt;slave&lt;/strong&gt;节点的读和&lt;strong&gt;master&lt;/strong&gt;节点的读和写，重新启动后会将数据从&lt;strong&gt;master&lt;/strong&gt;节点同步过来。&lt;strong&gt;master&lt;/strong&gt;节点挂了以后，不影响&lt;strong&gt;slave&lt;/strong&gt;节点的读，&lt;strong&gt;Redis&lt;/strong&gt;将不再提供写服务，&lt;strong&gt;master&lt;/strong&gt;节点启动后&lt;strong&gt;Redis&lt;/strong&gt;将重新对外提供写服务。&lt;strong&gt;master&lt;/strong&gt;节点挂了以后，&lt;strong&gt;slave&lt;/strong&gt;节点重新不会选一个&lt;strong&gt;master&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-sentinel模式&#34;&gt;1.2 Sentinel模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sentinel&lt;/strong&gt;的主要功能包括主节点存活检测、主从运行情况检测、自动故障转移、主从切换。由一个或多个&lt;strong&gt;Sentinel&lt;/strong&gt;实例组成的&lt;strong&gt;Sentinel&lt;/strong&gt;系统可以监视任意多个主服务器，以及所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升 级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.png?raw=true&#34; alt=&#34;redis哨兵模式&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;的&lt;strong&gt;Sentinel&lt;/strong&gt;最小配置是一主一从。&lt;strong&gt;Redis&lt;/strong&gt;的&lt;strong&gt;Sentinel&lt;/strong&gt;系统可以用来管理多个&lt;strong&gt;Redis&lt;/strong&gt;服务器，该系统可以执行以下四个任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sentinel&lt;/strong&gt;会不断的检查主服务器和从服务器是否正常运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通知
&lt;ul&gt;
&lt;li&gt;当被监控的某个&lt;strong&gt;Redis&lt;/strong&gt;服务器出现问题，&lt;strong&gt;Sentinel&lt;/strong&gt;通过&lt;strong&gt;API&lt;/strong&gt;脚本向管理员或者其他的应用程序发送通知。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动故障转移
&lt;ul&gt;
&lt;li&gt;当主节点不能正常工作时，&lt;strong&gt;Sentinel&lt;/strong&gt;会开始一次自动的故障转移操作，它会将与失效主节点是主从关系的其中一个从节点升级为新的主节点，并且将其他的从节点指向新的主节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置提供者
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;Redis Sentinel&lt;/strong&gt;模式下，客户端应用在初始化时连接的是 &lt;strong&gt;Sentinel&lt;/strong&gt;节点集合，从中获取主节点的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;13-cluster模式&#34;&gt;1.3 Cluster模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;redis cluster&lt;/strong&gt;是 &lt;strong&gt;Redis&lt;/strong&gt;的分布式解决方案，在3.0版本推出后有效地解决了&lt;strong&gt;redis&lt;/strong&gt;分布式方面的需求。自动将数据进行分片，每个&lt;strong&gt;master&lt;/strong&gt;上放一部分数据。提供内置的高可用支持，部分&lt;strong&gt;master&lt;/strong&gt;不可用时，还是可以继续工作的支撑N个&lt;strong&gt;redis master node&lt;/strong&gt;，每个&lt;strong&gt;master node&lt;/strong&gt;都可以挂载多个&lt;strong&gt;slave node&lt;/strong&gt;高可用，因为每个&lt;strong&gt;master&lt;/strong&gt;都有&lt;strong&gt;salve&lt;/strong&gt;节点，那么如果&lt;strong&gt;mater&lt;/strong&gt;挂掉，&lt;strong&gt;redis cluster&lt;/strong&gt;这套机制，就会自动将某个&lt;strong&gt;slave&lt;/strong&gt;切换成&lt;strong&gt;master&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F.png?raw=true&#34; alt=&#34;redis集群模式&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2去中心化技术&#34;&gt;2.去中心化技术&lt;/h3&gt;
&lt;h4 id=&#34;21-去中心化网络&#34;&gt;2.1 去中心化网络&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E7%BD%91%E7%BB%9C.png?raw=true&#34; alt=&#34;去中心化网络&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;22-网络地址映射&#34;&gt;2.2 网络地址映射&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务器发送数据与路由器公网&lt;strong&gt;IP&lt;/strong&gt;时，能够将数据映射到私网中的机器；私网内的机器发送数据给服务器，路由器也能够映射为公网&lt;strong&gt;IP&lt;/strong&gt;地址的过程，成为网络地址映射。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/NAT%E5%B7%A5%E4%BD%9C%E6%8B%93%E6%89%91.png?raw=true&#34; alt=&#34;NAT工作拓扑&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3docker&#34;&gt;3.Docker&lt;/h3&gt;
&lt;h4 id=&#34;31-镜像容器仓库&#34;&gt;3.1 镜像、容器、仓库&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;镜像（&lt;strong&gt;Image&lt;/strong&gt;），就相当于是一个&lt;strong&gt;root&lt;/strong&gt;文件系统。比如官方镜像&lt;strong&gt;ubuntu:16.04&lt;/strong&gt;就包含了完整的一套&lt;strong&gt;Ubuntu16.04&lt;/strong&gt;最小系统的&lt;strong&gt;root&lt;/strong&gt;文件系统。&lt;/li&gt;
&lt;li&gt;容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。&lt;/li&gt;
&lt;li&gt;仓库可看着一个代码控制中心，用来保存镜像。&lt;strong&gt;Docker&lt;/strong&gt;使用客户端-服务器(&lt;strong&gt;C/S&lt;/strong&gt;)架构模式，使用远程&lt;strong&gt;API&lt;/strong&gt;来管理和创建&lt;strong&gt;Docker&lt;/strong&gt;容器。 &lt;strong&gt;Docker&lt;/strong&gt;容器通过&lt;strong&gt;Docker&lt;/strong&gt;镜像来创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-docker安装&#34;&gt;3.2 Docker安装&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;$(&lt;/span&gt;lsb_release -cs&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;  stable&amp;#34;&lt;/span&gt;

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;33-docker命令&#34;&gt;3.3 Docker命令&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 启动docker&lt;/span&gt;
sudo service docker start
&lt;span style=&#34;color:#228b22&#34;&gt;# 停止docker&lt;/span&gt;
sudo service docker stop
&lt;span style=&#34;color:#228b22&#34;&gt;# 重启docker&lt;/span&gt;
sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4mysql集群&#34;&gt;4.MySQL集群&lt;/h3&gt;
&lt;h4 id=&#34;41-replication&#34;&gt;4.1 Replication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主从复制是通过重放&lt;strong&gt;binlog&lt;/strong&gt;实现主库数据的异步复制。即当主库执行了一条&lt;strong&gt;sql&lt;/strong&gt;命令，那么在从库同样的执行一遍，从而达到主从复制的效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在这个过程中，&lt;strong&gt;master&lt;/strong&gt;对数据的写操作记入二进制日志文件中(&lt;strong&gt;binlog&lt;/strong&gt;)，生成一个&lt;strong&gt;log dump&lt;/strong&gt;线程，用来给从库的&lt;strong&gt;i/o&lt;/strong&gt;线程传&lt;strong&gt;binlog。而从库的i/o线程去请求主库的binlog，并将得到的binlog&lt;/strong&gt;日志写到中继日志（&lt;strong&gt;relaylog&lt;/strong&gt;）中，从库的&lt;strong&gt;sql&lt;/strong&gt;线程，会读取&lt;strong&gt;relaylog&lt;/strong&gt;文件中的日志，并解析成具体操作，通过主从的操作一致，而达到最终数据一致。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.png?raw=true&#34; alt=&#34;mysql主从复制&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;42-fabirc&#34;&gt;4.2 Fabirc&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;MySQL Replication&lt;/strong&gt;的基础上，增加了故障检测与转移，自动数据分片功能。&lt;/li&gt;
&lt;li&gt;依旧是一主多从的结构，&lt;strong&gt;MySQL Fabirc&lt;/strong&gt;只有一个主节点，区别是当该主节点挂了以后，会从从节点中选择一个来当主节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;43-cluster&#34;&gt;4.3 Cluster&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MySQL Cluster&lt;/strong&gt;是多主多从结构的，高可用性优秀，99.999%的可用性，可以自动切分数据，能跨节点冗余数据（其数据集并不是存储某个特定的&lt;strong&gt;MySQL&lt;/strong&gt;实例上，而是被分布在多个&lt;strong&gt;Data Nodes&lt;/strong&gt;中，即一个&lt;strong&gt;table&lt;/strong&gt;的数据可能被分散在多个物理节点上，任何数据都会在多个&lt;strong&gt;Data Nodes&lt;/strong&gt;上冗余备份。任何一个数据变更操作，都将在一组&lt;strong&gt;Data Nodes&lt;/strong&gt;上同步，以保证数据的一致性）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5kubernetes&#34;&gt;5.Kubernetes&lt;/h3&gt;
&lt;h4 id=&#34;51-k8s简介&#34;&gt;5.1 K8s简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;是一个开源的，用于管理云平台中多个主机上的容器化的应用，&lt;strong&gt;Kubernetes&lt;/strong&gt;的目标是让部署容器化的应用简单并且高效，&lt;em&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/em&gt;提供了应用部署，规划，更新，维护的一种机制。&lt;/li&gt;
&lt;li&gt;传统的应用部署方式是通过插件或脚本来安装应用。这样做的缺点是应用的运行、配置、管理、所有生存周期将与当前操作系统绑定，这样做并不利于应用的升级更新/回滚等操作，当然也可以通过创建虚拟机的方式来实现某些功能，但是虚拟机非常重，并不利于可移植性。&lt;/li&gt;
&lt;li&gt;通过部署容器方式，每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。相对于虚拟机，容器能快速部署，由于容器与底层设施、机器文件系统解耦的，所以它能在不同云、不同版本操作系统间进行迁移。&lt;/li&gt;
&lt;li&gt;容器占用资源少、部署快，每个应用可以被打包成一个容器镜像，每个应用与容器间成一对一关系也使容器有更大优势，使用容器可以在&lt;strong&gt;build&lt;/strong&gt;或&lt;strong&gt;release&lt;/strong&gt;的阶段，为应用创建容器镜像，因为每个应用不需要与其余的应用堆栈组合，也不依赖于生产环境基础结构，这使得从研发到测试、生产能提供一致环境。类似地，容器比虚拟机轻量、更“透明”，这更便于监控和管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;52-k8s集群&#34;&gt;5.2 K8s集群&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/K8s%E9%9B%86%E7%BE%A4.png?raw=true&#34; alt=&#34;K8s集群&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6mongodb集群&#34;&gt;6.MongoDB集群&lt;/h3&gt;
&lt;h4 id=&#34;61-master-slave&#34;&gt;6.1 Master-Slave&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/mongodb%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4.png?raw=true&#34; alt=&#34;mongodb主从集群&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机工作，备机处于监控准备状况；&lt;/li&gt;
&lt;li&gt;当主机宕机时，备机接管主机的一切工作，待主机恢复正常后，按使用者的设定以自动或手动方式将服务切换到主机上运行，数据的一致性通过共享存储系统解决。&lt;/li&gt;
&lt;li&gt;主(&lt;strong&gt;Master&lt;/strong&gt;)可读可写，当数据有修改的时候，会将&lt;strong&gt;oplog&lt;/strong&gt;同步到所有连接的&lt;strong&gt;salve&lt;/strong&gt;上去。&lt;/li&gt;
&lt;li&gt;从(&lt;strong&gt;Slave&lt;/strong&gt;)只读不可写，自动从&lt;strong&gt;Master&lt;/strong&gt;同步数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;62-replica-set&#34;&gt;6.2 Replica Set&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E9%9B%86%E7%BE%A4.png?raw=true&#34; alt=&#34;mongodb副本集集群&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了防止单点故障就需要用副本（&lt;strong&gt;Replication&lt;/strong&gt;），当发生硬件故障或者其它原因造成的宕机时，可以使用副本进行恢复，最好能够自动的故障转移（&lt;strong&gt;failover&lt;/strong&gt;）。有时引入副本是为了读写分离，将读的请求分流到副本上，减轻主（&lt;strong&gt;Primary&lt;/strong&gt;）的读压力。而&lt;strong&gt;Mongodb&lt;/strong&gt;的&lt;strong&gt;Replica Set&lt;/strong&gt;都能满足这些要求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Replica Set&lt;/strong&gt;的一堆&lt;strong&gt;mongod&lt;/strong&gt;的实例集合，它们有着同样的数据内容。包含三类角色：
&lt;ul&gt;
&lt;li&gt;主节点（&lt;strong&gt;Primary&lt;/strong&gt;）
&lt;ul&gt;
&lt;li&gt;接收所有的写请求，然后把修改同步到所有&lt;strong&gt;Secondary&lt;/strong&gt;。一个&lt;strong&gt;Replica Set&lt;/strong&gt;只能有一个&lt;strong&gt;Primary&lt;/strong&gt;节点，当&lt;strong&gt;Primary&lt;/strong&gt;挂掉后，其他&lt;strong&gt;Secondary&lt;/strong&gt;或者&lt;strong&gt;Arbiter&lt;/strong&gt;节点会重新选举出来一个主节点。&lt;/li&gt;
&lt;li&gt;默认读请求也是发到&lt;strong&gt;Primary&lt;/strong&gt;节点处理的，需要转发到&lt;strong&gt;Secondary&lt;/strong&gt;需要客户端修改一下连接配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;副本节点（&lt;strong&gt;Secondary&lt;/strong&gt;）
&lt;ul&gt;
&lt;li&gt;与主节点保持同样的数据集。当主节点挂掉的时候，参与选主。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;仲裁者（&lt;strong&gt;Arbiter&lt;/strong&gt;）
&lt;ul&gt;
&lt;li&gt;不保有数据，不参与选主，只进行选主投票。使用&lt;strong&gt;Arbiter&lt;/strong&gt;可以减轻数据存储的硬件需求，Arbiter跑起来几乎没什么大的硬件资源需求，但重要的一点是，在生产环境下它和其他数据节点不要部署在同一台机器上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个自动&lt;strong&gt;failover&lt;/strong&gt;的&lt;strong&gt;Replica Set&lt;/strong&gt;节点数必须为奇数，目的是选主投票的时候要有一个大多数才能进行选主决策。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;63-sharding&#34;&gt;6.3 Sharding&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/mongodb%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4.png?raw=true&#34; alt=&#34;mongodb分片集群&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当数据量比较大的时候，我们需要把数据分片运行在不同的机器中，以降低CPU、内存和IO的压力，&lt;strong&gt;Sharding&lt;/strong&gt;就是这样的技术。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库主要由两种方式做&lt;strong&gt;Sharding&lt;/strong&gt;：纵向，横向，纵向的方式就是添加更多的&lt;strong&gt;CPU&lt;/strong&gt;，内存，磁盘空间等。横向就是上面说的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据分片（&lt;strong&gt;Shards&lt;/strong&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存数据，保证数据的高可用性和一致性。可以是一个单独的&lt;strong&gt;mongod&lt;/strong&gt;实例，也可以是一个副本集。&lt;/li&gt;
&lt;li&gt;在生产环境下&lt;strong&gt;Shard&lt;/strong&gt;是一个&lt;strong&gt;Replica Set&lt;/strong&gt;，以防止该数据片的单点故障。所有&lt;strong&gt;Shard&lt;/strong&gt;中有一个&lt;strong&gt;PrimaryShard&lt;/strong&gt;，里面包含未进行划分的数据集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询路由（&lt;strong&gt;Query Routers&lt;/strong&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mongos&lt;/strong&gt;的实例，客户端直接连接&lt;strong&gt;mongos&lt;/strong&gt;，由&lt;strong&gt;mongos&lt;/strong&gt;把读写请求路由到指定的&lt;strong&gt;Shard&lt;/strong&gt;上去。&lt;/li&gt;
&lt;li&gt;一个&lt;strong&gt;Sharding&lt;/strong&gt;集群，可以有一个&lt;strong&gt;mongos&lt;/strong&gt;，也可以有多&lt;strong&gt;mongos&lt;/strong&gt;以减轻客户端请求的压力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置服务器（&lt;strong&gt;Config servers&lt;/strong&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存集群的元数据（&lt;strong&gt;metadata&lt;/strong&gt;），包含各个&lt;strong&gt;Shard&lt;/strong&gt;的路由规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gongluck.github.io/linux/%E9%9B%86%E7%BE%A4%E4%B8%93%E9%A2%98/ - </description>
        </item>
    
    
    
        <item>
        <title>Linux内核专题</title>
        <link>https://gongluck.github.io/linux/linux%E5%86%85%E6%A0%B8%E4%B8%93%E9%A2%98/</link>
        <pubDate>Mon, 28 Dec 2020 22:22:43 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/linux%E5%86%85%E6%A0%B8%E4%B8%93%E9%A2%98/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/linux%E5%86%85%E6%A0%B8%E4%B8%93%E9%A2%98/ -&lt;h2 id=&#34;十一linux内核专题&#34;&gt;十一、Linux内核专题&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1openresty&#34;&gt;1.OpenResty&lt;/h3&gt;
&lt;h4 id=&#34;11-简介&#34;&gt;1.1 简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;openresty&lt;/strong&gt;是一个基于&lt;strong&gt;nginx&lt;/strong&gt;与&lt;strong&gt;lua&lt;/strong&gt;的高性能&lt;strong&gt;web&lt;/strong&gt;平台，其内部集成了大量精良的&lt;strong&gt;lua&lt;/strong&gt;库、第三方模块以及大多数的依赖项。用于方便搭建能够处理超高并发、扩展性极高的动态&lt;strong&gt;web&lt;/strong&gt;应用、&lt;strong&gt;web&lt;/strong&gt;服务和动态网关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;openresty&lt;/strong&gt;通过汇聚各种设计精良的&lt;strong&gt;nginx&lt;/strong&gt;模块，从而将&lt;strong&gt;nginx&lt;/strong&gt;有效地变成一个强大的通用 &lt;strong&gt;Web&lt;/strong&gt;应用平台。这样，&lt;strong&gt;Web&lt;/strong&gt;开发人员和系统工程师可以使用&lt;strong&gt;Lua&lt;/strong&gt;脚本语言调动&lt;strong&gt;Nginx&lt;/strong&gt;支持的各种&lt;strong&gt;C&lt;/strong&gt;以及&lt;strong&gt;Lua&lt;/strong&gt;模块，快速构造出足以胜任&lt;strong&gt;10K&lt;/strong&gt;乃至&lt;strong&gt;1000K&lt;/strong&gt;以上单机并发连接的高性能&lt;strong&gt;Web&lt;/strong&gt;应用系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;openresty&lt;/strong&gt;的目标是让&lt;strong&gt;Web&lt;/strong&gt;服务直接跑在&lt;strong&gt;Nginx&lt;/strong&gt;服务内部，充分利用&lt;strong&gt;Nginx&lt;/strong&gt;的非阻塞&lt;strong&gt;I/O&lt;/strong&gt;模型，不仅仅对&lt;strong&gt;HTTP&lt;/strong&gt;客户端请求，甚至于对远程后端诸如&lt;strong&gt;MySQL、PostgreSQL、Memcached&lt;/strong&gt;以及&lt;strong&gt;Redis&lt;/strong&gt;等都进行一致的高性能响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-lua-nginx-module&#34;&gt;1.2 lua-nginx-module&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/lua-nginx-module.png?raw=true&#34; alt=&#34;lua-nginx-module&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;13-cosocket&#34;&gt;1.3 cosocket&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/cosocket.png?raw=true&#34; alt=&#34;cosocket&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;14-环境搭建&#34;&gt;1.4 环境搭建&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;apt-get install libpcre3-dev libssl-dev perl make build-essential curl -y
wget https://openresty.org/download/openresty-1.19.3.1.tar.gz
tar -xzvf openresty-1.19.3.1.tar.gz
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; openresty-1.19.3.1/
./configure
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2linux内核编程&#34;&gt;2.Linux内核编程&lt;/h3&gt;
&lt;h4 id=&#34;21-linux内核编译升级&#34;&gt;2.1 Linux内核编译升级&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.tar.xz
tar -xvf linux-5.10.tar.xz
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; linux-5.10
cp /boot/config-xxx ./.config
make menuconfig
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
sudo su
make modules_install
make bzImage

cp arch/x86/boot/bzImage /boot/vmlinuz-4.4.16
cp .config /boot/config-4.4.16
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; /lib/modules/4.4.16/
update-initramfs –c –k 4.4.16
update-grub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;22-linux整体架构与子系统划分&#34;&gt;2.2 linux整体架构与子系统划分&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/linux%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%88%92%E5%88%86.png?raw=true&#34; alt=&#34;linux整体架构与子系统划分&#34;&gt;&lt;/p&gt;
- https://gongluck.github.io/linux/linux%E5%86%85%E6%A0%B8%E4%B8%93%E9%A2%98/ - </description>
        </item>
    
    
    
        <item>
        <title>中间件开发专题</title>
        <link>https://gongluck.github.io/linux/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%93%E9%A2%98/</link>
        <pubDate>Mon, 28 Dec 2020 22:21:34 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%93%E9%A2%98/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%93%E9%A2%98/ -&lt;h2 id=&#34;十中间件开发专题&#34;&gt;十、中间件开发专题&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1用户态协议栈&#34;&gt;1.用户态协议栈&lt;/h3&gt;
&lt;h4 id=&#34;11-netmap&#34;&gt;1.1 Netmap&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Netmap&lt;/strong&gt;是一个高性能收发原始数据包的框架，由&lt;strong&gt;Luigi Rizzo&lt;/strong&gt;等人开发完成，其包含了内核模块以及用户态库函数。其目标是，不修改现有操作系统软件以及不需要特殊硬件支持，实现用户态和网卡之间数据包的高性能传递。数据包不经过操作系统内核进行处理，用户空间程序收发数据包时，直接与网卡进行通信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/netmap%E5%8E%9F%E7%90%86.png?raw=true&#34; alt=&#34;netmap原理&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网卡通过循环队列（即&lt;strong&gt;NIC&lt;/strong&gt;环）来管理数据包的传输，每个网卡至少维护一对&lt;strong&gt;NIC&lt;/strong&gt;环，分别用以管理发送和接收两个方向的数据包。每一个环被划分为很多槽，每一个槽都包含存储数据包的缓冲区的信息：缓冲区长度、缓冲区的物理地址等。在通常情况下，主机网络堆栈可以访问&lt;strong&gt;NIC&lt;/strong&gt;环上指定的槽，也就可以访问到存放数据包的缓冲区，实现数据包的发送和接收。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/%E5%86%85%E6%A0%B8%E5%A4%84%E7%90%86%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%8C%85%E6%A1%86%E6%9E%B6.png?raw=true&#34; alt=&#34;内核处理网络数据包框架&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网卡所管理的内存空间是内核空间，运行在用户态的应用程序正常情况下无权访问内核空间，因此，需要进行从内核空间到用户空间的拷贝，零拷贝就是减少或消除这种拷贝，如直接缓存访问（&lt;strong&gt;direct buffer access&lt;/strong&gt;)。&lt;strong&gt;DBA&lt;/strong&gt;为了节省内核态和用户态之间的拷贝，可以将应用程序直接跑在内核态，如内核态的&lt;strong&gt;Click&lt;/strong&gt;。也可以选择将内核中的数据包缓存区直接暴露给用户态程序，如&lt;strong&gt;PF_RING&lt;/strong&gt;和&lt;strong&gt;Linux&lt;/strong&gt;的&lt;strong&gt;PACKET_MMAP&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;netmap&lt;/strong&gt;也是一个基于零拷贝思想的高速网络&lt;strong&gt;I/O&lt;/strong&gt;架构。当网卡运行在&lt;strong&gt;netmap&lt;/strong&gt;模式下，&lt;strong&gt;NIC&lt;/strong&gt;环会与主机协议栈进行断开，&lt;strong&gt;netmap&lt;/strong&gt;会拷贝一份&lt;strong&gt;NIC&lt;/strong&gt;环，被称作&lt;strong&gt;netmap&lt;/strong&gt;环。同时，&lt;strong&gt;netmap&lt;/strong&gt;还会维护一对环，用于与主机协议栈进行交互。这些环所指向的用于存储数据包内容的缓存位于共享空间，网卡直接将数据包存入这些缓存。应用程序可以通过调用&lt;strong&gt;netmap API&lt;/strong&gt;访问&lt;strong&gt;netmap&lt;/strong&gt;环中的数据包内容，也就可以访问用于存储数据包的缓存，也就是说，当应用程序需要访问数据包内容时，无需从内核空间到用户空间的拷贝，可以直接访问，从而实现了网络数据包的零拷贝。此外，&lt;strong&gt;netmap&lt;/strong&gt;并不会将网卡寄存器和内核的关键内存区域暴露给应用程序，因而用户态的应用程序并不会导致操作系统崩溃，所以相对一些其他的零拷贝架构，&lt;strong&gt;netmap&lt;/strong&gt;更为安全。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/netmap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png?raw=ture&#34; alt=&#34;netmap数据结构&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;netmap&lt;/strong&gt;还会通过以下几种手段来增加网络I/O的速度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）预分配固定大小的数据包存储空间，以消除每个数据包存储时动态分配内存所导致的系统开销；&lt;/li&gt;
&lt;li&gt;2）让用户态程序直接访问到网络数据包缓冲区，以减少数据拷贝的开销；&lt;/li&gt;
&lt;li&gt;3）使用一个轻量级的元数据表示，以屏蔽硬件相关的一些特性。该元数据表示支持在一次系统调用中处理大量数据包，从而可以减少系统调用的开销。以发包速度为例，&lt;strong&gt;netmap&lt;/strong&gt;可以在900MHz单核&lt;strong&gt;CPU&lt;/strong&gt;上处理10G以太网的线速（14.88Mpps）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/luigirizzo/netmap.git
./configure
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
sudo make install
sudo insmod netmap.ko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-用户态协议栈&#34;&gt;1.2 用户态协议栈&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以太网帧格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%B8%A7%E6%A0%BC%E5%BC%8F.png?raw=ture&#34; alt=&#34;以太网帧格式&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IP&lt;/strong&gt;协议头格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/ip%E5%8D%8F%E8%AE%AE%E5%A4%B4%E6%A0%BC%E5%BC%8F.png?raw=true&#34; alt=&#34;ip协议头格式&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UDP&lt;/strong&gt;头部格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/udp%E5%A4%B4%E9%83%A8%E6%A0%BC%E5%BC%8F.png?raw=true&#34; alt=&#34;udp头部格式&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TCP&lt;/strong&gt;头部格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/tcp%E5%A4%B4%E9%83%A8%E6%A0%BC%E5%BC%8F.png?raw=true&#34; alt=&#34;tcp头部格式&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2定时器&#34;&gt;2.定时器&lt;/h3&gt;
&lt;h3 id=&#34;3分布式锁&#34;&gt;3.分布式锁&lt;/h3&gt;
&lt;h3 id=&#34;4协程&#34;&gt;4.协程&lt;/h3&gt;
&lt;h4 id=&#34;41-知识准备&#34;&gt;4.1 知识准备&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;现代操作系统是分时操作系统，资源分配的基本单位是进程，CPU调度的基本单位是线程。&lt;/li&gt;
&lt;li&gt;C++程序运行时会有一个运行时栈，一次函数调用就会在栈上生成一个record。&lt;/li&gt;
&lt;li&gt;运行时内存空间分为全局变量区（存放函数，全局变量）,栈区，堆区。栈区内存分配从高地址往低地址分配，堆区从低地址往高地址分配。&lt;/li&gt;
&lt;li&gt;下一条指令地址存在于指令寄存器&lt;strong&gt;IP&lt;/strong&gt;，&lt;strong&gt;ESP&lt;/strong&gt;寄存值指向当前栈顶地址，&lt;strong&gt;EBP&lt;/strong&gt;指向当前活动栈帧的基地址。&lt;/li&gt;
&lt;li&gt;发生函数调用时操作为：将参数从右往左一次压栈，将返回地址压栈，将当前&lt;strong&gt;EBP&lt;/strong&gt;寄存器的值压栈，在栈区分配当前函数局部变量所需的空间，表现为修改&lt;strong&gt;ESP&lt;/strong&gt;寄存器的值。&lt;/li&gt;
&lt;li&gt;协程的上下文包含属于他的栈区和寄存器里面存放的值。&lt;/li&gt;
&lt;li&gt;协程是为了使用异步的优势，异步操作是为了避免&lt;strong&gt;IO&lt;/strong&gt;操作阻塞线程。那么协程挂起的时刻应该是当前协程发起异步操作的时候，而唤醒应该在其他协程退出，并且他的异步操作完成时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;42-协程实现&#34;&gt;4.2 协程实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;协程发起异步操作的时刻是该挂起协程的时刻，为了保证唤醒时能正常运行，需要正确保存并恢复其运行时的上下文：
&lt;ul&gt;
&lt;li&gt;保存当前协程的上下文（运行栈，返回地址，寄存器状态）&lt;/li&gt;
&lt;li&gt;设置将要唤醒的协程的入口指令地址到&lt;strong&gt;IP&lt;/strong&gt;寄存器&lt;/li&gt;
&lt;li&gt;恢复将要唤醒的协程的上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5连接池&#34;&gt;5.连接池&lt;/h3&gt;
&lt;h4 id=&#34;51-资源重用&#34;&gt;5.1 资源重用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;由于数据库连接得到重用，避免了频繁的创建、释放连接引起的性能开销，在减少系统消耗的基础上，另一方面也增进了系统运行环境的平稳性（减少内存碎片以及数据库临时进程/线程的数量）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;52-更快的系统响应速度&#34;&gt;5.2 更快的系统响应速度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了从数据库连接初始化和释放过程的开销，从而缩减了系统整体响应时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;53-统一的连接管理避免数据库连接泄露&#34;&gt;5.3 统一的连接管理，避免数据库连接泄露&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在较为完备的数据库连接池实现中，可根据预先的连接占用超时设定，强制收回被占用连接。从而避免了常规数据库连接操作中可能出现的资源泄露。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6rpc远程过程调用&#34;&gt;6.RPC（远程过程调用）&lt;/h3&gt;
&lt;h4 id=&#34;61-rpc框架&#34;&gt;6.1 RPC框架&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/rpc%E6%A1%86%E6%9E%B6.png?raw=true&#34; alt=&#34;rpc框架&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;62-rpc实现&#34;&gt;6.2 RPC实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基于&lt;strong&gt;TCP&lt;/strong&gt;协议实现的&lt;strong&gt;RPC&lt;/strong&gt;调用，由于&lt;strong&gt;TCP&lt;/strong&gt;协议处于协议栈的下层，能够更加灵活地对协议字段进行定制，减少网络开销，提高性能，实现更大的吞吐量和并发数。&lt;/li&gt;
&lt;li&gt;基于&lt;strong&gt;HTTP&lt;/strong&gt;协议实现的&lt;strong&gt;RPC&lt;/strong&gt;则可以使用&lt;strong&gt;JSON&lt;/strong&gt;和&lt;strong&gt;XML&lt;/strong&gt;格式的请求或响应数据。&lt;strong&gt;HTTP&lt;/strong&gt;协议是上层协议，发送包含同等内容的信息，使用&lt;strong&gt;HTTP&lt;/strong&gt;协议传输所占用的字节数会比使用&lt;strong&gt;TCP&lt;/strong&gt;协议传输 所占用的字节数更高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7异常捕获&#34;&gt;7.异常捕获&lt;/h3&gt;
&lt;h4 id=&#34;71-异常捕获原理&#34;&gt;7.1 异常捕获原理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从原理上来讲，&lt;strong&gt;throw&lt;/strong&gt;其实就是一个跳转，跳转到由&lt;strong&gt;try-catch&lt;/strong&gt;块包围的&lt;strong&gt;catch&lt;/strong&gt;块处。在这里，我们用两个函数来实现这个功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setjmp&lt;/span&gt;(jmp_buf env);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;longjmp&lt;/span&gt;(jmp_buf env, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;setjmp&lt;/strong&gt;函数记录调用时的当前状态，如&lt;strong&gt;IP&lt;/strong&gt;、&lt;strong&gt;ESP&lt;/strong&gt;等，并且返回0。状态被写在一个&lt;strong&gt;jmp_buf&lt;/strong&gt;对象中，这个对象其实是一个&lt;strong&gt;int&lt;/strong&gt;数组。比较有趣的是&lt;strong&gt;longjmp&lt;/strong&gt;函数，这个函数传入一个&lt;strong&gt;jmp_buf&lt;/strong&gt;以及一个整形。它会立即跳转到当时的&lt;strong&gt;setjmp&lt;/strong&gt;处，并且返回值是&lt;strong&gt;longjmp&lt;/strong&gt;中的第二个参数。也就是说，这个函数可能会被调用两次，从某种程度上来说，有点像&lt;strong&gt;fork()&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/setjmp_longjmp.png?raw=true&#34; alt=&#34;setjmp_longjmp&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;try-catch&lt;/strong&gt;中，&lt;strong&gt;try&lt;/strong&gt;函数充当着&lt;strong&gt;setjmp&lt;/strong&gt;的功能。当&lt;strong&gt;setjmp&lt;/strong&gt;返回0时（也就是第一次执行），执行&lt;strong&gt;try&lt;/strong&gt;块的代码，当返回非0时，说明有&lt;strong&gt;longjmp&lt;/strong&gt;被调用，此时发生异常，跳入&lt;strong&gt;catch&lt;/strong&gt;块。同时，&lt;strong&gt;throw&lt;/strong&gt;就相当于&lt;strong&gt;longjmp&lt;/strong&gt;，可以跳转到包含它的&lt;strong&gt;catch&lt;/strong&gt;块中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;longjmp&lt;/strong&gt;的第一个参数&lt;strong&gt;jmp_buf&lt;/strong&gt;，其实是在&lt;strong&gt;try&lt;/strong&gt;块中创建的。我们怎么来获取到上一个&lt;strong&gt;try&lt;/strong&gt;块中创建的&lt;strong&gt;jmp_buf&lt;/strong&gt;呢？我们可以如同操作系统创建一个运行时栈那样，我们也创建一个&lt;strong&gt;try-catch&lt;/strong&gt;堆栈。在&lt;strong&gt;try&lt;/strong&gt;时，我们把创建的&lt;strong&gt;jmp_buf&lt;/strong&gt;压入，在&lt;strong&gt;throw&lt;/strong&gt;时，我们把&lt;strong&gt;jmp_buf&lt;/strong&gt;弹出。为了线程安全，我们得为每一个线程分配这样一个栈。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gongluck.github.io/linux/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%93%E9%A2%98/ - </description>
        </item>
    
    
    
        <item>
        <title>源码分析专题</title>
        <link>https://gongluck.github.io/linux/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/</link>
        <pubDate>Mon, 28 Dec 2020 22:20:02 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/ -&lt;h2 id=&#34;九源码分析专题&#34;&gt;九、源码分析专题&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1nginx架构和模块&#34;&gt;1.Nginx架构和模块&lt;/h3&gt;
&lt;h4 id=&#34;11-nginx架构&#34;&gt;1.1 Nginx架构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nginx&lt;/strong&gt;在启动后，在&lt;strong&gt;unix&lt;/strong&gt;系统中会以&lt;strong&gt;daemon&lt;/strong&gt;的方式在后台运行，后台进程包含一个&lt;strong&gt;master&lt;/strong&gt;进程和多个&lt;strong&gt;worker&lt;/strong&gt;进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;master&lt;/strong&gt;进程主要用来管理&lt;strong&gt;worker&lt;/strong&gt;进程，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收来自外界的信号，&lt;/li&gt;
&lt;li&gt;向各&lt;strong&gt;worker&lt;/strong&gt;进程发送信号，&lt;/li&gt;
&lt;li&gt;监控&lt;strong&gt;worker&lt;/strong&gt;进程的运行状态，&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;worker&lt;/strong&gt;进程退出后(异常情况下)，会自动重新启动新的&lt;strong&gt;worker&lt;/strong&gt;进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而基本的网络事件，则是放在&lt;strong&gt;worker&lt;/strong&gt;进程中来处理了。多个&lt;strong&gt;worker&lt;/strong&gt;进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/nginx%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B.png?raw=true&#34; alt=&#34;nginx进程模型&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个&lt;strong&gt;worker&lt;/strong&gt;进程都是从&lt;strong&gt;master&lt;/strong&gt;进程&lt;strong&gt;fork&lt;/strong&gt;过来，在&lt;strong&gt;master&lt;/strong&gt;进程里面，先建立好需要&lt;strong&gt;listen&lt;/strong&gt;的&lt;strong&gt;socket&lt;/strong&gt;（&lt;strong&gt;listenfd&lt;/strong&gt;）之后，然后再&lt;strong&gt;fork&lt;/strong&gt;出多个&lt;strong&gt;worker&lt;/strong&gt;进程。所有&lt;strong&gt;worker&lt;/strong&gt;进程的&lt;strong&gt;listenfd&lt;/strong&gt;会在新连接到来时变得可读，为保证只有一个进程处理该连接，所有&lt;strong&gt;worker &lt;strong&gt;进程在注册&lt;/strong&gt;listenfd&lt;/strong&gt;读事件前抢&lt;strong&gt;accept_mutex&lt;/strong&gt;，抢到互斥锁的那个进程注册&lt;strong&gt;listenfd&lt;/strong&gt;读事件，在读事件里调用&lt;strong&gt;accept&lt;/strong&gt;接受该连接。当一个&lt;strong&gt;worker&lt;/strong&gt;进程在&lt;strong&gt;accept&lt;/strong&gt;这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后才断开连接，这样一个完整的请求就是这样的了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于每个&lt;strong&gt;worker&lt;/strong&gt;进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，&lt;strong&gt;master&lt;/strong&gt;进程则很快启动新的&lt;strong&gt;worker&lt;/strong&gt;进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nginx&lt;/strong&gt;采用了异步非阻塞的方式来处理请求。非阻塞就是，事件没有准备好，马上返回&lt;strong&gt;EAGAIN&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nginx&lt;/strong&gt;里面的定时器事件是放在一颗维 护定时器的红黑树里面，每次在进入&lt;strong&gt;epoll_wait&lt;/strong&gt;前，先从该红黑树里面拿到所有定时器事件的最小时间，在计算出&lt;strong&gt;epoll_wait&lt;/strong&gt;的超时时间后进入&lt;strong&gt;epoll_wait&lt;/strong&gt;。所以，当没有事件产生，也没有中断信号时，&lt;strong&gt;epoll_wait&lt;/strong&gt;会超时，也就是说，定时器事件到了。这时，&lt;strong&gt;nginx&lt;/strong&gt;会检查所有的超时事件，将他们的状态设置为超时，然后再去处理网络事件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-nginx基础概念&#34;&gt;1.2 Nginx基础概念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;connection&lt;/strong&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ngx_connection_s {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;               *data;
    ngx_event_t        *read;
    ngx_event_t        *write;
  
    ngx_socket_t        fd;
  
    ngx_recv_pt         recv;
    ngx_send_pt         send;
    ngx_recv_chain_pt   recv_chain;
    ngx_send_chain_pt   send_chain;
  
    ngx_listening_t    *listening;
  
    off_t               sent;
  
    ngx_log_t          *log;
  
    ngx_pool_t         *pool;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;                 type;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; sockaddr    *sockaddr;
    socklen_t           socklen;
    ngx_str_t           addr_text;
  
    ngx_proxy_protocol_t  *proxy_protocol;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#if (NGX_SSL || NGX_COMPAT)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    ngx_ssl_connection_t  *ssl;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
    ngx_udp_connection_t  *udp;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; sockaddr    *local_sockaddr;
    socklen_t           local_socklen;
  
    ngx_buf_t          *buffer;
  
    ngx_queue_t         queue;
  
    ngx_atomic_uint_t   number;
  
    ngx_uint_t          requests;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            buffered:&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            log_error:&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;     &lt;span style=&#34;color:#228b22&#34;&gt;/* ngx_connection_log_error_e */&lt;/span&gt;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            timedout:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            error:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            destroyed:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            idle:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            reusable:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            close:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            shared:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            sendfile:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            sndlowat:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            tcp_nodelay:&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;   &lt;span style=&#34;color:#228b22&#34;&gt;/* ngx_connection_tcp_nodelay_e */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            tcp_nopush:&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;    &lt;span style=&#34;color:#228b22&#34;&gt;/* ngx_connection_tcp_nopush_e */&lt;/span&gt;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            need_last_buf:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#if (NGX_HAVE_AIO_SENDFILE || NGX_COMPAT)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;            busy_count:&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#if (NGX_THREADS || NGX_COMPAT)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    ngx_thread_task_t  *sendfile_task;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nginx&lt;/strong&gt;在实现时，是通过一个连接池来管理的，每个&lt;strong&gt;worker&lt;/strong&gt;进程都有一个独立的连接池，连接池的大小是&lt;strong&gt;worker_connections&lt;/strong&gt;。这里的连接池里面保存的其实不是真实的连接，它只是一个&lt;strong&gt;worker_connections&lt;/strong&gt;大小的一个&lt;strong&gt;ngx_connection_t&lt;/strong&gt;结构的数组。并且，&lt;strong&gt;nginx&lt;/strong&gt;会通过一个链表&lt;strong&gt;free_connections&lt;/strong&gt;来保存所有的空闲&lt;strong&gt;ngx_connection_t&lt;/strong&gt;，每次获取一个连接时，就从空闲连接链表中获取一个，用完后，再放回空闲连接链表里面。&lt;/li&gt;
&lt;li&gt;一个&lt;strong&gt;nginx&lt;/strong&gt;能建立的最大连接数，应该是&lt;strong&gt;worker_connections * worker_processes&lt;/strong&gt;。当然，这里说的是最大连接数，对于&lt;strong&gt;HTTP&lt;/strong&gt;请求本地资源来说，能够支持的最大并发数量是 &lt;strong&gt;worker_connections * worker_processes&lt;/strong&gt;，而如果是 HTTP 作为反向代理来说，最大并发数量应该是&lt;strong&gt;worker_connections * worker_processes / 2&lt;/strong&gt;。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nginx&lt;/strong&gt;使用一个叫&lt;strong&gt;ngx_accept_disabled&lt;/strong&gt;的变量来控制是否去竞争&lt;strong&gt;accept_mutex&lt;/strong&gt;锁。计算 &lt;strong&gt;ngx_accept_disabled&lt;/strong&gt;的值，这个值是&lt;strong&gt;nginx&lt;/strong&gt;单进程的所有连接总数的八分之一，减去剩下的空闲连接数量，得到的这个&lt;strong&gt;ngx_accept_disabled&lt;/strong&gt;有一个规律，当剩余连接数小于总连接数的八分之一时，其值才大于 0，而且剩余的连接数越小，这个值越大。当&lt;strong&gt;ngx_accept_disabled&lt;/strong&gt;大于0时，不会去尝试获取&lt;strong&gt;accept_mutex&lt;/strong&gt;锁，并且将&lt;strong&gt;ngx_accept_disabled&lt;/strong&gt;减1，于是，每次执行到此处时，都会去减1，直到小于0。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;request&lt;/strong&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ngx_http_request_s {
    uint32_t                          signature;         &lt;span style=&#34;color:#228b22&#34;&gt;/* &amp;#34;HTTP&amp;#34; */&lt;/span&gt;
  
    ngx_connection_t                 *connection;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;                            **ctx;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;                            **main_conf;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;                            **srv_conf;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;                            **loc_conf;
  
    ngx_http_event_handler_pt         read_event_handler;
    ngx_http_event_handler_pt         write_event_handler;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#if (NGX_HTTP_CACHE)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    ngx_http_cache_t                 *cache;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
    ngx_http_upstream_t              *upstream;
    ngx_array_t                      *upstream_states;
                                         &lt;span style=&#34;color:#228b22&#34;&gt;/* of ngx_http_upstream_state_t */&lt;/span&gt;
  
    ngx_pool_t                       *pool;
    ngx_buf_t                        *header_in;
  
    ngx_http_headers_in_t             headers_in;
    ngx_http_headers_out_t            headers_out;
  
    ngx_http_request_body_t          *request_body;
  
    time_t                            lingering_time;
    time_t                            start_sec;
    ngx_msec_t                        start_msec;
  
    ngx_uint_t                        method;
    ngx_uint_t                        http_version;
  
    ngx_str_t                         request_line;
    ngx_str_t                         uri;
    ngx_str_t                         args;
    ngx_str_t                         exten;
    ngx_str_t                         unparsed_uri;
  
    ngx_str_t                         method_name;
    ngx_str_t                         http_protocol;
    ngx_str_t                         schema;
  
    ngx_chain_t                      *out;
    ngx_http_request_t               *main;
    ngx_http_request_t               *parent;
    ngx_http_postponed_request_t     *postponed;
    ngx_http_post_subrequest_t       *post_subrequest;
    ngx_http_posted_request_t        *posted_requests;
  
    ngx_int_t                         phase_handler;
    ngx_http_handler_pt               content_handler;
    ngx_uint_t                        access_code;
  
    ngx_http_variable_value_t        *variables;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#if (NGX_PCRE)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    ngx_uint_t                        ncaptures;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;                              *captures;
    u_char                           *captures_data;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
    size_t                            limit_rate;
    size_t                            limit_rate_after;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/* used to learn the Apache compatible response length without a header */&lt;/span&gt;
    size_t                            header_size;
  
    off_t                             request_length;
  
    ngx_uint_t                        err_status;
  
    ngx_http_connection_t            *http_connection;
    ngx_http_v2_stream_t             *stream;
  
    ngx_http_log_handler_pt           log_handler;
  
    ngx_http_cleanup_t               *cleanup;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          count:&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          subrequests:&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          blocked:&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          aio:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          http_state:&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/* URI with &amp;#34;/.&amp;#34; and on Win32 with &amp;#34;//&amp;#34; */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          complex_uri:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/* URI with &amp;#34;%&amp;#34; */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          quoted_uri:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/* URI with &amp;#34;+&amp;#34; */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          plus_in_uri:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/* URI with &amp;#34; &amp;#34; */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          space_in_uri:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          invalid_header:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          add_uri_to_alias:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          valid_location:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          valid_unparsed_uri:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          uri_changed:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          uri_changes:&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          request_body_in_single_buf:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          request_body_in_file_only:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          request_body_in_persistent_file:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          request_body_in_clean_file:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          request_body_file_group_access:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          request_body_file_log_level:&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          request_body_no_buffering:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          subrequest_in_memory:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          waited:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#if (NGX_HTTP_CACHE)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          cached:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#if (NGX_HTTP_GZIP)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          gzip_tested:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          gzip_ok:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          gzip_vary:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#if (NGX_PCRE)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          realloc_captures:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          proxy:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          bypass_cache:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          no_cache:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * instead of using the request context data in
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * ngx_http_limit_conn_module and ngx_http_limit_req_module
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * we use the bit fields in the request structure
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          limit_conn_status:&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          limit_req_status:&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          limit_rate_set:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          limit_rate_after_set:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#if 0&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    unsigned                          cacheable:1;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          pipeline:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          chunked:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          header_only:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          expect_trailers:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          keepalive:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          lingering_close:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          discard_body:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          reading_body:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          internal:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          error_page:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          filter_finalize:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          post_action:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          request_complete:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          request_output:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          header_sent:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          expect_tested:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          root_tested:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          done:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          logged:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          buffered:&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          main_filter_need_in_memory:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          filter_need_in_memory:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          filter_need_temporary:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          preserve_body:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          allow_ranges:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          subrequest_ranges:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          single_range:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          disable_not_modified:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          stat_reading:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          stat_writing:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          stat_processing:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          background:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          health_check:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/* used to parse HTTP headers */&lt;/span&gt;
  
    ngx_uint_t                        state;
  
    ngx_uint_t                        header_hash;
    ngx_uint_t                        lowcase_index;
    u_char                            lowcase_header[NGX_HTTP_LC_HEADER_LEN];
  
    u_char                           *header_name_start;
    u_char                           *header_name_end;
    u_char                           *header_start;
    u_char                           *header_end;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * a memory that can be reused after parsing a request line
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * via ngx_http_ephemeral_t
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
  
    u_char                           *uri_start;
    u_char                           *uri_end;
    u_char                           *uri_ext;
    u_char                           *args_start;
    u_char                           *request_start;
    u_char                           *request_end;
    u_char                           *method_end;
    u_char                           *schema_start;
    u_char                           *schema_end;
    u_char                           *host_start;
    u_char                           *host_end;
    u_char                           *port_start;
    u_char                           *port_end;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          http_minor:&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;                          http_major:&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于&lt;strong&gt;nginx&lt;/strong&gt;来说，一个请求是从&lt;strong&gt;ngx_http_init_request&lt;/strong&gt;开始的，在这个函数中，会设置读事件为&lt;strong&gt;ngx_http_process_request_line&lt;/strong&gt;，也就是说，接下来的网络事件，会由&lt;strong&gt;ngx_http_process_request_line&lt;/strong&gt;来执行，处理请求行。通过&lt;strong&gt;ngx_http_read_request_header&lt;/strong&gt;来读取请求数据。然后调用&lt;strong&gt;ngx_http_parse_request_line&lt;/strong&gt;函数来解析请求行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nginx&lt;/strong&gt;为提高效率，采用状态机来解析请求行，而且在进行&lt;strong&gt;method&lt;/strong&gt;的比较时，没有直接使用字符串比较，而是将四个字符转换成一个整型，然后一次比较以减少&lt;strong&gt;cpu&lt;/strong&gt;的指令数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整个请求行解析到的参数，会保存到&lt;strong&gt;ngx_http_request_t&lt;/strong&gt;结构当中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在解析完请求行后，&lt;strong&gt;nginx&lt;/strong&gt;会设置读事件的&lt;strong&gt;handler&lt;/strong&gt;为&lt;strong&gt;ngx_http_process_request_headers&lt;/strong&gt;，然后后续的请求就在&lt;strong&gt;ngx_http_process_request_headers&lt;/strong&gt;中进行读取与解析。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ngx_http_process_request_headers&lt;/strong&gt;函数用来读取请求头，跟请求行一样，还是调用&lt;strong&gt;ngx_http_read_request_header&lt;/strong&gt;来读取请求头，调用&lt;strong&gt;ngx_http_parse_header_line&lt;/strong&gt;来解析一行请求头，解析到的请求头会保存到&lt;strong&gt;ngx_http_request_t&lt;/strong&gt;的域&lt;strong&gt;headers_in&lt;/strong&gt;中，&lt;strong&gt;headers_in&lt;/strong&gt;是一个链表结构，保存所有的请求头。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而&lt;strong&gt;HTTP&lt;/strong&gt;中有些请求是需要特别处理的，这些请求头与请求处理函数存放在一个映射表里面，即&lt;strong&gt;ngx_http_headers_in&lt;/strong&gt;，在初始化时，会生成一个&lt;strong&gt;hash&lt;/strong&gt;表，当每解析到一个请求头后，就会先在这个&lt;strong&gt;hash&lt;/strong&gt;表中查找，如果有找到，则调用相应的处理函数来处理这个请求头。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当&lt;strong&gt;nginx&lt;/strong&gt;解析到两个回车换行符时，就表示请求头的结束，此时就会调用&lt;strong&gt;ngx_http_process_request&lt;/strong&gt;来处理请求了。&lt;strong&gt;ngx_http_process_request&lt;/strong&gt;会设置当前的连接的读写事件处理函数为&lt;strong&gt;ngx_http_request_handler&lt;/strong&gt;，然后再调用&lt;strong&gt;ngx_http_handler&lt;/strong&gt;来真正开始处理一个完整的&lt;strong&gt;http&lt;/strong&gt;请求。读写事件处理函数都是&lt;strong&gt;ngx_http_request_handler&lt;/strong&gt;，其实在这个函数中，会根据当前事件是读事件还是写事件，分别调用&lt;strong&gt;ngx_http_request_t&lt;/strong&gt;中的&lt;strong&gt;read_event_handler&lt;/strong&gt;或者是&lt;strong&gt;write_event_handler&lt;/strong&gt;。由于此时，我们的请求头已经读取完成了，&lt;strong&gt;nginx&lt;/strong&gt;先不读取请求&lt;strong&gt;body&lt;/strong&gt;，设置&lt;strong&gt;read_event_handler&lt;/strong&gt;为&lt;strong&gt;ngx_http_block_reading&lt;/strong&gt;，即不读取数据了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;真正开始处理数据，是在&lt;strong&gt;ngx_http_handler&lt;/strong&gt;这个函数里面，这个函数会设置 &lt;strong&gt;write_event_handler&lt;/strong&gt;为&lt;strong&gt;ngx_http_core_run_phases&lt;/strong&gt;，并执行&lt;strong&gt;ngx_http_core_run_phases&lt;/strong&gt;函数。&lt;strong&gt;ngx_http_core_run_phases&lt;/strong&gt;这个函数将执行多阶段请求处理，&lt;strong&gt;nginx&lt;/strong&gt;将一个&lt;strong&gt;http&lt;/strong&gt;请求的处理分为多个阶段，那么这个函数就是执行这些阶段来产生数据。最终是调用&lt;strong&gt;ngx_http_core_run_phases&lt;/strong&gt;来处理请求，产生的响应头会放在&lt;strong&gt;ngx_http_request_t&lt;/strong&gt;的&lt;strong&gt;headers_out&lt;/strong&gt;中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nginx&lt;/strong&gt;的各种阶段会对请求进行处理，最后会调用&lt;strong&gt;filter&lt;/strong&gt;来过滤数据，对数据进行加工。这里的&lt;strong&gt;filter&lt;/strong&gt;包括&lt;strong&gt;header filter&lt;/strong&gt;与&lt;strong&gt;body filter&lt;/strong&gt;，即对响应头或响应体进行处理。&lt;strong&gt;filter&lt;/strong&gt;是一个链表结构，分别有&lt;strong&gt;header filter&lt;/strong&gt;与&lt;strong&gt;body filter&lt;/strong&gt;，先执行&lt;strong&gt;header filter&lt;/strong&gt;中的所有&lt;strong&gt;filter&lt;/strong&gt;，然后再执行&lt;strong&gt;body filter&lt;/strong&gt;中的所有&lt;strong&gt;filter&lt;/strong&gt;。在&lt;strong&gt;header filter&lt;/strong&gt;中的最后一个&lt;strong&gt;filter&lt;/strong&gt;，即&lt;strong&gt;ngx_http_header_filter&lt;/strong&gt;， 这个&lt;strong&gt;filter&lt;/strong&gt;将会遍历所有的响应头，最后需要输出的响应头在一个连续的内存，然后调用&lt;strong&gt;ngx_http_write_filter&lt;/strong&gt;进行输出。&lt;strong&gt;ngx_http_write_filter&lt;/strong&gt;是&lt;strong&gt;body filter&lt;/strong&gt;中的最后一个，所以&lt;strong&gt;nginx&lt;/strong&gt;首先的&lt;strong&gt;body&lt;/strong&gt;信息，在经过一系列的&lt;strong&gt;body filter&lt;/strong&gt;之后，最后也会调用&lt;strong&gt;ngx_http_write_filter&lt;/strong&gt;来进行输出。&lt;strong&gt;nginx&lt;/strong&gt;会将整个请求头都放在一个&lt;strong&gt;buffer&lt;/strong&gt;里面，这个&lt;strong&gt;buffer&lt;/strong&gt;的大小通过配置项&lt;strong&gt;client_header_buffer_size&lt;/strong&gt;来设置，如果用户的请求头太大，这个 &lt;strong&gt;buffer&lt;/strong&gt;装不下，那&lt;strong&gt;nginx&lt;/strong&gt;就会重新分配一个新的更大的&lt;strong&gt;buffer&lt;/strong&gt;来装请求头，这个大&lt;strong&gt;buffer&lt;/strong&gt;可以通过&lt;strong&gt;large_client_header_buffers&lt;/strong&gt;来设置，这个&lt;strong&gt;large_buffer&lt;/strong&gt;这一组&lt;strong&gt;buffer&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了保存请求行或请求头的完整性，一个完整的请求行或请求头，需要放在一个连续的内存里面，所以，一个完整的请求行或请求头，只会保存在一个&lt;strong&gt;buffer&lt;/strong&gt;里面。这样，如果请求行大于一个&lt;strong&gt;buffer&lt;/strong&gt;的大小，就会返回&lt;strong&gt;414&lt;/strong&gt;错误，如果一个请求头大小大于一个&lt;strong&gt;buffer&lt;/strong&gt;大小，就会返回&lt;strong&gt;400&lt;/strong&gt;错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/nginx%E5%A4%84%E7%90%86http%E6%B5%81%E7%A8%8B.png?raw=true&#34; alt=&#34;nginx处理http流程&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;13-handler模块&#34;&gt;1.3 Handler模块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Handler&lt;/strong&gt;模块就是接受来自客户端的请求并产生输出的模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/nginx/module&#34;&gt;自定义模块&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Author: gongluck 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Date: 2020-12-08 19:10:29 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified by: gongluck
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified time: 2020-12-08 19:11:06
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// ./configure --add-module=/mnt/e/Code/CVIP/code/nginx/module
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// sudo ./objs/nginx -c /mnt/e/Code/CVIP/code/nginx/module/hello.conf
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;ngx_http.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;ngx_config.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;ngx_core.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#008b45&#34;&gt;ngx_http_hello_module_set&lt;/span&gt;(ngx_conf_t *cf, ngx_command_t *cmd, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *conf);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ngx_int_t &lt;span style=&#34;color:#008b45&#34;&gt;ngx_http_hello_module_handler&lt;/span&gt;(ngx_http_request_t *r);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 模块配置结构
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;
{
    ngx_str_t hello_string;
} ngx_http_hello_loc_conf_t;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 模块配置指令
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ngx_command_t hello_commands[] = {
    {
        ngx_string(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;),                 &lt;span style=&#34;color:#228b22&#34;&gt;//配置指令的名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        NGX_HTTP_LOC_CONF | NGX_CONF_NOARGS, &lt;span style=&#34;color:#228b22&#34;&gt;//该配置指令属性的集合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ngx_http_hello_module_set,           &lt;span style=&#34;color:#228b22&#34;&gt;//当nginx在解析配置的时候，如果遇到这个配置指令，将会把读取到的值传递给这个函数进行分解处理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        NGX_HTTP_LOC_CONF_OFFSET,            &lt;span style=&#34;color:#228b22&#34;&gt;//指定当前配置项存储的内存位置,实际上是使用哪个内存池的问题。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,                                   &lt;span style=&#34;color:#228b22&#34;&gt;//指定该配置项值的精确存放位置，一般指定为某一个结构体变量的字段偏移。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;                                 &lt;span style=&#34;color:#228b22&#34;&gt;//可以指向任何一个在读取配置过程中需要的数据，以便于进行配置读取的处理。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    },
    ngx_null_command};
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 模块上下文结构
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ngx_http_module_t hello_ctx = {
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;//在创建和读取该模块的配置信息之前被调用
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;//在创建和读取该模块的配置信息之后被调用
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;//调用该函数创建本模块位于http block的配置信息存储结构。该函数成功的时候，返回创建的配置对象。失败的话，返回NULL。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;//调用该函数初始化本模块位于http block 的配置信息存储结构。该函数成功的时候，返回NGX_CONF_OK。失败的话，返回NGX_CONF_ERROR或错误字符串。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;//调用该函数创建本模块位于http server block的配置信息存储结构，每个server block会创建一个。该函数成功的时候，返回创建的配置对象。失败的话，返回NULL。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;//因为有些配置指令既可以出现在http block，也可以出现在http server block中。那么遇到这种情况，每个server都会有自己存储结构来存储该server的配置，但是在这种情况下http block中的配置与server block中的配置信息发生冲突的时候，就需要调用此函数进行合并，该函数并非必须提供，当预计到绝对不会发生需要合并的情况的时候，就无需提供。当然为了安全起见还是建议提供。该函数执行成功的时候，返回NGX_CONF_OK。失败的话，返回NGX_CONF_ERROR或错误字符串。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;//调用该函数创建本模块位于location block的配置信息存储结构。每个在配置中指明的location创建一个。该函数执行成功，返回创建的配置对象。失败的话，返回NULL。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;//与merge_srv_conf类似，这个也是进行配置值合并的地方。该函数成功的时候，返回NGX_CONF_OK。失败的话，返回NGX_CONF_ERROR或错误字符串。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;};
  
&lt;span style=&#34;color:#228b22&#34;&gt;// ngx_http_hello_module
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;ngx_module_t ngx_http_hello_module = {
    NGX_MODULE_V1,
    &amp;amp;hello_ctx,      &lt;span style=&#34;color:#228b22&#34;&gt;/* module context */&lt;/span&gt;
    hello_commands,  &lt;span style=&#34;color:#228b22&#34;&gt;/* module directives */&lt;/span&gt;
    NGX_HTTP_MODULE, &lt;span style=&#34;color:#228b22&#34;&gt;/* module type */&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;,            &lt;span style=&#34;color:#228b22&#34;&gt;/* init master */&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;,            &lt;span style=&#34;color:#228b22&#34;&gt;/* init module */&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;,            &lt;span style=&#34;color:#228b22&#34;&gt;/* init process */&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;,            &lt;span style=&#34;color:#228b22&#34;&gt;/* init thread */&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;,            &lt;span style=&#34;color:#228b22&#34;&gt;/* exit thread */&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;,            &lt;span style=&#34;color:#228b22&#34;&gt;/* exit process */&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;,            &lt;span style=&#34;color:#228b22&#34;&gt;/* exit master */&lt;/span&gt;
    NGX_MODULE_V1_PADDING};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#008b45&#34;&gt;ngx_http_hello_module_set&lt;/span&gt;(ngx_conf_t *cf, ngx_command_t *cmd, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *conf)
{
    ngx_http_core_loc_conf_t *corecf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    corecf-&amp;gt;handler = ngx_http_hello_module_handler;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; NGX_CONF_OK;
}
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ngx_int_t &lt;span style=&#34;color:#008b45&#34;&gt;ngx_http_hello_module_handler&lt;/span&gt;(ngx_http_request_t *r)
{
    ngx_str_t str = ngx_string(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello, Nginx!&amp;#34;&lt;/span&gt;);
    ngx_buf_t *b = ngx_pcalloc(r-&amp;gt;pool, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(ngx_buf_t));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (b == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; NGX_HTTP_INTERNAL_SERVER_ERROR;
    }
  
    ngx_chain_t out;
    out.buf = b;
    out.next = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    b-&amp;gt;pos = str.data;
    b-&amp;gt;last = b-&amp;gt;pos + str.len;
    b-&amp;gt;memory = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;   &lt;span style=&#34;color:#228b22&#34;&gt;/* this buffer is in memory */&lt;/span&gt;
    b-&amp;gt;last_buf = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;/* this is the last buffer in the buffer chain */&lt;/span&gt;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/* set the status line */&lt;/span&gt;
    r-&amp;gt;headers_out.status = NGX_HTTP_OK;
    r-&amp;gt;headers_out.content_length_n = str.len;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/* send the headers of your response */&lt;/span&gt;
    ngx_int_t rc = ngx_http_send_header(r);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (rc == NGX_ERROR || rc &amp;gt; NGX_OK || r-&amp;gt;header_only)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; rc;
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/* send the buffer chain of your response */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ngx_http_output_filter(r, &amp;amp;out);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;14-filter模块&#34;&gt;1.4 Filter模块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;过滤（filter）&lt;strong&gt;模块是过滤响应头和内容的模块，可以对回复的头和内容进行处理。它的处理时间在获取回复内容之后，向用户发送响应之前。它的处理过程分为两个阶段，过滤&lt;/strong&gt;HTTP&lt;/strong&gt;回复的头部和主体，在这两个阶段可以分别对头部和主体进行修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有模块的响应内容要返回给客户端，都必须调用这两个接口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//分别对头部和主体进行过滤的函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;ngx_http_top_header_filter(r); 
ngx_http_top_body_filter(r, in); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过滤模块的调用是有顺序的，它的顺序在编译的时候就决定了。控制编译的脚本位于&lt;strong&gt;auto/modules&lt;/strong&gt;中，当编译完&lt;strong&gt;Nginx&lt;/strong&gt;以后，可以在&lt;strong&gt;objs&lt;/strong&gt;目录下面看到一个&lt;strong&gt;ngx_modules.c&lt;/strong&gt;的文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;ngx_module_t *ngx_modules[] = {
    &amp;amp;ngx_core_module,
    &amp;amp;ngx_errlog_module,
    &amp;amp;ngx_conf_module,
    &amp;amp;ngx_regex_module,
    &amp;amp;ngx_events_module,
    &amp;amp;ngx_event_core_module,
    &amp;amp;ngx_epoll_module,
    &amp;amp;ngx_http_module,
    &amp;amp;ngx_http_core_module,
    &amp;amp;ngx_http_log_module,
    &amp;amp;ngx_http_upstream_module,
    &amp;amp;ngx_http_static_module,
    &amp;amp;ngx_http_autoindex_module,
    &amp;amp;ngx_http_index_module,
    &amp;amp;ngx_http_mirror_module,
    &amp;amp;ngx_http_try_files_module,
    &amp;amp;ngx_http_auth_basic_module,
    &amp;amp;ngx_http_access_module,
    &amp;amp;ngx_http_limit_conn_module,
    &amp;amp;ngx_http_limit_req_module,
    &amp;amp;ngx_http_geo_module,
    &amp;amp;ngx_http_map_module,
    &amp;amp;ngx_http_split_clients_module,
    &amp;amp;ngx_http_referer_module,
    &amp;amp;ngx_http_rewrite_module,
    &amp;amp;ngx_http_proxy_module,
    &amp;amp;ngx_http_fastcgi_module,
    &amp;amp;ngx_http_uwsgi_module,
    &amp;amp;ngx_http_scgi_module,
    &amp;amp;ngx_http_memcached_module,
    &amp;amp;ngx_http_empty_gif_module,
    &amp;amp;ngx_http_browser_module,
    &amp;amp;ngx_http_upstream_hash_module,
    &amp;amp;ngx_http_upstream_ip_hash_module,
    &amp;amp;ngx_http_upstream_least_conn_module,
    &amp;amp;ngx_http_upstream_random_module,
    &amp;amp;ngx_http_upstream_keepalive_module,
    &amp;amp;ngx_http_upstream_zone_module,
    &amp;amp;ngx_http_hello_module,
    &amp;amp;ngx_http_write_filter_module,
    &amp;amp;ngx_http_header_filter_module,
    &amp;amp;ngx_http_chunked_filter_module,
    &amp;amp;ngx_http_range_header_filter_module,
    &amp;amp;ngx_http_gzip_filter_module,
    &amp;amp;ngx_http_postpone_filter_module,
    &amp;amp;ngx_http_ssi_filter_module,
    &amp;amp;ngx_http_charset_filter_module,
    &amp;amp;ngx_http_userid_filter_module,
    &amp;amp;ngx_http_headers_filter_module,&lt;span style=&#34;color:#228b22&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &amp;amp;ngx_http_copy_filter_module,&lt;span style=&#34;color:#228b22&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &amp;amp;ngx_http_range_body_filter_module,
    &amp;amp;ngx_http_not_modified_filter_module,
    &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从&lt;strong&gt;write_filter&lt;/strong&gt;到&lt;strong&gt;not_modified_filter&lt;/strong&gt;，模块的执行顺序是反向的。所有第三方的模块只能加入到&lt;strong&gt;copy_filter&lt;/strong&gt;和&lt;strong&gt;headers_filter&lt;/strong&gt;模块之间执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在过滤模块中，所有输出的内容都是通过一条单向链表所组成。这种单向链表的设计，正好应和了&lt;strong&gt;Nginx&lt;/strong&gt;流式的输出模式。每次&lt;strong&gt;Nginx&lt;/strong&gt;都是读到一部分的内容，就放到链表，然后输出出去。这种设计的好处是简单，非阻塞，但是相应的问题就是跨链表的内容操作非常麻烦， 如果需要跨链表，很多时候都只能缓存链表的内容。单链表负载的就是&lt;strong&gt;ngx_buf_t&lt;/strong&gt;，这个结构体使用非常广泛。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;响应头过滤函数主要的用处就是处理&lt;strong&gt;HTTP&lt;/strong&gt;响应的头，可以根据实际情况对于响应头进行修改或者添加删除。响应头过滤函数先于响应体过滤函数，而且只调用一次，所以一般可作过滤模块的初始化工作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;ngx_int_t
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_http_send_header&lt;/span&gt;(ngx_http_request_t *r)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (r-&amp;gt;post_action) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; NGX_OK;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (r-&amp;gt;header_sent) {
        ngx_log_error(NGX_LOG_ALERT, r-&amp;gt;connection-&amp;gt;log, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,
                      &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;header already sent&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; NGX_ERROR;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (r-&amp;gt;err_status) {
        r-&amp;gt;headers_out.status = r-&amp;gt;err_status;
        r-&amp;gt;headers_out.status_line.len = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ngx_http_top_header_filter(r);&lt;span style=&#34;color:#228b22&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以把&lt;strong&gt;HTTP&lt;/strong&gt;响应头的存储方式想象成一个&lt;strong&gt;hash&lt;/strong&gt;表，在&lt;strong&gt;Nginx&lt;/strong&gt;内部可以很方便地查找和修改各个响应头 部，&lt;strong&gt;ngx_http_header_filter_module&lt;/strong&gt;过滤模块把所有的&lt;strong&gt;HTTP&lt;/strong&gt;头组合成一个完整的&lt;strong&gt;buffer&lt;/strong&gt;，最终&lt;strong&gt;ngx_http_write_filter_module&lt;/strong&gt;过滤模块把&lt;strong&gt;buffer&lt;/strong&gt;输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;响应体过滤函数是过滤响应主体的函数。&lt;strong&gt;ngx_http_top_body_filter&lt;/strong&gt;这个函数每个请求可能会被执行多次，它的入口函数是&lt;strong&gt;ngx_http_output_filter&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;ngx_int_t
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_http_output_filter&lt;/span&gt;(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_int_t          rc;
    ngx_connection_t  *c;
  
    c = r-&amp;gt;connection;
  
    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c-&amp;gt;log, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,
                   &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http output filter &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%V?%V&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, &amp;amp;r-&amp;gt;uri, &amp;amp;r-&amp;gt;args);
  
    rc = ngx_http_top_body_filter(r, in);
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (rc == NGX_ERROR) {
        &lt;span style=&#34;color:#228b22&#34;&gt;/* NGX_ERROR may be returned by any filter */&lt;/span&gt;
        c-&amp;gt;error = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; rc;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;15-upstream模块&#34;&gt;1.5 Upstream模块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;从本质上说，&lt;strong&gt;upstream&lt;/strong&gt;属于&lt;strong&gt;handler&lt;/strong&gt;，只是他不产生自己的内容，而是通过请求后端服务器得到内容，所以才称为&lt;strong&gt;upstream&lt;/strong&gt;（上游）。&lt;/li&gt;
&lt;li&gt;请求并取得响应内容的整个过程已经被封装到&lt;strong&gt;nginx&lt;/strong&gt;内部，所以&lt;strong&gt;upstream&lt;/strong&gt;模块只需要开发若干回调函数，完成构造请求和解析响应等具体的工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;upstream&lt;/strong&gt;模块使用的就是&lt;strong&gt;handler&lt;/strong&gt;模块的接入方式。同时，&lt;strong&gt;upstream&lt;/strong&gt;模块的指令系统的设计也是遵循&lt;strong&gt;handler&lt;/strong&gt;模块的基本规则：配置该模块才会执行该模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;16-负载均衡模块&#34;&gt;1.6 负载均衡模块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;负载均衡模块用于从&lt;strong&gt;upstream&lt;/strong&gt;指令定义的后端主机列表中选取一台主机。&lt;strong&gt;nginx&lt;/strong&gt;先使用负载均衡模块找到一台主机，再使用&lt;strong&gt;upstream&lt;/strong&gt;模块实现与这台主机的交互。&lt;/li&gt;
&lt;li&gt;核心指令&lt;strong&gt;ip_hash&lt;/strong&gt;只能在&lt;strong&gt;upstream {}&lt;strong&gt;中使用。这条指令用于通知&lt;/strong&gt;nginx&lt;/strong&gt;使用&lt;strong&gt;ip hash&lt;/strong&gt;负载均衡算法。如果没加这条指令，&lt;strong&gt;nginx&lt;/strong&gt;会使用默认的&lt;strong&gt;round robin&lt;/strong&gt;负载均衡模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2skynet&#34;&gt;2.Skynet&lt;/h3&gt;
&lt;h4 id=&#34;21-环境安装&#34;&gt;2.1 环境安装&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/cloudwu/skynet.git
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; skynet
make linux -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;22-skynet工作模型&#34;&gt;2.2 Skynet工作模型&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/Skynet%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B.png?raw=true&#34; alt=&#34;Skynet工作模型&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;skynet&lt;/strong&gt;中的&lt;strong&gt;actor&lt;/strong&gt;模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隔离的环境（内存块或&lt;strong&gt;lua&lt;/strong&gt;虚拟机）&lt;/li&gt;
&lt;li&gt;消息队列&lt;/li&gt;
&lt;li&gt;回调函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;logger&lt;/strong&gt;服务&lt;strong&gt;service-src/service_logger.c&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lua&lt;/strong&gt;服务启动器&lt;strong&gt;service-src/service_snlua.c&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;23-skynet-lua例子httpsgithubcomgongluckcvipblobmastercodeskynet&#34;&gt;2.3 &lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/skynet&#34;&gt;Skynet Lua例子&lt;/a&gt;&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ./skynet /mnt/e/Code/CVIP/code/skynet/test.conf&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;local&lt;/span&gt; skynet = require &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skynet&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;local&lt;/span&gt; socket = require &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skynet.socket&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;event_loop&lt;/span&gt;(clientfd)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;local&lt;/span&gt; data = socket.readline(clientfd)&lt;span style=&#34;color:#228b22&#34;&gt;--从网络获取 以\n为分隔符的数据包&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8b008b&#34;&gt;not&lt;/span&gt; data &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;then&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;end&lt;/span&gt;
        print(clientfd, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;recv:&amp;#34;&lt;/span&gt;, data)
        socket.write(clientfd, data..&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;accept&lt;/span&gt;(clientfd, addr)&lt;span style=&#34;color:#228b22&#34;&gt;-- 回调函数的作用 就是可以将 fd绑定到其他actor&lt;/span&gt;
    print(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;accept a connect:&amp;#34;&lt;/span&gt;, clientfd, addr)
    socket.start(clientfd) &lt;span style=&#34;color:#228b22&#34;&gt;-- 将clientfd注册到epoll&lt;/span&gt;
    skynet.fork(event_loop, clientfd) &lt;span style=&#34;color:#228b22&#34;&gt;-- 实现一个简单的echo服务，可以通过 telnet 127.0.0.1 8001来连接skynet&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;end&lt;/span&gt;

skynet.start(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; ()
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;local&lt;/span&gt; listenfd = socket.listen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;8001&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;-- socket bind listen &lt;/span&gt;
    socket.start(listenfd, accept) &lt;span style=&#34;color:#228b22&#34;&gt;-- 将listenfd注册到epoll，收到连接会回调accept函数&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;end&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;3zeromq&#34;&gt;3.ZeroMQ&lt;/h3&gt;
&lt;h4 id=&#34;31-环境安装&#34;&gt;3.1 环境安装&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/zeromq/libzmq.git
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; libzmq/
./autogen.sh
./configure --enable-debug
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
sudo make install
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;32-例子代码httpsgithubcomgongluckcvipblobmastercodezeromq&#34;&gt;3.2 &lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/zeromq&#34;&gt;例子代码&lt;/a&gt;&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Author: gongluck 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Date: 2020-12-10 02:27:44 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified by: gongluck
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified time: 2020-12-10 02:37:16
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;// gcc -o server server.c -lzmq -g -O0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;zmq.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *context = zmq_ctx_new();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *responder = zmq_socket(context, ZMQ_REP);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; rc = zmq_bind(responder, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;tcp://*:5555&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;];
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ret = zmq_recv(responder, buffer, &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;收到%.*s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, ret, buffer);
        zmq_send(responder, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;server recved.&amp;#34;&lt;/span&gt;, strlen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;server recved.&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    }
    
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Author: gongluck 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Date: 2020-12-10 02:33:38 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified by: gongluck
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified time: 2020-12-10 02:37:00
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;// gcc -o client client.c -lzmq -g -O0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;zmq.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *context = zmq_ctx_new();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *requester = zmq_socket(context, ZMQ_REQ);
    zmq_connect(requester, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;tcp://localhost:5555&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; request_nbr = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; request_nbr != &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;; request_nbr++)
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;] = {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;};
        zmq_send(requester, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
        zmq_recv(requester, buffer, &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;接收到 %.20s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, buffer);
    }
    zmq_close(requester);
    zmq_ctx_destroy(context);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;4redis&#34;&gt;4.Redis&lt;/h3&gt;
&lt;h4 id=&#34;41-redis的元素结构&#34;&gt;4.1 Redis的元素结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;hash&lt;/strong&gt;值取余的&lt;strong&gt;table&lt;/strong&gt;数组+&lt;strong&gt;hash&lt;/strong&gt;表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;hash&lt;/strong&gt;表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* This is our hash table structure. Every dictionary has two of this as we
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * implement incremental rehashing, for the old to the new table. */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; dictht {
    dictEntry **table;&lt;span style=&#34;color:#228b22&#34;&gt;//table属性是⼀个数组，数组中的每个元素都是⼀个指向dict.h/dictEntry 结构的指针，每个dictEntry结构保存着⼀个键值对
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; size;&lt;span style=&#34;color:#228b22&#34;&gt;//size属性记录了哈希表的⼤⼩，也即是table数组的⼤⼩
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; sizemask;&lt;span style=&#34;color:#228b22&#34;&gt;//sizemask属性的值总是等于size - 1， 这个属性和哈希值⼀起决定⼀个键应该被放到table数组的哪个索引上⾯
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; used;&lt;span style=&#34;color:#228b22&#34;&gt;//used属性则记录了哈希表⽬前已有节点（键值对）的数量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;} dictht;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;hash&lt;/strong&gt;表节点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; dictEntry {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *key;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;union&lt;/span&gt; {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *val;
        uint64_t u64;
        int64_t s64;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; d;
    } v;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; dictEntry *next;&lt;span style=&#34;color:#228b22&#34;&gt;//next属性是指向另⼀个哈希表节点的指针，这个指针可以将多个哈希值相同的键值对连接在⼀次，以此来解决键冲突（collision）的问题。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;} dictEntry;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/redis%E5%93%88%E5%B8%8C%E8%A1%A8%E7%BB%93%E6%9E%84.png?raw=true&#34; alt=&#34;redis哈希表结构&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字典&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; dict {
    dictType *type;&lt;span style=&#34;color:#228b22&#34;&gt;//type属性是⼀个指向dictType结构的指针，每个dictType结构保存了⼀簇⽤于操作特定类型键值对的函数，Redis会为⽤途不同的字典设置不同的类型特定函数。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *privdata;&lt;span style=&#34;color:#228b22&#34;&gt;//privdata属性保存了需要传给dictType类型特定函数的可选参数。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    dictht ht[&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;];&lt;span style=&#34;color:#228b22&#34;&gt;//ht属性是⼀个包含两个项的数组，数组中的每个项都是⼀个dictht哈希表，⼀般情况下， 字典只使⽤ht[0]哈希表，ht[1]哈希表只会在对ht[0]哈希表进⾏rehash时使⽤。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; rehashidx;&lt;span style=&#34;color:#228b22&#34;&gt;//记录了rehash⽬前的进度，如果⽬前没有在进⾏rehash，那么它的值为-1。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; iterators; &lt;span style=&#34;color:#228b22&#34;&gt;/* number of iterators currently running */&lt;/span&gt;
} dict;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; dictType {
    uint64_t (*hashFunction)(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *key);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *(*keyDup)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *privdata, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *key);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *(*valDup)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *privdata, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *obj);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; (*keyCompare)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *privdata, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *key1, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *key2);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; (*keyDestructor)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *privdata, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *key);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; (*valDestructor)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *privdata, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *obj);
} dictType;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/redis%E5%AD%97%E5%85%B8%E7%BB%93%E6%9E%84.png?raw=true&#34; alt=&#34;redis字典结构&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;42-rehash&#34;&gt;4.2 Rehash&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;随着操作的不断执⾏，哈希表保存的键值对会逐渐地增多或者减少，为了让哈希表的负载因⼦（ratio）维持在⼀个合理的范围之内，当哈希表保存的键值对数量太多或者太少时，程序需要对哈希表的⼤⼩进⾏相应的扩展或者收缩。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;ratio = ht[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;].used / ht[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;].size
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展和收缩哈希表的⼯作可以通过执⾏&lt;strong&gt;rehash&lt;/strong&gt;（重新散列）操作来完成，&lt;strong&gt;Redis&lt;/strong&gt;对字典的哈希表执⾏&lt;strong&gt;rehash&lt;/strong&gt;的策略如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果&lt;strong&gt;ratio&lt;/strong&gt;⼩于0.1，则会对&lt;strong&gt;hash&lt;/strong&gt;表进⾏收缩操作&lt;/li&gt;
&lt;li&gt;服务器⽬前没有在执⾏&lt;strong&gt;BGSAVE&lt;/strong&gt;命令或者&lt;strong&gt;BGREWRITEAOF&lt;/strong&gt;命令，并且哈希表的负载因⼦⼤于/等于1，则扩容&lt;strong&gt;hash&lt;/strong&gt;表，扩容⼤⼩为当前&lt;strong&gt;ht[0].used*2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;服务器⽬前正在执⾏&lt;strong&gt;BGSAVE&lt;/strong&gt;命令或者&lt;strong&gt;BGREWRITEAOF&lt;/strong&gt;命令，并且哈希表的负载因⼦⼤于/等于5，则扩容&lt;strong&gt;hash&lt;/strong&gt;表，并且扩容⼤⼩为当前&lt;strong&gt;ht[0].used*2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩容的步骤如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为字典**ht[1]**哈希表分配合适的空间&lt;/li&gt;
&lt;li&gt;将&lt;strong&gt;ht[0]&lt;strong&gt;中所有的键值对&lt;/strong&gt;rehash&lt;/strong&gt;到&lt;strong&gt;ht[1]&lt;/strong&gt;（&lt;strong&gt;rehash&lt;/strong&gt;指的是重新计算键的哈希值和索引值，然后将键值对放置到**ht[1]**哈希表的指定位置上）&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;ht[0&lt;/strong&gt;包含的所有键值对都迁移到了&lt;strong&gt;ht[1]&lt;strong&gt;之后（&lt;strong&gt;ht[0]&lt;strong&gt;变为空表），释放&lt;/strong&gt;ht[0]&lt;/strong&gt;，将&lt;/strong&gt;ht[1]&lt;strong&gt;设置为&lt;/strong&gt;ht[0]&lt;/strong&gt;，并在&lt;strong&gt;ht[1]&lt;strong&gt;新创建⼀个空⽩哈希表，为下⼀次&lt;/strong&gt;rehash&lt;/strong&gt;做准备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了避免&lt;strong&gt;rehash&lt;/strong&gt;对服务器性能造成影响，服务器不是⼀次性将&lt;strong&gt;ht[0]&lt;strong&gt;⾥⾯的所有键值对全部&lt;/strong&gt;rehash&lt;/strong&gt;到&lt;strong&gt;ht[1]&lt;/strong&gt;，⽽是分多次、渐进式地将&lt;strong&gt;ht[0]&lt;strong&gt;⾥⾯的键值对慢慢地&lt;/strong&gt;rehash&lt;/strong&gt;到&lt;strong&gt;ht[1]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为**ht[1]&lt;strong&gt;分配空间，让字典同时持有&lt;/strong&gt;ht[0]&lt;strong&gt;和&lt;/strong&gt;ht[1]**两个哈希表&lt;/li&gt;
&lt;li&gt;在字典中维持⼀个索引计数器变量&lt;strong&gt;rehashidx&lt;/strong&gt;，并将它的值设置为0，表示&lt;strong&gt;rehash&lt;/strong&gt;⼯作正式开始&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;rehash&lt;/strong&gt;进⾏期间，每次对字典执⾏添加、删除、查找或者更新操作（甚至后台启动定时器）时，程序除了执⾏指定的操作以外，还会顺带将&lt;strong&gt;ht[0]&lt;strong&gt;哈希表在&lt;/strong&gt;rehashidx&lt;/strong&gt;索引上的所有键值对&lt;strong&gt;rehash&lt;/strong&gt;到&lt;strong&gt;ht[1]&lt;/strong&gt;，当&lt;strong&gt;rehash&lt;/strong&gt;⼯作完成之后，程序将&lt;strong&gt;rehashidx&lt;/strong&gt;属性的值增⼀&lt;/li&gt;
&lt;li&gt;随着字典操作的不断执⾏，最终在某个时间点上，&lt;strong&gt;ht[0]&lt;strong&gt;的所有键值对都会被&lt;/strong&gt;rehash&lt;/strong&gt;⾄&lt;strong&gt;ht[1]&lt;/strong&gt;，这时程序将 &lt;strong&gt;rehashidx&lt;/strong&gt;属性的值设为**-1**，表示rehash操作已完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;43-主从复制&#34;&gt;4.3 主从复制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;redis&lt;/strong&gt;为了实现⾼可⽤（⽐如解决单点故障的问题），会把数据复制多个副本部署到其他节点上，通过复制，实现&lt;strong&gt;Redis&lt;/strong&gt;的⾼可⽤性，实现对数据的冗余备份，保证数据和服务的可靠性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置⽂件：在从服务器的配置⽂件中加⼊：&lt;strong&gt;slaveof&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;启动命令：&lt;strong&gt;redis-server&lt;/strong&gt;启动命令后加⼊**&amp;ndash;slaveof**&lt;/li&gt;
&lt;li&gt;客户端命令：&lt;strong&gt;Redis&lt;/strong&gt;服务器启动后，直接通过客户端执⾏命令：&lt;strong&gt;slaveof&lt;/strong&gt;，则该&lt;strong&gt;Redis&lt;/strong&gt;实例成为从节点。
&lt;ul&gt;
&lt;li&gt;PS：通过&lt;strong&gt;info replication&lt;/strong&gt;命令可以看到复制的⼀些信息&lt;/li&gt;
&lt;li&gt;⽆论是通过哪⼀种⽅式来建⽴主从复制，都是从节点来执⾏&lt;strong&gt;slaveof&lt;/strong&gt;命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主从复制的作⽤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据冗余：主从复制实现了数据的热备份，是持久化之外的⼀种数据冗余⽅式。&lt;/li&gt;
&lt;li&gt;故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是⼀种服务的 冗余。&lt;/li&gt;
&lt;li&gt;负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即 写&lt;strong&gt;Redis&lt;/strong&gt;数据时应⽤连接主节点，读&lt;strong&gt;Redis&lt;/strong&gt;数据时应⽤连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以⼤⼤提⾼&lt;strong&gt;Redis&lt;/strong&gt;服务器的并发量。&lt;/li&gt;
&lt;li&gt;读写分离：可以⽤于实现读写分离，主库写、从库读，读写分离不仅可以提⾼服务器的负载能⼒，同时 可根据需求的变化，改变从库的数量。&lt;/li&gt;
&lt;li&gt;⾼可⽤基⽯：除了上述作⽤以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是&lt;strong&gt;Redis&lt;/strong&gt; ⾼可⽤的基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;的主从复制功能除了⽀持⼀个&lt;strong&gt;Master&lt;/strong&gt;节点对应多个&lt;strong&gt;Slave&lt;/strong&gt;节点的同时进⾏复制外，还⽀持&lt;strong&gt;Slave&lt;/strong&gt;节点向其它多个&lt;strong&gt;Slave&lt;/strong&gt;节点进⾏复制。这样就使得架构师能够灵活组织业务缓存数据的传播，例如使⽤多个&lt;strong&gt;Slave&lt;/strong&gt;作为数据读取服务的同时，专⻔使⽤⼀个&lt;strong&gt;Slave&lt;/strong&gt;节点为流式分析⼯具服务。&lt;strong&gt;Redis&lt;/strong&gt;的主从复制功能分为两种数据同步模式进⾏：全量数据同步和增量数据同步。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先执⾏⼀次全同步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求&lt;strong&gt;master&lt;/strong&gt; &lt;strong&gt;BgSave&lt;/strong&gt;出⾃⼰的⼀个&lt;strong&gt;RDB Snapshot&lt;/strong&gt;⽂件发给&lt;strong&gt;slave&lt;/strong&gt;，&lt;strong&gt;slave&lt;/strong&gt;接收完毕后，清除掉⾃⼰的旧数据，然后将&lt;strong&gt;RDB&lt;/strong&gt;载⼊内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当&lt;strong&gt;Slave&lt;/strong&gt;节点给定的&lt;strong&gt;replication id&lt;/strong&gt;和&lt;strong&gt;Master的replication id&lt;/strong&gt;不⼀致时，或者&lt;strong&gt;Slave&lt;/strong&gt;给定的上⼀次增量同步的&lt;strong&gt;offset&lt;/strong&gt;的位置在&lt;strong&gt;Master&lt;/strong&gt;的环形内存中（&lt;strong&gt;replication backlog&lt;/strong&gt;）⽆法定位时，&lt;strong&gt;Master&lt;/strong&gt;就会对&lt;strong&gt;Slave&lt;/strong&gt;发起全量同步操作。这时⽆论是否在&lt;strong&gt;Master&lt;/strong&gt;打开了&lt;strong&gt;RDB&lt;/strong&gt;快照功能，它和&lt;strong&gt;Slave&lt;/strong&gt;节点的每⼀次全量同步操作过程都会更新/创建&lt;strong&gt;Master&lt;/strong&gt;上的&lt;strong&gt;RDB&lt;/strong&gt;⽂件。在&lt;strong&gt;Slave&lt;/strong&gt;连接到&lt;strong&gt;Master&lt;/strong&gt;，并完成第⼀次全量数据同步后，接下来&lt;strong&gt;Master&lt;/strong&gt;到&lt;strong&gt;Slave&lt;/strong&gt;的数据同步过程⼀般就是增量同步形式了（也称为部分同步）。增量同步过程不再主要依赖&lt;strong&gt;RDB&lt;/strong&gt;⽂件，&lt;strong&gt;Master&lt;/strong&gt;会将新产⽣的数据变化操作存放在&lt;strong&gt;replication backlog&lt;/strong&gt;这个内存缓存区，这个内存区域是⼀个环形缓冲区，也就是说是⼀个&lt;strong&gt;FIFO&lt;/strong&gt;的队列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/redis%E5%AE%8C%E5%85%A8%E5%90%8C%E6%AD%A5.png?raw=true&#34; alt=&#34;redis完全同步&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之后执行增量同步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;master&lt;/strong&gt;作为⼀个普通的&lt;strong&gt;client&lt;/strong&gt;连⼊&lt;strong&gt;slave&lt;/strong&gt;，将所有写操作转发给&lt;strong&gt;slave&lt;/strong&gt;，没有特殊的同步协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/redis%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5.png?raw=true&#34; alt=&#34;redis增量同步&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gongluck.github.io/linux/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/ - </description>
        </item>
    
    
    
        <item>
        <title>分布式存储专题</title>
        <link>https://gongluck.github.io/linux/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E4%B8%93%E9%A2%98/</link>
        <pubDate>Mon, 28 Dec 2020 22:18:35 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E4%B8%93%E9%A2%98/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E4%B8%93%E9%A2%98/ -&lt;h2 id=&#34;八分布式存储专题&#34;&gt;八、分布式存储专题&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1fastdfs&#34;&gt;1.FastDFS&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/FastDFS%E6%9E%B6%E6%9E%84.png?raw=true&#34; alt=&#34;FastDFS架构&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;11-编译安装&#34;&gt;1.1 编译安装&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 下载&lt;/span&gt;
wget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz
&lt;span style=&#34;color:#228b22&#34;&gt;# 解压&lt;/span&gt;
sudo tar -xzvf V1.0.43.tar.gz libfastcommon-1.0.43
&lt;span style=&#34;color:#228b22&#34;&gt;# 进入解压后的目录&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; libfastcommon-1.0.43
&lt;span style=&#34;color:#228b22&#34;&gt;# 编译代码&lt;/span&gt;
sudo ./make.sh
&lt;span style=&#34;color:#228b22&#34;&gt;# 安装&lt;/span&gt;
sudo ./make.sh install
&lt;span style=&#34;color:#228b22&#34;&gt;#export LD_LIBRARY_PATH=/usr/lib64/:$LD_LIBRARY_PATH&lt;/span&gt;
sudo ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so

&lt;span style=&#34;color:#228b22&#34;&gt;# 下载&lt;/span&gt;
wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz
&lt;span style=&#34;color:#228b22&#34;&gt;# 解压&lt;/span&gt;
sudo tar -zxvf V6.06.tar.gz fastdfs-6.06
&lt;span style=&#34;color:#228b22&#34;&gt;# 进入解压后的目录&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; fastdfs-6.06
&lt;span style=&#34;color:#228b22&#34;&gt;# 编译代码&lt;/span&gt;
sudo ./make.sh
&lt;span style=&#34;color:#228b22&#34;&gt;# 安装&lt;/span&gt;
sudo ./make.sh install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;12-trackerconfhttpsgithubcomgongluckcvipblobmastercodefastfdstrackerconf&#34;&gt;1.2 &lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/fastfds/tracker.conf&#34;&gt;tracker.conf&lt;/a&gt;&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# is this config file disabled&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# false for enabled&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# true for disabled&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;disabled&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# bind an address of this host&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# empty for bind all addresses of this host&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;bind_addr&lt;/span&gt; = 172.28.123.249  &lt;span style=&#34;color:#228b22&#34;&gt;#tracker 所在服务器的 ip&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the tracker server port&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;port&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;22122&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;#服务器端口&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# connect timeout in seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 30&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Note: in the intranet network (LAN), 2 seconds is enough.&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;connect_timeout&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# network timeout in seconds for send and recv&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 30&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;network_timeout&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;60&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the base path to store data and log files&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;base_path&lt;/span&gt; = /mnt/e/ubuntu/tracker    &lt;span style=&#34;color:#228b22&#34;&gt;#表示tracker日志存放的路径，此路径必须已经存在&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# max concurrent connections this server support&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# you should set this parameter larger, eg. 10240&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 256&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;max_connections&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1024&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# accept thread count&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 1 which is recommended&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.07&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;accept_threads&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# work thread count&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# work threads to deal network io&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 4&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V2.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;work_threads&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the min network buff size&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value 8KB&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;min_buff_size&lt;/span&gt; = 8KB

&lt;span style=&#34;color:#228b22&#34;&gt;# the max network buff size&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value 128KB&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;max_buff_size&lt;/span&gt; = 128KB

&lt;span style=&#34;color:#228b22&#34;&gt;# the method for selecting group to upload files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0: round robin&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 1: specify group&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 2: load balance, select the max free space group to upload file&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;store_lookup&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# which group to upload file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# when store_lookup set to 1, must set store_group to the group name&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;store_group&lt;/span&gt; = group2

&lt;span style=&#34;color:#228b22&#34;&gt;# which storage server to upload file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0: round robin (default)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 1: the first server order by ip address&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 2: the first server order by priority (the minimal)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Note: if use_trunk_file set to true, must set store_server to 1 or 2&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;store_server&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# which path (means disk or mount point) of the storage server to upload file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0: round robin&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 2: load balance, select the max free space path to upload file&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;store_path&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# which storage server to download file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0: round robin (default)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 1: the source storage server which the current file uploaded to&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;download_server&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# reserved storage space for system or other applications.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# if the free(available) space of any stoarge server in &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# a group &amp;lt;= reserved_storage_space, no file can be uploaded to this group.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# bytes unit can be one of follows:&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### G or g for gigabyte(GB)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### M or m for megabyte(MB)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### K or k for kilobyte(KB)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### no unit for byte(B)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### XX.XX% as ratio such as: reserved_storage_space = 10%&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;reserved_storage_space&lt;/span&gt; = 20%

&lt;span style=&#34;color:#228b22&#34;&gt;#standard log level as syslog, case insensitive, value list:&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### emerg for emergency&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### alert&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### crit for critical&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### error&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### warn for warning&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### notice&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### info&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### debug&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;log_level&lt;/span&gt; = info

&lt;span style=&#34;color:#228b22&#34;&gt;#unix group name to run this program, &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#not set (empty) means run by the group of current user&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;run_by_group&lt;/span&gt;=

&lt;span style=&#34;color:#228b22&#34;&gt;#unix username to run this program,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#not set (empty) means run by current user&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;run_by_user&lt;/span&gt; =

&lt;span style=&#34;color:#228b22&#34;&gt;# allow_hosts can ocur more than once, host can be hostname or ip address,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# &amp;#34;*&amp;#34; (only one asterisk) means match all ip addresses&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# we can use CIDR ips like 192.168.5.64/26&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# and also use range like these: 10.0.1.[0-254] and host[01-08,20-25].domain.com&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# for example:&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# allow_hosts=10.0.1.[1-15,20]&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# allow_hosts=host[01-08,20-25].domain.com&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# allow_hosts=192.168.5.64/26&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;allow_hosts&lt;/span&gt; = *

&lt;span style=&#34;color:#228b22&#34;&gt;# sync log buff to disk every interval seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 10 seconds&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;sync_log_buff_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# check storage server alive interval seconds&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;check_active_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;120&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# thread stack size, should &amp;gt;= 64KB&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 256KB&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;thread_stack_size&lt;/span&gt; = 256KB

&lt;span style=&#34;color:#228b22&#34;&gt;# auto adjust when the ip address of the storage server changed&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is true&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;storage_ip_changed_auto_adjust&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# storage sync file max delay seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 86400 seconds (one day)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V2.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;storage_sync_file_max_delay&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;86400&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the max time of storage sync a file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 300 seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V2.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;storage_sync_file_max_time&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;300&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if use a trunk file to store several small files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V3.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;use_trunk_file&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt; 

&lt;span style=&#34;color:#228b22&#34;&gt;# the min slot size, should &amp;lt;= 4KB&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 256 bytes&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V3.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;slot_min_size&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;256&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the max slot size, should &amp;gt; slot_min_size&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# store the upload file to trunk file when it&amp;#39;s size &amp;lt;=  this value&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 16MB&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V3.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;slot_max_size&lt;/span&gt; = 1MB

&lt;span style=&#34;color:#228b22&#34;&gt;# the alignment size to allocate the trunk space&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0 (never align)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.05&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# NOTE: the larger the alignment size, the less likely of disk&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#       fragmentation, but the more space is wasted.&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_alloc_alignment_size&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;256&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if merge contiguous free spaces of trunk file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_free_space_merge&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if delete / reclaim the unused trunk files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;delete_unused_trunk_files&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the trunk file size, should &amp;gt;= 4MB&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 64MB&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V3.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_file_size&lt;/span&gt; = 64MB

&lt;span style=&#34;color:#228b22&#34;&gt;# if create trunk file advancely&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V3.06&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_create_file_advance&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the time base to create trunk file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# the time format: HH:MM&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 02:00&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V3.06&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_create_file_time_base&lt;/span&gt; = 02:00

&lt;span style=&#34;color:#228b22&#34;&gt;# the interval of create trunk file, unit: second&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 38400 (one day)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V3.06&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_create_file_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;86400&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the threshold to create trunk file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# when the free trunk file size less than the threshold,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# will create he trunk files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V3.06&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_create_file_space_threshold&lt;/span&gt; = 20G

&lt;span style=&#34;color:#228b22&#34;&gt;# if check trunk space occupying when loading trunk free spaces&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# the occupied spaces will be ignored&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V3.09&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# NOTICE: set this parameter to true will slow the loading of trunk spaces &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# when startup. you should set this parameter to true when neccessary.&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_init_check_occupying&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if ignore storage_trunk.dat, reload from trunk binlog&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V3.10&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# set to true once for version upgrade when your version less than V3.10&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_init_reload_from_binlog&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the min interval for compressing the trunk binlog file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# unit: second, 0 means never compress&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# FastDFS compress the trunk binlog when trunk init and trunk destroy&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# recommand to set this parameter to 86400 (one day)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V5.01&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_compress_binlog_min_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;86400&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the interval for compressing the trunk binlog file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# unit: second, 0 means never compress&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# recommand to set this parameter to 86400 (one day)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_compress_binlog_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;86400&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# compress the trunk binlog time base, time format: Hour:Minute&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Hour from 0 to 23, Minute from 0 to 59&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 03:00&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_compress_binlog_time_base&lt;/span&gt; = 03:00

&lt;span style=&#34;color:#228b22&#34;&gt;# max backups for the trunk binlog file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0 (never backup)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;trunk_binlog_max_backups&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if use storage server ID instead of IP address&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# if you want to use dual IPs for storage server, you MUST set&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# this parameter to true, and configure the dual IPs in the file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# configured by following item &amp;#34;storage_ids_filename&amp;#34;, such as storage_ids.conf&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;use_storage_id&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# specify storage ids filename, can use relative or absolute path&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# this parameter is valid only when use_storage_id set to true&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;storage_ids_filename&lt;/span&gt; = storage_ids.conf

&lt;span style=&#34;color:#228b22&#34;&gt;# id type of the storage server in the filename, values are:&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;## ip: the ip address of the storage server&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;## id: the server id of the storage server&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# this paramter is valid only when use_storage_id set to true&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is ip&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.03&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;id_type_in_filename&lt;/span&gt; = id

&lt;span style=&#34;color:#228b22&#34;&gt;# if store slave file use symbol link&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.01&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;store_slave_file_use_link&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if rotate the error log every day&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.02&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;rotate_error_log&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# rotate error log time base, time format: Hour:Minute&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Hour from 0 to 23, Minute from 0 to 59&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 00:00&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.02&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;error_log_rotate_time&lt;/span&gt; = 00:00

&lt;span style=&#34;color:#228b22&#34;&gt;# if compress the old error log by gzip&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.04&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;compress_old_error_log&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# compress the error log days before&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 1&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.04&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;compress_error_log_days_before&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# rotate error log when the log file exceeds this size&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0 means never rotates log file by log file size&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.02&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;rotate_error_log_size&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# keep days of the log files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0 means do not delete old log files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;log_file_keep_days&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if use connection pool&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;use_connection_pool&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# connections whose the idle time exceeds this time will be closed&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# unit: second&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 3600&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;connection_pool_max_idle_time&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;3600&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# HTTP port on this tracker server&lt;/span&gt;
http.server_port = &lt;span style=&#34;color:#b452cd&#34;&gt;8080&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# check storage HTTP server alive interval seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# &amp;lt;= 0 for never check&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 30&lt;/span&gt;
http.check_alive_interval = &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# check storage HTTP server alive type, values are:&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   tcp : connect to the storge server with HTTP port only, &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#        do not request and get response&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   http: storage check alive url must return http status 200&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is tcp&lt;/span&gt;
http.check_alive_type = tcp

&lt;span style=&#34;color:#228b22&#34;&gt;# check storage HTTP server alive uri/url&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# NOTE: storage embed HTTP server support uri: /status.html&lt;/span&gt;
http.check_alive_uri = /status.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h4 id=&#34;13-storageconfhttpsgithubcomgongluckcvipblobmastercodefastfdsstorageconf&#34;&gt;1.3 &lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/fastfds/storage.conf&#34;&gt;storage.conf&lt;/a&gt;&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# is this config file disabled&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# false for enabled&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# true for disabled&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;disabled&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the name of the group this storage server belongs to&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# comment or remove this item for fetching from tracker server,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# in this case, use_storage_id must set to true in tracker.conf,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# and storage_ids.conf must be configured correctly.&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;group_name&lt;/span&gt; = group1 &lt;span style=&#34;color:#228b22&#34;&gt;#组，默认设置即可&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# bind an address of this host&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# empty for bind all addresses of this host&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;bind_addr&lt;/span&gt; = 172.28.123.249  &lt;span style=&#34;color:#228b22&#34;&gt;#storage 所在服务器 ip&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if bind an address of this host when connect to other servers &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# (this storage server as a client)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# true for binding the address configured by the above parameter: &amp;#34;bind_addr&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# false for binding any address of this host&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;client_bind&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the storage server port&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;port&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;23000&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;#服务器端口，默认设置即可&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# connect timeout in seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 30&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Note: in the intranet network (LAN), 2 seconds is enough.&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;connect_timeout&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# network timeout in seconds for send and recv&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 30&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;network_timeout&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;60&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the heart beat interval in seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# the storage server send heartbeat to tracker server periodically&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 30&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;heart_beat_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# disk usage report interval in seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# the storage server send disk usage report to tracker server periodically&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 300&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;stat_report_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;60&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the base path to store data and log files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# NOTE: the binlog files maybe are large, make sure&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#       the base path has enough disk space,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#       eg. the disk free space should &amp;gt; 50GB&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;base_path&lt;/span&gt; = /mnt/e/ubuntu/storage    &lt;span style=&#34;color:#228b22&#34;&gt;#用于storage存放日志，此目录必须存在&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# max concurrent connections the server supported,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# you should set this parameter larger, eg. 10240&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 256&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;max_connections&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1024&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the buff size to recv / send data from/to network&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# this parameter must more than 8KB&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 256KB or 512KB is recommended&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 64KB&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V2.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;buff_size&lt;/span&gt; = 256KB

&lt;span style=&#34;color:#228b22&#34;&gt;# accept thread count&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 1 which is recommended&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.07&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;accept_threads&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# work thread count&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# work threads to deal network io&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 4&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V2.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;work_threads&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if disk read / write separated&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;##  false for mixed read and write&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;##  true for separated read and write&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is true&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V2.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;disk_rw_separated&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# disk reader thread count per store path&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# for mixed read / write, this parameter can be 0&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 1&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V2.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;disk_reader_threads&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# disk writer thread count per store path&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# for mixed read / write, this parameter can be 0&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 1&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V2.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;disk_writer_threads&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# when no entry to sync, try read binlog again after X milliseconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# must &amp;gt; 0, default value is 200ms&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;sync_wait_msec&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# after sync a file, usleep milliseconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0 for sync successively (never call usleep)&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;sync_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# storage sync start time of a day, time format: Hour:Minute&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Hour from 0 to 23, Minute from 0 to 59&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;sync_start_time&lt;/span&gt; = 00:00

&lt;span style=&#34;color:#228b22&#34;&gt;# storage sync end time of a day, time format: Hour:Minute&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Hour from 0 to 23, Minute from 0 to 59&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;sync_end_time&lt;/span&gt; = 23:59

&lt;span style=&#34;color:#228b22&#34;&gt;# write to the mark file after sync N files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 500&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;write_mark_file_freq&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;500&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# disk recovery thread count&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 1&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.04&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;disk_recovery_threads&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# store path (disk or mount point) count, default value is 1&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;store_path_count&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# store_path#, based on 0, to configure the store paths to store files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# if store_path0 not exists, it&amp;#39;s value is base_path (NOT recommended)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# the paths must be exist.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# IMPORTANT NOTE:&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#       the store paths&amp;#39; order is very important, don&amp;#39;t mess up!!!&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#       the base_path should be independent (different) of the store paths&lt;/span&gt;

&lt;span style=&#34;color:#00688b&#34;&gt;store_path0&lt;/span&gt; = /mnt/e/ubuntu/storage/fastdfs0  &lt;span style=&#34;color:#228b22&#34;&gt;#真正存储数据的路径，此路径必须存在&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#store_path1 = /home/yuqing/fastdfs2&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# subdir_count  * subdir_count directories will be auto created under each &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# store_path (disk), value can be 1 to 256, default value is 256&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;subdir_count_per_path&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;256&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# tracker_server can ocur more than once for multi tracker servers.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# the value format of tracker_server is &amp;#34;HOST:PORT&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   the HOST can be hostname or ip address,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   and the HOST can be dual IPs or hostnames seperated by comma,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   the dual IPS must be an inner (intranet) IP and an outer (extranet) IP,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   or two different types of inner (intranet) IPs.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   for example: 192.168.2.100,122.244.141.46:22122&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   another eg.: 192.168.1.10,172.17.4.21:22122&lt;/span&gt;

&lt;span style=&#34;color:#00688b&#34;&gt;tracker_server&lt;/span&gt; = 172.28.123.249:22122  &lt;span style=&#34;color:#228b22&#34;&gt;#指定 tracker 服务器地址和端口。不能是 127.0.0.1&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#tracker_server = 192.168.209.122:22122&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;#standard log level as syslog, case insensitive, value list:&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### emerg for emergency&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### alert&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### crit for critical&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### error&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### warn for warning&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### notice&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### info&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### debug&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;log_level&lt;/span&gt; = info

&lt;span style=&#34;color:#228b22&#34;&gt;#unix group name to run this program, &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#not set (empty) means run by the group of current user&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;run_by_group&lt;/span&gt; =

&lt;span style=&#34;color:#228b22&#34;&gt;#unix username to run this program,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#not set (empty) means run by current user&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;run_by_user&lt;/span&gt; =

&lt;span style=&#34;color:#228b22&#34;&gt;# allow_hosts can ocur more than once, host can be hostname or ip address,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# &amp;#34;*&amp;#34; (only one asterisk) means match all ip addresses&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# we can use CIDR ips like 192.168.5.64/26&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# and also use range like these: 10.0.1.[0-254] and host[01-08,20-25].domain.com&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# for example:&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# allow_hosts=10.0.1.[1-15,20]&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# allow_hosts=host[01-08,20-25].domain.com&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# allow_hosts=192.168.5.64/26&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;allow_hosts&lt;/span&gt; = *

&lt;span style=&#34;color:#228b22&#34;&gt;# the mode of the files distributed to the data path&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0: round robin(default)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 1: random, distributted by hash code&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;file_distribute_path_mode&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# valid when file_distribute_to_path is set to 0 (round robin).&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# when the written file count reaches this number, then rotate to next path.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# rotate to the first path (00/00) after the last path (such as FF/FF).&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 100&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;file_distribute_rotate_count&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# call fsync to disk when write big file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0: never call fsync&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# other: call fsync when written bytes &amp;gt;= this bytes&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0 (never call fsync)&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;fsync_after_written_bytes&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# sync log buff to disk every interval seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# must &amp;gt; 0, default value is 10 seconds&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;sync_log_buff_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# sync binlog buff / cache to disk every interval seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 60 seconds&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;sync_binlog_buff_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# sync storage stat info to disk every interval seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 300 seconds&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;sync_stat_file_interval&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;300&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# thread stack size, should &amp;gt;= 512KB&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 512KB&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;thread_stack_size&lt;/span&gt; = 512KB

&lt;span style=&#34;color:#228b22&#34;&gt;# the priority as a source server for uploading file.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# the lower this value, the higher its uploading priority.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 10&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;upload_priority&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the NIC alias prefix, such as eth in Linux, you can see it by ifconfig -a&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# multi aliases split by comma. empty value means auto set by OS type&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default values is empty&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;if_alias_prefix&lt;/span&gt; =

&lt;span style=&#34;color:#228b22&#34;&gt;# if check file duplicate, when set to true, use FastDHT to store file indexes&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 1 or yes: need check&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0 or no: do not check&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;check_file_duplicate&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# file signature method for check file duplicate&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;## hash: four 32 bits hash code&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;## md5: MD5 signature&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is hash&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.01&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;file_signature_method&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;hash&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# namespace for storing file indexes (key-value pairs)&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# this item must be set when check_file_duplicate is true / on&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;key_namespace&lt;/span&gt; = FastDFS

&lt;span style=&#34;color:#228b22&#34;&gt;# set keep_alive to 1 to enable persistent connection with FastDHT servers&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0 (short connection)&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;keep_alive&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# you can use &amp;#34;#include filename&amp;#34; (not include double quotes) directive to &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# load FastDHT server list, when the filename is a relative path such as &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# pure filename, the base path is the base path of current/this config file.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# must set FastDHT server list when check_file_duplicate is true / on&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# please see INSTALL of FastDHT for detail&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;##include /home/yuqing/fastdht/conf/fdht_servers.conf&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if log to access log&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;use_access_log&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if rotate the access log every day&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;rotate_access_log&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# rotate access log time base, time format: Hour:Minute&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Hour from 0 to 23, Minute from 0 to 59&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 00:00&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.00&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;access_log_rotate_time&lt;/span&gt; = 00:00

&lt;span style=&#34;color:#228b22&#34;&gt;# if compress the old access log by gzip&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.04&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;compress_old_access_log&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# compress the access log days before&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 1&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.04&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;compress_access_log_days_before&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if rotate the error log every day&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.02&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;rotate_error_log&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# rotate error log time base, time format: Hour:Minute&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Hour from 0 to 23, Minute from 0 to 59&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 00:00&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.02&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;error_log_rotate_time&lt;/span&gt; = 00:00

&lt;span style=&#34;color:#228b22&#34;&gt;# if compress the old error log by gzip&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.04&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;compress_old_error_log&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# compress the error log days before&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 1&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.04&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;compress_error_log_days_before&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# rotate access log when the log file exceeds this size&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0 means never rotates log file by log file size&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.02&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;rotate_access_log_size&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# rotate error log when the log file exceeds this size&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0 means never rotates log file by log file size&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.02&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;rotate_error_log_size&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# keep days of the log files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 0 means do not delete old log files&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 0&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;log_file_keep_days&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if skip the invalid record when sync file&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.02&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;file_sync_skip_invalid_record&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if use connection pool&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;use_connection_pool&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# connections whose the idle time exceeds this time will be closed&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# unit: second&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 3600&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;connection_pool_max_idle_time&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;3600&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if compress the binlog files by gzip&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.01&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;compress_binlog&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# try to compress binlog time, time format: Hour:Minute&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Hour from 0 to 23, Minute from 0 to 59&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 01:30&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.01&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;compress_binlog_time&lt;/span&gt; = 01:30

&lt;span style=&#34;color:#228b22&#34;&gt;# if check the mark of store path to prevent confusion&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# recommend to set this parameter to true&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# if two storage servers (instances) MUST use a same store path for&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# some specific purposes, you should set this parameter to false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is true&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V6.03&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;check_store_path_mark&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# use the ip address of this storage server if domain_name is empty,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# else this domain name will ocur in the url redirected by the tracker server&lt;/span&gt;
http.domain_name =

&lt;span style=&#34;color:#228b22&#34;&gt;# the port of the web server on this storage server&lt;/span&gt;
http.server_port = &lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h4 id=&#34;14-clientconfhttpsgithubcomgongluckcvipblobmastercodefastfdsclientconf&#34;&gt;1.4 &lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/fastfds/client.conf&#34;&gt;client.conf&lt;/a&gt;&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# connect timeout in seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 30s&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Note: in the intranet network (LAN), 2 seconds is enough.&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;connect_timeout&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# network timeout in seconds&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 30s&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;network_timeout&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;60&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# the base path to store log files&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;base_path&lt;/span&gt; = /mnt/e/ubuntu/client

&lt;span style=&#34;color:#228b22&#34;&gt;# tracker_server can ocur more than once for multi tracker servers.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# the value format of tracker_server is &amp;#34;HOST:PORT&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   the HOST can be hostname or ip address,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   and the HOST can be dual IPs or hostnames seperated by comma,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   the dual IPS must be an inner (intranet) IP and an outer (extranet) IP,&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   or two different types of inner (intranet) IPs.&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   for example: 192.168.2.100,122.244.141.46:22122&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#   another eg.: 192.168.1.10,172.17.4.21:22122&lt;/span&gt;

&lt;span style=&#34;color:#00688b&#34;&gt;tracker_server&lt;/span&gt; = 172.28.123.249:22122
&lt;span style=&#34;color:#228b22&#34;&gt;#tracker_server = 192.168.0.197:22122&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;#standard log level as syslog, case insensitive, value list:&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### emerg for emergency&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### alert&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### crit for critical&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### error&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### warn for warning&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### notice&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### info&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;### debug&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;log_level&lt;/span&gt; = info

&lt;span style=&#34;color:#228b22&#34;&gt;# if use connection pool&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;use_connection_pool&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# connections whose the idle time exceeds this time will be closed&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# unit: second&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is 3600&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;connection_pool_max_idle_time&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;3600&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if load FastDFS parameters from tracker server&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.05&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;load_fdfs_parameters_from_tracker&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# if use storage ID instead of IP address&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# same as tracker.conf&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# valid only when load_fdfs_parameters_from_tracker is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# default value is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;use_storage_id&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# specify storage ids filename, can use relative or absolute path&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# same as tracker.conf&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# valid only when load_fdfs_parameters_from_tracker is false&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# since V4.05&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;storage_ids_filename&lt;/span&gt; = storage_ids.conf


&lt;span style=&#34;color:#228b22&#34;&gt;#HTTP settings&lt;/span&gt;
http.tracker_server_port = &lt;span style=&#34;color:#b452cd&#34;&gt;80&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;#use &amp;#34;#include&amp;#34; directive to include HTTP other settiongs&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;##include http.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo fdfs_trackerd /mnt/e/Code/CVIP/code/fastfds/tracker.conf
sudo fdfs_storaged /mnt/e/Code/CVIP/code/fastfds/storage.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 查看服务&lt;/span&gt;
fdfs_monitor /mnt/e/Code/CVIP/code/fastfds/client.conf
&lt;span style=&#34;color:#228b22&#34;&gt;# 上传&lt;/span&gt;
fdfs_upload_file /mnt/e/Code/CVIP/code/fastfds/client.conf ./README.md
&lt;span style=&#34;color:#228b22&#34;&gt;# 下载&lt;/span&gt;
fdfs_download_file /mnt/e/Code/CVIP/code/fastfds/client.conf group1/M00/00/00/rBx7-V_MGuWAF1sJAANQ-lXzICY3210.md
&lt;span style=&#34;color:#228b22&#34;&gt;# 删除&lt;/span&gt;
fdfs_delete_file /mnt/e/Code/CVIP/code/fastfds/client.conf group1/M00/00/00/rBx7-V_MGuWAF1sJAANQ-lXzICY3210.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2fastcgi&#34;&gt;2.FastCGI&lt;/h3&gt;
&lt;h4 id=&#34;21-cgi工作方式&#34;&gt;2.1 CGI工作方式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;传统&lt;strong&gt;CGI&lt;/strong&gt;（Common Gateway Interface）方式是客户端有多少个请求，就开辟多少个子进程，每个子进程都需要启动自己的解释器、加载配置，连接其他服务器等初始化工作，这是&lt;strong&gt;CGI&lt;/strong&gt;进程性能低下的主要原因。当用户请求非常多的时候，会占用大量的内存、cpu等资源，造成性能低下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/cgi%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F.png?raw=true&#34; alt=&#34;cgi工作方式&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与为每个请求创建一个新的进程不同，&lt;strong&gt;FastCGI&lt;/strong&gt;使用持续的进程来处理一连串的请求。这些进程由 &lt;strong&gt;FastCGI&lt;/strong&gt;进程管理器管理，而不是&lt;strong&gt;web&lt;/strong&gt;服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/fastcgi%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F.png?raw=true&#34; alt=&#34;fastcgi工作方式&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于&lt;strong&gt;FastCGI&lt;/strong&gt;程序并不需要不断的产生新进程，可以大大降低服务器的压力并且产生较高的应用效率。它的速度效率最少要比&lt;strong&gt;CGI&lt;/strong&gt;技术提高5倍以上。它还支持分布式的部署，即&lt;strong&gt;FastCGI&lt;/strong&gt;程序可以在&lt;strong&gt;web&lt;/strong&gt;服务器以外的主机上执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-spawn-fcgi&#34;&gt;2.2 spawn-fcgi&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;spawn-fcgi&lt;/strong&gt;是一个通用的&lt;strong&gt;FastCGI&lt;/strong&gt;进程管理器，简单小巧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;spawn-fcgi&lt;/strong&gt;使用&lt;strong&gt;pre-fork&lt;/strong&gt;模型，功能主要是打开监听端口，绑定地址，然后&lt;strong&gt;fork-and-exec&lt;/strong&gt;创建我们编写的&lt;strong&gt;FastCGI&lt;/strong&gt;应用程序进程，退出完成工作。&lt;strong&gt;FastCGI&lt;/strong&gt;应用程序初始化，然后进入死循环侦听&lt;strong&gt;socket&lt;/strong&gt;的连接请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译安装&lt;strong&gt;spawn-fcgi&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget http://download.lighttpd.net/spawn-fcgi/releases-1.6.x/spawn-fcgi-1.6.4.tar.gz
tar -zxvf spawn-fcgi-1.6.4.tar.gz
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; spawn-fcgi-1.6.4/
./configure
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
sudo make install
&lt;span style=&#34;color:#228b22&#34;&gt;#sudo ln -s /usr/local/lib/libfcgi.so.0 /usr/lib/libfcgi.so.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;23-fcgi&#34;&gt;2.3 fcgi&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;strong&gt;C/C++&lt;strong&gt;编写&lt;/strong&gt;FastCGI&lt;/strong&gt;应用程序，可以使用&lt;strong&gt;FastCGI&lt;/strong&gt;软件开发套件或者其它开发框架，如&lt;strong&gt;fcgi&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译安装&lt;strong&gt;fcgi&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget https://fossies.org/linux/www/old/fcgi-2.4.0.tar.gz
tar -zxvf fcgi-2.4.0.tar.gz
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; fcgi-2.4.0/
./configure
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/fcgi/test.c&#34;&gt;fcgil例子&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Author: gongluck 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Date: 2020-12-06 09:31:16 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified by: gongluck
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified time: 2020-12-06 10:36:28
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// gcc test.c -lfcgi
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// spawn-fcgi -a 127.0.0.1 -p 8001 -f ./a.out
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* nginx conf add
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;location /test {
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;          fastcgi_pass 127.0.0.1:8001;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;          fastcgi_index test;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;          include /usr/local/nginx/conf/fastcgi.conf;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;      }	
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;fcgi_stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *argv[])
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; count = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#228b22&#34;&gt;//阻塞等待并监听某个端口，等待Nginx将数据发过来
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (FCGI_Accept() &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#228b22&#34;&gt;//如果想得到数据，需要从stdin去读，实际上从Nginx上去读
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//如果想上传数据，需要往stdout写，实际上是给Nginx写数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Content-type: text/html&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;lt;title&amp;gt;Fast CGI Hello!&amp;lt;/title&amp;gt;&amp;#34;&lt;/span&gt;);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;Fast CGI Hello!&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;//SERVER_NAME：得到server的host名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Request number %d running on host &amp;lt;i&amp;gt;%s&amp;lt;/i&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,
               ++count, getenv(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;SERVER_NAME&amp;#34;&lt;/span&gt;));
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gongluck.github.io/linux/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E4%B8%93%E9%A2%98/ - </description>
        </item>
    
    
    
        <item>
        <title>代码工程化专题</title>
        <link>https://gongluck.github.io/linux/%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B8%93%E9%A2%98/</link>
        <pubDate>Mon, 28 Dec 2020 22:17:27 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B8%93%E9%A2%98/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B8%93%E9%A2%98/ -&lt;h2 id=&#34;七代码工程化专题&#34;&gt;七、代码工程化专题&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1代码版本工具&#34;&gt;1.代码版本工具&lt;/h3&gt;
&lt;h4 id=&#34;11-git&#34;&gt;1.1 git&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/git%E5%8E%9F%E7%90%86.png?raw=true&#34; alt=&#34;git原理&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/git%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81.png?raw=true&#34; alt=&#34;git文件状态&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常用命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 查看分支&lt;/span&gt;
git branch
&lt;span style=&#34;color:#228b22&#34;&gt;# 创建develop分支&lt;/span&gt;
git branch develop
&lt;span style=&#34;color:#228b22&#34;&gt;# 创建FT-123456的一个feature分支&lt;/span&gt;
git checkout –b feature/FT-123456
&lt;span style=&#34;color:#228b22&#34;&gt;# 切换分支&lt;/span&gt;
git checkout develop
&lt;span style=&#34;color:#228b22&#34;&gt;# 合并分支&lt;/span&gt;
git merge feature/FT-123456
&lt;span style=&#34;color:#228b22&#34;&gt;# 删除FT-123456的feature分支&lt;/span&gt;
git branch –d feature/FT-123456
&lt;span style=&#34;color:#228b22&#34;&gt;# 推送分支&lt;/span&gt;
git push –u origin hotfix/ISSUE-345678
&lt;span style=&#34;color:#228b22&#34;&gt;# 整理commit&lt;/span&gt;
git rebase -i
&lt;span style=&#34;color:#228b22&#34;&gt;# 子模块&lt;/span&gt;
git submodule add giturl loaclpath
git submodule update --init --recurise
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2工程管理&#34;&gt;2.工程管理&lt;/h3&gt;
&lt;h4 id=&#34;21-cmakehttpsgithubcomgongluckcvipblobmastercodecmake&#34;&gt;2.1 &lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/cmake&#34;&gt;CMake&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CMAKE-DEMO.git&#34;&gt;https://github.com/gongluck/CMAKE-DEMO.git&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# CMake最低版本要求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;cmake_minimum_required&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;3.0&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 添加版本号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;VERSION_MAJOR&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;VERSION_MINOR&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 获取当前文件夹名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;STRING&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;REGEX&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;REPLACE&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.*/(.*)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\\1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;CURRENT_FOLDER&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 项目名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;project&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;CURRENT_FOLDER&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 添加函数检查功能
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CheckFunctionExists&lt;/span&gt;)   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;check_function_exists&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;HAVEPRINTF&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;HAVEPRINTF&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;# 添加宏定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#658b00&#34;&gt;add_definitions&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;-DHAVEPRINTF&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;endif&lt;/span&gt;()&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 自动添加当前源码目录和生成目录到包含目录
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CMAKE_INCLUDE_CURRENT_DIR&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;ON&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 设置可执行文件的输出目录(经测试,linux环境有效)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;EXECUTABLE_OUTPUT_PATH&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/bin&lt;/span&gt;)       &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 设置库文件的输出目录(经测试,linux环境有效)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;LIBRARY_OUTPUT_PATH&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/bin&lt;/span&gt;)           &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 分别设置了Debug版本和Release版本可执行文件的输出目录(经测试,windows环境有效)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/bin&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/bin&lt;/span&gt;) &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 分别设置了Debug版本和Release版本库文件的输出目录(经测试,windows环境有效)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/lib&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/lib&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 加入一个配置头文件用于处理CMake对源码的设置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;configure_file&lt;/span&gt;(
  ${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/config.h.in&lt;/span&gt;
  ${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/config.h&lt;/span&gt;
  )&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 自定义编译选项
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;option&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;USESUBMODULE&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;use submodule&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;ON&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#cd5555&#34;&gt;USESUBMODULE&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;# 设置变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;SUBMODULE&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;myfun&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;# 添加包含路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;include_directories&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;SUBMODULE&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;# 添加子目录
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;# 必须放在aux_source_directory前,否则同名变量SRCS会冲突
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;add_subdirectory&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;SUBMODULE&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;# 设置附加库变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;EXTRA_LIBS&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;EXTRA_LIBS&lt;/span&gt;} ${&lt;span style=&#34;color:#00688b&#34;&gt;SUBMODULE&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;endif&lt;/span&gt; (&lt;span style=&#34;color:#cd5555&#34;&gt;USESUBMODULE&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 查找当前目录下所有源文件并保存到变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;aux_source_directory&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;SRCS&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 指定生成目标
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_executable&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} ${&lt;span style=&#34;color:#00688b&#34;&gt;SRCS&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 添加链接库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;target_link_libraries&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} ${&lt;span style=&#34;color:#00688b&#34;&gt;EXTRA_LIBS&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 指定安装路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;install&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;TARGETS&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} &lt;span style=&#34;color:#cd5555&#34;&gt;DESTINATION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;bin&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;install&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;FILES&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;${PROJECT_BINARY_DIR}/config.h&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;DESTINATION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;include&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 定义一个宏，用来简化测试工作
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;macro&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;do_test&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;mycommand&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;myret&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_test&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;NAME&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;test_&lt;/span&gt;${&lt;span style=&#34;color:#00688b&#34;&gt;mycommand&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;_&lt;/span&gt;${&lt;span style=&#34;color:#00688b&#34;&gt;myret&lt;/span&gt;} &lt;span style=&#34;color:#cd5555&#34;&gt;COMMAND&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;mycommand&lt;/span&gt;} &lt;span style=&#34;color:#cd5555&#34;&gt;WORKING_DIRECTORY&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/bin&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 检查测试输出是否包含&amp;#34;${myret}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set_tests_properties&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;test_&lt;/span&gt;${&lt;span style=&#34;color:#00688b&#34;&gt;mycommand&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;_&lt;/span&gt;${&lt;span style=&#34;color:#00688b&#34;&gt;myret&lt;/span&gt;} &lt;span style=&#34;color:#cd5555&#34;&gt;PROPERTIES&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;PASS_REGULAR_EXPRESSION&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;myret&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;endmacro&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;do_test&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 启用测试
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;enable_testing&lt;/span&gt;()&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 测试程序
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;do_test&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;mydemo&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cmake&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 构建一个CPack安装包
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;InstallRequiredSystemLibraries&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 设置安装包版本号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CPACK_PACKAGE_VERSION_MAJOR&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;${VERSION_MAJOR}&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CPACK_PACKAGE_VERSION_MINOR&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;${VERSION_MINOR}&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CPack&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
- https://gongluck.github.io/linux/%E4%BB%A3%E7%A0%81%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B8%93%E9%A2%98/ - </description>
        </item>
    
    
    
        <item>
        <title>性能测试专题</title>
        <link>https://gongluck.github.io/linux/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B8%93%E9%A2%98/</link>
        <pubDate>Mon, 28 Dec 2020 22:15:32 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B8%93%E9%A2%98/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B8%93%E9%A2%98/ -&lt;h2 id=&#34;六性能测试专题&#34;&gt;六、性能测试专题&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1性能分析工具&#34;&gt;1.性能分析工具&lt;/h3&gt;
&lt;h4 id=&#34;11-valgrind&#34;&gt;1.1 Valgrind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Valgrind是一套Linux下，开放源代码（GPL V2）的仿真调试工具的集合。Valgrind由内核（core）以及基于内核的其他调试工具组成。内核类似于一个框架（framework）， 它模拟了一个CPU环境，并提供服务给其他工具；而其他工具则类似于插件(plug-in)，利用内核提供的服务完成各种特定的内存调试任务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/valgrind%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png?raw=true&#34; alt=&#34;valgrind体系结构&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget https://sourceware.org/pub/valgrind/valgrind-3.16.1.tar.bz2
tar -jxvf valgrind-3.16.1.tar.bz2
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; valgrind-3.16.1
./configure
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用valgrind&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为了使valgrind发现的错误更精确，如能够定位到源代码行，建议在编译时加上**-g**参数，编译优化选项请选择**-O0**，虽然这会降低程序的执行效率。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gcc -g -O0 test.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;valgrind [valgrind-options] your-prog [your-progoptions]
valgrind --log-file=./valgrind_report.log --leak-check=full --show-leak-kinds=all --showreachable=no --track-origins=yes your-prog [your-progoptions]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-gdb&#34;&gt;1.2 GDB&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一般要调试某个程序，为了能清晰地看到调试的每一行代码、调用的堆栈信息、变量名和函数名等信息，需要调试程序含有调试符号信息。使用&lt;strong&gt;gcc&lt;/strong&gt;编译程序时，如果加上**-g**选项即可在编译后的程序中保留调试符号信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除了不加**-g**选项，也可以使用Linux的**strip**命令移除掉某个程序中的调试信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;strip a.out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gdb直接调试目标程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdb a.out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gdb附加进程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo gdb attach pid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gdb调试core文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdb filename corename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;系统默认是不开启程序崩溃产生&lt;strong&gt;core&lt;/strong&gt;文件这一机制的，我们可以使用&lt;strong&gt;ulimit -a&lt;/strong&gt;命令来查看系统是否开启了这一机制。开启使用命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 将ulimit -c unlimited放入/etc/profile中，然后执行source /etc/profile即可立即生效。&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;ulimit&lt;/span&gt; -c unlimited
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统默认&lt;strong&gt;corefile&lt;/strong&gt;是生成在程序的执行目录下或者程序启动调用了&lt;strong&gt;chdir&lt;/strong&gt;之后的目录，我们可以通过设置生成&lt;strong&gt;corefile&lt;/strong&gt;的格式来控制它，让其生成在固定的目录下，并让每次启动后自动生效。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 打开/etc/sysctl.conf&lt;/span&gt;
sudo vi /etc/sysctl.conf
&lt;span style=&#34;color:#228b22&#34;&gt;# 末尾添加&lt;/span&gt;
kernel.core_pattern=/home/gongluck/core_dump/core-%e-%p-%t
&lt;span style=&#34;color:#228b22&#34;&gt;# 创建目录&lt;/span&gt;
mkdir /home/gongluck/core_dump
&lt;span style=&#34;color:#228b22&#34;&gt;# 执行生效&lt;/span&gt;
sudo sysctl -p /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gdb命令&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;run&lt;/td&gt;
&lt;td&gt;运行一个程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;continue&lt;/td&gt;
&lt;td&gt;让暂停的程序继续运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;next&lt;/td&gt;
&lt;td&gt;运行到下一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;step&lt;/td&gt;
&lt;td&gt;如果有调用函数，进入调用的函数内部，相当于step into&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;until&lt;/td&gt;
&lt;td&gt;运行到指定行停下来&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;finish&lt;/td&gt;
&lt;td&gt;结束当前调用函数，到上一层函数调用处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;结束当前调用函数并返回指定值，到上一层函数调用处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jump&lt;/td&gt;
&lt;td&gt;将当前程序执行流跳转到指定行或地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print&lt;/td&gt;
&lt;td&gt;打印变量或寄存器值&lt;!-- raw HTML omitted --&gt;当使用&lt;strong&gt;print&lt;/strong&gt;命令打印一个字符串或者字符数组时，如果该字符串太长，&lt;strong&gt;print&lt;/strong&gt;命令默认显示不全的，可以通过在&lt;strong&gt;GDB&lt;/strong&gt;中输入&lt;strong&gt;set print element 0&lt;/strong&gt;命令设置一下，这样再次使用 &lt;strong&gt;print&lt;/strong&gt;命令就能完整地显示该变量的所有字符串了。&lt;!-- raw HTML omitted --&gt;可以使用**p strerror(errno)**将错误码对应的文字信息打印出来&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;print&lt;/strong&gt;命令同时也可以修改变量的值，&lt;strong&gt;p ennro = 0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;backtrace&lt;/td&gt;
&lt;td&gt;查看当前线程的调用堆栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame&lt;/td&gt;
&lt;td&gt;切换到当前调用线程的指定堆栈，具体堆栈通过堆栈序号指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;切换到指定线程&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;GDB&lt;/strong&gt;提供了一个在调试时将程序执行流锁定在当前调试线程的命令&lt;strong&gt;set scheduler-locking on&lt;/strong&gt;。当然也可以关闭这一选项，使用&lt;strong&gt;set scheduler-locking off&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break&lt;/td&gt;
&lt;td&gt;添加断点&lt;!-- raw HTML omitted --&gt;条件断点的命令是&lt;strong&gt;break [lineNo] if [condition]&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tbreak&lt;/td&gt;
&lt;td&gt;添加临时断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;删除断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enable&lt;/td&gt;
&lt;td&gt;启用某个断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;disable&lt;/td&gt;
&lt;td&gt;禁用某个断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;watch&lt;/td&gt;
&lt;td&gt;监视某一个变量或内存地址的值是否发生变化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;显示源码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info&lt;/td&gt;
&lt;td&gt;查看断点/线程等信息。&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;info functions&lt;/strong&gt;这个命令会显示程序中所有函数的名词，参数格式，返回值类型以及函数处于哪个代码文件中&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;info threads&lt;/strong&gt;查看线程信息&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;info args&lt;/strong&gt;查看当前函数的参数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ptype&lt;/td&gt;
&lt;td&gt;查看变量类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;disassemble&lt;/td&gt;
&lt;td&gt;查看汇编代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set args&lt;/td&gt;
&lt;td&gt;设置程序启动命令行参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;show args&lt;/td&gt;
&lt;td&gt;查看设置的命令行参数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GDB&lt;/strong&gt;调试器提供了一个选项叫&lt;strong&gt;follow-fork&lt;/strong&gt;，可以使用&lt;strong&gt;show follow-fork mode&lt;/strong&gt;查看当前值，也可以通过&lt;strong&gt;set follow-fork mode&lt;/strong&gt;来设置是当一个进程&lt;strong&gt;fork&lt;/strong&gt;出新的子进程时，&lt;strong&gt;GDB&lt;/strong&gt;是继续调试父进程还是子进程（取值是&lt;strong&gt;child&lt;/strong&gt;），默认是父进程（ 取值是&lt;strong&gt;parent&lt;/strong&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启&lt;strong&gt;GDB TUI&lt;/strong&gt;模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;strong&gt;gdbtui&lt;/strong&gt;命令或者&lt;strong&gt;gdb-tui&lt;/strong&gt;命令开启一个调试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdbtui -q 需要调试的程序名
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接使用&lt;strong&gt;GDB&lt;/strong&gt;调试代码，在需要的时候使用切换键&lt;strong&gt;Ctrl + x&lt;/strong&gt;，然后按&lt;strong&gt;a&lt;/strong&gt;，进入常规&lt;strong&gt;GDB&lt;/strong&gt;和&lt;strong&gt;GDB TUI&lt;/strong&gt;的来回切换。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2linux系统命令&#34;&gt;2.Linux系统命令&lt;/h3&gt;
&lt;h4 id=&#34;21-基础命令和工具&#34;&gt;2.1 基础命令和工具&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;grep&lt;/strong&gt;搜索字符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-c&lt;/td&gt;
&lt;td&gt;仅显示找到的行数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;忽略大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-n&lt;/td&gt;
&lt;td&gt;显示行号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;反向选择，仅列出没有关键词的行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-r&lt;/td&gt;
&lt;td&gt;递归搜索文件目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-C n&lt;/td&gt;
&lt;td&gt;打印匹配行的前后n行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;find&lt;/strong&gt;查找文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;find [指定查找目录] [查找规则] [查找完后执行的action]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-name FILE_NAME&lt;/td&gt;
&lt;td&gt;搜索文件名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-iname FILE_NAME&lt;/td&gt;
&lt;td&gt;忽略文件名称大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-maxdepth n&lt;/td&gt;
&lt;td&gt;最多查找n层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-mindepth n&lt;/td&gt;
&lt;td&gt;最少查找n层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-size nK&lt;/td&gt;
&lt;td&gt;查找文件大小近似nk的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-size +nK&lt;/td&gt;
&lt;td&gt;查找文件大小大于nk的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-size -nK&lt;/td&gt;
&lt;td&gt;查找文件大小小于nk的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-type d/f&lt;/td&gt;
&lt;td&gt;查找目录/文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-cmin n/+n/-n&lt;/td&gt;
&lt;td&gt;查找n分钟左右/以上/以下修改的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-ctime n/+n/-n&lt;/td&gt;
&lt;td&gt;查找n天左右/以上/以下修改的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ls&lt;/strong&gt;显示文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-t&lt;/td&gt;
&lt;td&gt;可以查看最新修改的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-l&lt;/td&gt;
&lt;td&gt;每行显示一个条目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-h&lt;/td&gt;
&lt;td&gt;可以结合显示文件的GB、MB等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-R&lt;/td&gt;
&lt;td&gt;递归显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-n&lt;/td&gt;
&lt;td&gt;显示组id和gid&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;wc&lt;/strong&gt;计算字数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wc [-clw][--help][--version][文件...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-c或&amp;ndash;bytes或&amp;ndash;chars&lt;/td&gt;
&lt;td&gt;只显示Bytes数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-l或&amp;ndash;lines&lt;/td&gt;
&lt;td&gt;只显示行数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-w或&amp;ndash;words&lt;/td&gt;
&lt;td&gt;只显示字数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;help&lt;/td&gt;
&lt;td&gt;在线帮助&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;version&lt;/td&gt;
&lt;td&gt;显示版本信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;uptime&lt;/strong&gt;机器启动时间+负载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ulimit&lt;/strong&gt;用户资源&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;ulimit&lt;/span&gt; -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;curl&lt;/strong&gt;请求http&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-i url&lt;/td&gt;
&lt;td&gt;打印请求响应头信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-I url&lt;/td&gt;
&lt;td&gt;仅返回http头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v url&lt;/td&gt;
&lt;td&gt;打印更多的调试信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-d &amp;lsquo;k=v&amp;rsquo; url&lt;/td&gt;
&lt;td&gt;使用post方法提交http请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;curl -sw &amp;lsquo;%{http_code}&amp;rsquo; url&lt;/td&gt;
&lt;td&gt;打印http响应码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;scp&lt;/strong&gt;远程拷贝&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;//下载192.168.1.1的文件
scp gongluck@192.168.1.1:/home/192.168.1.1/test.txt . 
  
//上传文件到192.168.1.1
scp test.txt gongluck@192.168.1.1:/home/gongluck/
  
//下载test整个目录到本地
scp -r gongluck@192.168.1.1:/home/gongluck/test . 
  
//上传本地test整个目录到192.168.1.1
scp -r &lt;span style=&#34;color:#658b00&#34;&gt;test&lt;/span&gt; gongluck@192.168.1.1:/home/gongluck/ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;dos2unix&lt;/strong&gt;和&lt;strong&gt;unix2dos&lt;/strong&gt;转换换行符&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;dos2unix filename
unix2dos filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;sed&lt;/strong&gt;字符替换&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sed &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;s/原字符串/新字符串/&amp;#39;&lt;/span&gt; 文件
sed &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;s/原字符串/新字符串/g&amp;#39;&lt;/span&gt; 文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-查看活动进程的命令&#34;&gt;2.2 查看活动进程的命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ps&lt;/strong&gt;进程信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ps -elf
ps -ef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;top&lt;/strong&gt;进程cpu内存信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;top
top -Hp pid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pidstat&lt;/strong&gt;进程资源&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-u&lt;/td&gt;
&lt;td&gt;查看cpu相关的性能指标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-w&lt;/td&gt;
&lt;td&gt;查看上下文切换情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-t&lt;/td&gt;
&lt;td&gt;查看线程相关的信息，默认是进程的；常与**-w**结合使用（cpu的上下文切换包括进程的切换、线程的切换、中断的切换）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;展示磁盘I/O统计数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;指明进程号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;23-内存命令&#34;&gt;2.3 内存命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;free&lt;/strong&gt;内存使用情况&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;free
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;24-cpu使用情况监控命令&#34;&gt;2.4 CPU使用情况监控命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;vmstat&lt;/li&gt;
&lt;li&gt;mpstat&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;25-监控磁盘io的命令&#34;&gt;2.5 监控磁盘I/O的命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;iostat&lt;/strong&gt;IO 状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;iostat -x
iostat -d -k n
iostat -dkx m n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;swapon&lt;/strong&gt;查看分区使用情况&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;swapon -s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;df&lt;/strong&gt;硬盘使用情况&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;df -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;du&lt;/strong&gt;目录文件大小&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-h&lt;/td&gt;
&lt;td&gt;以人类可读的方式显示，显示M或K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-a&lt;/td&gt;
&lt;td&gt;显示目录占用的磁盘空间大小，还要显示其下目录和文件占用磁盘空间的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-s&lt;/td&gt;
&lt;td&gt;显示目录占用的磁盘空间大小，不显示其下子目录和文件占用的磁盘空间大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-c&lt;/td&gt;
&lt;td&gt;显示几个目录或文件占用的磁盘空间大小，还要统计它们的总和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;max-depth=n&lt;/td&gt;
&lt;td&gt;查看当前目录下n级子文件和子目录占用的磁盘容量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;26-查看网络信息和网络监控的命令&#34;&gt;2.6 查看网络信息和网络监控的命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ifconfig&lt;/strong&gt;查看和设置网络设备&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 启动关闭指定网卡&lt;/span&gt;
ifconfig eth0 up
ifconfig eth0 down
  
&lt;span style=&#34;color:#228b22&#34;&gt;# 给eth0网卡配置IP地址&lt;/span&gt;
ifconfig eth0 192.168.1.2
&lt;span style=&#34;color:#228b22&#34;&gt;#给eth0网卡配置IP地址，并加上子掩码&lt;/span&gt;
ifconfig eth0 192.168.1.2 netmask 255.255.255.0
&lt;span style=&#34;color:#228b22&#34;&gt;#给eth0网卡配置IP地址，加上子掩码，加上个广播地址&lt;/span&gt;
ifconfig eth0 192.168.1.56 netmask 255.255.255.0 broadcast 192.168.1.255
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ping&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ping [-dfnqrRv][-c&amp;lt;完成次数&amp;gt;][-i&amp;lt;间隔秒数&amp;gt;][-I&amp;lt;网络界面&amp;gt;][-l&amp;lt;前置载入&amp;gt;][-p&amp;lt;范本样
式&amp;gt;][-s&amp;lt;数据包大小&amp;gt;][-t&amp;lt;存活数值&amp;gt;][主机名称或IP地址]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;telnet&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;telnet IP PORT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nc&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-l&lt;/td&gt;
&lt;td&gt;用于指定nc将处于侦听模式。指定该参数，则意味着nc被当作 server，侦听并接受连接，而非向其它地址发起连接。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;暂未用到（老版本的nc可能需要在端口号前加-p参数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-s&lt;/td&gt;
&lt;td&gt;指定发送数据的源IP地址，适用于多网卡机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-u&lt;/td&gt;
&lt;td&gt;指定nc使用&lt;strong&gt;UDP&lt;/strong&gt;协议，默认为&lt;strong&gt;TCP&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;输出交互或出错信息，新手调试时尤为有用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-w&lt;/td&gt;
&lt;td&gt;超时秒数，后面跟数字&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;mtr&lt;/strong&gt;连通性测试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mtr url
  
&lt;span style=&#34;color:#228b22&#34;&gt;#模拟丢包&lt;/span&gt;
sudo tc qdisc add dev eth0 root netem loss 10%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nslookup&lt;/strong&gt;域名解析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;nslookup url
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;traceroute&lt;/strong&gt;路由&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;traceroute url
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;sar&lt;/strong&gt;监控工具&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-A&lt;/td&gt;
&lt;td&gt;所有报告的总和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-u&lt;/td&gt;
&lt;td&gt;CPU利用率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;进程、I节点、文件和锁表状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;硬盘的使用报告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-r&lt;/td&gt;
&lt;td&gt;没有使用的内存页面和硬盘快&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-g&lt;/td&gt;
&lt;td&gt;串口I/O的情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-b&lt;/td&gt;
&lt;td&gt;缓冲区的使用情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-a&lt;/td&gt;
&lt;td&gt;文件的读写情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-c&lt;/td&gt;
&lt;td&gt;系统的调用情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-R&lt;/td&gt;
&lt;td&gt;进程的活动情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-y&lt;/td&gt;
&lt;td&gt;终端设备的活动情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-w&lt;/td&gt;
&lt;td&gt;系统的交换活动&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;netstat&lt;/strong&gt;查看网络信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;netstat -nap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;iptraf&lt;/strong&gt;网络监控&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;iptraf&lt;/strong&gt;是一个实时监控网络流量的交互式的彩色文本屏幕界面。它监控的数据比较全面，可以输出&lt;strong&gt;TCP&lt;/strong&gt;连接、网络接口、协议、端口、网络包大小等信息，但是耗费的系 统资源比较多，且需要管理员权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;tcpdump&lt;/strong&gt;网络分析&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-D&lt;/td&gt;
&lt;td&gt;列举所有网卡设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;选择网卡设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-c&lt;/td&gt;
&lt;td&gt;抓取多少条报文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;time-stamp-precision&lt;/td&gt;
&lt;td&gt;指定捕获时的时间精度，默认微妙&lt;strong&gt;micro&lt;/strong&gt;，可选纳秒&lt;strong&gt;nano&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-s&lt;/td&gt;
&lt;td&gt;指定每条报文的最大字节数，默认&lt;strong&gt;262144&lt;/strong&gt;字节&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;lsof&lt;/strong&gt;列出打开文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 显示端口被某个程序占用&lt;/span&gt;
lsof -i:port
&lt;span style=&#34;color:#228b22&#34;&gt;# 看进程打开了哪些文件&lt;/span&gt;
lsof -p pid
&lt;span style=&#34;color:#228b22&#34;&gt;# 显示abc进程现在打开的文件&lt;/span&gt;
lsof -c abc
&lt;span style=&#34;color:#228b22&#34;&gt;# 显示打开文件abc.txt的进程&lt;/span&gt;
lsof abc.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;27-linux系统的高级工具&#34;&gt;2.7 Linux系统的高级工具&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pstack&lt;/strong&gt;查看进程调用栈&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pstack pid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;strace&lt;/strong&gt;跟踪系统调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;strace -p pid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;proc&lt;/strong&gt;文件系统&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 显示CPU信息&lt;/span&gt;
cat /proc/cpuinfo
&lt;span style=&#34;color:#228b22&#34;&gt;# 显示内存信息&lt;/span&gt;
cat /proc/meminfo
&lt;span style=&#34;color:#228b22&#34;&gt;# 显示详细的内存映射信息&lt;/span&gt;
cat /proc/zoneinfo
&lt;span style=&#34;color:#228b22&#34;&gt;# 显示磁盘映射信息&lt;/span&gt;
cat /proc/mounts
&lt;span style=&#34;color:#228b22&#34;&gt;# 查看系统平均负载命令&lt;/span&gt;
cat /proc/loadavg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://gongluck.github.io/linux/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B8%93%E9%A2%98/ - </description>
        </item>
    
    
    
        <item>
        <title>网络服务专题</title>
        <link>https://gongluck.github.io/linux/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E4%B8%93%E9%A2%98/</link>
        <pubDate>Mon, 30 Nov 2020 21:05:04 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E4%B8%93%E9%A2%98/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E4%B8%93%E9%A2%98/ -&lt;h2 id=&#34;五网络服务专题&#34;&gt;五、网络服务专题&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1reactor反应堆&#34;&gt;1.Reactor反应堆&lt;/h3&gt;
&lt;h4 id=&#34;11-reactor模型&#34;&gt;1.1 Reactor模型&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/Reactor%E6%A8%A1%E5%9E%8B.png?raw=true&#34; alt=&#34;Reactor模型&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reactor释义“反应堆”，是一种事件驱动机制。和普通函数调用的不同之处在于：应用程序不是主动的调用某个API完成处理，而是恰恰 相反，Reactor逆置了事件处理流程，应用程序需要提供相应的接口并注册到Reactor上，如果相应的时间发生，Reactor将主动调用应用程序注册的接口，这些接口又称为“回调函数”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reactor模式是处理并发I/O比较常见的一种模式，用于同步I/O，中心思想是将所有要处理的I/O事件注册到一个中心I/O多路复用器上，同时主线程/进程阻塞在多路复用器上；一旦有I/O事件到来或是准备就绪（文件描述符或socket可读、写），多路复用器返回并将事先注册的相应I/O事件分发到对应的处理器中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reactor模型有三个重要的组件：&lt;/p&gt;
&lt;p&gt;​	&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/Reactor%E7%BB%84%E4%BB%B6.png?raw=true&#34; alt=&#34;Reactor组件&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多路复用器：由操作系统提供，在linux上一般是select、poll、epoll等系统调用。&lt;/li&gt;
&lt;li&gt;事件分发器：将多路复用器中返回的就绪事件分到对应的处理函数中。&lt;/li&gt;
&lt;li&gt;事件处理器：负责处理特定事件的处理函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-reactor实现httpsgithubcomgongluckcvipblobmastercodeioreactorc&#34;&gt;1.2 &lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/io/reactor.c&#34;&gt;Reactor实现&lt;/a&gt;&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Author: gongluck 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Date: 2020-11-26 09:41:40 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified by: gongluck
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified time: 2020-11-26 16:58:43
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;sys/epoll.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#define BUFFER_LENGTH 4096
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define MAX_EPOLL_EVENTS 1024
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define SERVER_PORT 8888
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;NCALLBACK&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyevent
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fd;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; events;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; (*callback)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; events, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg);

    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; status;&lt;span style=&#34;color:#228b22&#34;&gt;//是否已经添加到epoll中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; buffer[BUFFER_LENGTH];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; length;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; last_active;
};

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; epfd;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyevent events[MAX_EPOLL_EVENTS];
};

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;nty_event_set&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyevent *ev, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fd, NCALLBACK callback, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg)
{
    ev-&amp;gt;fd = fd;
    ev-&amp;gt;callback = callback;
    ev-&amp;gt;events = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    ev-&amp;gt;arg = arg;
    ev-&amp;gt;last_active = time(&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;nty_event_add&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; epfd, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; events, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyevent *ev)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; epoll_event ep_ev = {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;}};
    ep_ev.data.ptr = ev;
    ep_ev.events = ev-&amp;gt;events = events;

    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; op;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (ev-&amp;gt;status == &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        op = EPOLL_CTL_MOD;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        op = EPOLL_CTL_ADD;
        ev-&amp;gt;status = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (epoll_ctl(epfd, op, ev-&amp;gt;fd, &amp;amp;ep_ev) &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;event add failed [fd=%d], events[%d]&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, ev-&amp;gt;fd, events);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;nty_event_del&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; epfd, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyevent *ev)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; epoll_event ep_ev = {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;}};

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (ev-&amp;gt;status != &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }

    ep_ev.data.ptr = ev;
    ev-&amp;gt;status = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    epoll_ctl(epfd, EPOLL_CTL_DEL, ev-&amp;gt;fd, &amp;amp;ep_ev);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;recv_cb&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; events, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;send_cb&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; events, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor *reactor = (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor *)arg;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyevent *ev = reactor-&amp;gt;events + fd;

    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; len = send(fd, ev-&amp;gt;buffer, ev-&amp;gt;length, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (len &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;send[fd=%d], [%d]%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, fd, len, ev-&amp;gt;buffer);

        nty_event_del(reactor-&amp;gt;epfd, ev);
        nty_event_set(ev, fd, recv_cb, reactor);
        nty_event_add(reactor-&amp;gt;epfd, EPOLLIN, ev);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        close(ev-&amp;gt;fd);

        nty_event_del(reactor-&amp;gt;epfd, ev);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;send[fd=%d] error %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, fd, strerror(errno));
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; len;
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;recv_cb&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; events, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor *reactor = (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor *)arg;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyevent *ev = reactor-&amp;gt;events + fd;

    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; len = recv(fd, ev-&amp;gt;buffer, BUFFER_LENGTH, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    nty_event_del(reactor-&amp;gt;epfd, ev);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (len &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        ev-&amp;gt;length = len;
        ev-&amp;gt;buffer[len] = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;

        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;C[%d]:%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, fd, ev-&amp;gt;buffer);

        nty_event_set(ev, fd, send_cb, reactor);
        nty_event_add(reactor-&amp;gt;epfd, EPOLLOUT, ev);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (len == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        close(ev-&amp;gt;fd);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;[fd=%d] pos[%ld], closed&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, fd, ev - reactor-&amp;gt;events);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        close(ev-&amp;gt;fd);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;recv[fd=%d] error[%d]:%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, fd, errno, strerror(errno));
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; len;
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;accept_cb&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; events, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor *reactor = (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor *)arg;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reactor == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; sockaddr_in client_addr = {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;};
    socklen_t len = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(client_addr);

    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; clientfd;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((clientfd = accept(fd, (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;client_addr, &amp;amp;len)) == -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (errno != EAGAIN &amp;amp;&amp;amp; errno != EINTR)
        {
        }
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;accept: %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, strerror(errno));
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; MAX_EPOLL_EVENTS; i++)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reactor-&amp;gt;events[i].status == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i == MAX_EPOLL_EVENTS)
        {
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s: max connect limit[%d]&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, __func__, MAX_EPOLL_EVENTS);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (fcntl(clientfd, F_SETFL, O_NONBLOCK) &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
        {
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s: fcntl nonblocking failed, %d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, __func__, MAX_EPOLL_EVENTS);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }

        nty_event_set(&amp;amp;reactor-&amp;gt;events[clientfd], clientfd, recv_cb, reactor);
        nty_event_add(reactor-&amp;gt;epfd, EPOLLIN, &amp;amp;reactor-&amp;gt;events[clientfd]);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);

    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;new connect [%s:%d][time:%ld], pos[%d]&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,
           inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), reactor-&amp;gt;events[i].last_active, i);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;init_sock&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;short&lt;/span&gt; port)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fd = socket(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    fcntl(fd, F_SETFL, O_NONBLOCK);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; sockaddr_in server_addr = {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;};
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    server_addr.sin_port = htons(port);

    bind(fd, (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;server_addr, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(server_addr));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (listen(fd, &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;) &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;listen failed : %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, strerror(errno));
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; fd;
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ntyreactor_init&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor *reactor)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reactor == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    memset(reactor, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor));

    reactor-&amp;gt;epfd = epoll_create(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reactor-&amp;gt;epfd &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;create epfd in %s err %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, __func__, strerror(errno));
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ntyreactor_destory&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor *reactor)
{
    close(reactor-&amp;gt;epfd);
    
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ntyreactor_addlistener&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor *reactor, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sockfd, NCALLBACK *acceptor)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reactor == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;

    nty_event_set(&amp;amp;reactor-&amp;gt;events[sockfd], sockfd, acceptor, reactor);
    nty_event_add(reactor-&amp;gt;epfd, EPOLLIN, &amp;amp;reactor-&amp;gt;events[sockfd]);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ntyreactor_run&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor *reactor)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reactor == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reactor-&amp;gt;epfd &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; epoll_event events[MAX_EPOLL_EVENTS + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; checkpos = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, i;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; now = time(&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; MAX_EPOLL_EVENTS/&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;; i++, checkpos++)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (checkpos == MAX_EPOLL_EVENTS)
            {
                checkpos = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
            }

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reactor-&amp;gt;events[checkpos].status != &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
            }

            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; duration = now - reactor-&amp;gt;events[checkpos].last_active;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (duration &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;60&lt;/span&gt;)
            {
                close(reactor-&amp;gt;events[checkpos].fd);
                printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;[fd=%d] timeout&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reactor-&amp;gt;events[checkpos].fd);
                nty_event_del(reactor-&amp;gt;epfd, &amp;amp;reactor-&amp;gt;events[checkpos]);
            }
        }

        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; nready = epoll_wait(reactor-&amp;gt;epfd, events, MAX_EPOLL_EVENTS, &lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (nready &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
        {
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;epoll_wait error, exit&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; nready; i++)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyevent *ev = (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyevent *)events[i].data.ptr;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((events[i].events &amp;amp; EPOLLIN) &amp;amp;&amp;amp; (ev-&amp;gt;events &amp;amp; EPOLLIN))
            {
                ev-&amp;gt;callback(ev-&amp;gt;fd, events[i].events, ev-&amp;gt;arg);
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((events[i].events &amp;amp; EPOLLOUT) &amp;amp;&amp;amp; (ev-&amp;gt;events &amp;amp; EPOLLOUT))
            {
                ev-&amp;gt;callback(ev-&amp;gt;fd, events[i].events, ev-&amp;gt;arg);
            }
        }
    }
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;short&lt;/span&gt; port = SERVER_PORT;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sockfd = init_sock(port);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; ntyreactor reactor;
    ntyreactor_init(&amp;amp;reactor);

    ntyreactor_addlistener(&amp;amp;reactor, sockfd, accept_cb);
    ntyreactor_run(&amp;amp;reactor);

    ntyreactor_destory(&amp;amp;reactor);
    close(sockfd);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;2日志模块&#34;&gt;2.日志模块&lt;/h3&gt;
&lt;h4 id=&#34;21-log4cpp模块&#34;&gt;2.1 log4cpp模块&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/log4cpp%E6%A8%A1%E5%9D%97%E5%9B%BE.png?raw=true&#34; alt=&#34;log4cpp模块图&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;log4cpp有且只⼀个根Category，可以有多个⼦Category组成树型结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/log4cpp%E7%9A%84appender%E7%A7%8D%E7%B1%BB.png?raw=true&#34; alt=&#34;log4cpp的appender种类&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Appender负责将⽇志写⼊相应的设备，⽐如控制台、⽂件、调试器、Windows⽇志、syslog等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Layout控制输出⽇志的显示样式。Log4cpp内置了4种Layout：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PassThroughLayout：直通布局。&lt;/li&gt;
&lt;li&gt;SimpleLayout：简单布局。它只会为你添加“优先级”的输出。&lt;/li&gt;
&lt;li&gt;BasicLayout：基本布局。它会为你添加“时间”、“优先级”、“种类”、“NDC”。&lt;/li&gt;
&lt;li&gt;PatternLayout：格式化布局。它的使⽤⽅式类似C语⾔中的printf，使⽤格式化它符串来描述输出格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-log4cpp编译安装&#34;&gt;2.2 log4cpp编译安装&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget https://sourceforge.net/projects/log4cpp/files/log4cpp-1.1.x%20%28new%29/log4cpp-1.1/log4cpp-1.1.3.tar.gz
tar zxf log4cpp-1.1.3.tar.gz
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; log4cpp
./configure
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
sudo make install
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;23-log4cpp例子httpsgithubcomgongluckcvipblobmastercodeloglog4cpp&#34;&gt;2.3 &lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/log/log4cpp&#34;&gt;log4cpp例子&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/log/log4cpp/log1.cpp&#34;&gt;例子1&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Author: gongluck 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Date: 2020-11-27 21:12:58 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified by: gongluck
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified time: 2020-11-27 21:30:54
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;// g++ log1.cpp -llog4cpp -lpthread
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;log4cpp/Category.hh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;log4cpp/FileAppender.hh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;log4cpp/OstreamAppender.hh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;log4cpp/BasicLayout.hh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#228b22&#34;&gt;// 实例化一个layout对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    log4cpp::Layout *layout = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; log4cpp::BasicLayout();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 初始化一个appender对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    log4cpp::Appender *appender = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; log4cpp::FileAppender(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;FileAppender&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;./log1.log&amp;#34;&lt;/span&gt;);
    log4cpp::Appender *osappender = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; log4cpp::OstreamAppender(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;OstreamAppender&amp;#34;&lt;/span&gt;,&amp;amp;std::cout);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 把layout对象附着在appender对象上，一个layout格式样式对应一个appender
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    appender-&amp;gt;setLayout(layout);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 实例化一个category对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    log4cpp::Category &amp;amp;warn_log = log4cpp::Category::getInstance(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;gongluck&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 单例工厂
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 设置additivity为false，替换已有的appender，不继承父类appender
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    warn_log.setAdditivity(&lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 把appender对象附到category上
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    warn_log.setAppender(appender);
    warn_log.addAppender(osappender);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 设置category的优先级，低于此优先级的日志不被记录
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    warn_log.setPriority(log4cpp::Priority::INFO);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 记录一些日志
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    warn_log.info(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Program info which cannot be wirten&amp;#34;&lt;/span&gt;);
    warn_log.debug(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;This debug message will fail to write&amp;#34;&lt;/span&gt;);
    warn_log.alert(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Alert info&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 其他记录日志方式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    warn_log.log(log4cpp::Priority::WARN, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;This will be a logged warning&amp;#34;&lt;/span&gt;);

    log4cpp::Priority::PriorityLevel priority = log4cpp::Priority::DEBUG;
    warn_log.log(priority, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Importance depends on context&amp;#34;&lt;/span&gt;);
    warn_log.critStream() &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;This will show up &amp;lt;&amp;lt; as &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; critical message&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#228b22&#34;&gt;// clean up and flush all appenders
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    log4cpp::Category::shutdown();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/log/log4cpp/log2.cpp&#34;&gt;例子2&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Author: gongluck 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Date: 2020-11-27 21:31:03 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified by: gongluck
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified time: 2020-11-27 21:44:29
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// g++ log2.cpp -llog4cpp -lpthread
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;log4cpp/Category.hh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;log4cpp/PropertyConfigurator.hh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt;
    {
        log4cpp::PropertyConfigurator::configure(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;./log2.conf&amp;#34;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (log4cpp::ConfigureFailure &amp;amp;f)
    {
        std::cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Configure Problem &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; f.what() &amp;lt;&amp;lt; std::endl;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 实例化category对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    log4cpp::Category &amp;amp;root = log4cpp::Category::getRoot();
  
    log4cpp::Category &amp;amp;category1 = log4cpp::Category::getInstance(std::string(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;category1&amp;#34;&lt;/span&gt;));
    log4cpp::Category &amp;amp;category3 = log4cpp::Category::getInstance(std::string(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;category1.category2&amp;#34;&lt;/span&gt;));
     
    category1.info(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;This is some info&amp;#34;&lt;/span&gt;);
    category1.alert(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;A warning&amp;#34;&lt;/span&gt;);
  
    category3.debug(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;This debug message will fail to write&amp;#34;&lt;/span&gt;);
    category3.alert(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;All hands abandon ship&amp;#34;&lt;/span&gt;);
    category3.critStream() &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;This will show up &amp;lt;&amp;lt; as &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; critical message&amp;#34;&lt;/span&gt;;
    category3 &amp;lt;&amp;lt; log4cpp::Priority::ERROR&amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;And this will be an error&amp;#34;&lt;/span&gt;;
    category3.log(log4cpp::Priority::WARN, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;This will be a logged warning&amp;#34;&lt;/span&gt;);
      
    log4cpp::Category::shutdown();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3百万并发&#34;&gt;3.百万并发&lt;/h3&gt;
&lt;h4 id=&#34;31-c10k&#34;&gt;3.1 C10K&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从资源上来说，对2GB内存和千兆网卡的服务器来说，同时处理10000个请求，只要每个请求处理占用不到200KB（2GB/10000）的内存和100Kbit（1000Mbit/10000）的网络带宽就可以。所以，物理资源是足够的，接下来自然是软件的问题，特别是网络的 I/O 模型问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在C10K以前，Linux中网络处理都用同步阻塞的方式，也就是每个请求都分配一个进程或者线程。请求数只有100个时，这种方式自然没问题，但增加到10000个请求时，10000个进程或线程的调度、上下文切换乃至它们占用的内存，都会成为瓶颈。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用非阻塞I/O和水平触发通知，比如使用 select 或者 poll&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用软件使用select和poll时，需要对这些文件描述符列表进行轮询，这样，请求数多的时候就会比较耗时。并且，select和poll还有一些其他的限制。&lt;/li&gt;
&lt;li&gt;select使用固定长度的位相量，表示文件描述符的集合，因此会有最大描述符数量的限制。比如，在32位系统中，默认限制是1024。并且，在select内部，检查套接字状态是用轮询的方法，再加上应用软件使用时的轮询，就变成了一个O(n^2)的关系。&lt;/li&gt;
&lt;li&gt;poll改进了select的表示方法，换成了一个没有固定长度的数组，这样就没有了最大描述符数量的限制（当然还会受到系统文件描述符限制）。但应用程序在使用poll时，同样需要对文件描述符列表进行轮询，这样，处理耗时跟描述符数量就是O(N)的关系。&lt;/li&gt;
&lt;li&gt;应用程序每次调用select和poll时，还需要把文件描述符的集合，从用户空间传入内核空间，由内核修改后，再传出到用户空间中。这一来一回的内核空间与用户空间切换，也增加了处理成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用非阻塞I/O和边缘触发通知，比如epoll&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epoll使用红黑树，在内核中管理文件描述符的集合，这样，就不需要应用程序在每次操作时都传入、传出这个集合。&lt;/li&gt;
&lt;li&gt;epoll使用事件驱动的机制，只关注有I/O事件发生的文件描述符，不需要轮询扫描整个集合。&lt;/li&gt;
&lt;li&gt;由于边缘触发只在文件描述符可读或可写事件发生时才通知，那么应用程序就需要尽可能多地执行I/O，并要处理更多的异常事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用异步I/O（Asynchronous I/O，简称为 AIO）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步I/O允许应用程序同时发起很多I/O操作，而不用等待这些操作完成。而在I/O完成后，系统会用事件通知（比如信号或者回调函数）的方式，告诉应用程序。这时，应用程序才会去查询I/O操作的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-c1000k&#34;&gt;3.2 C1000K&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基于C10K的这些理论，epoll配合线程池，再加上CPU、内存和网络接口的性能和容量提升。大部分情况下，C100K很自然就可以达到。&lt;/li&gt;
&lt;li&gt;从软件资源上来说，大量的连接也会占用大量的软件资源，比如文件描述符的数量、连接状态的跟踪（CONNTRACK）、网络协议栈的缓存大小（比如套接字读写缓存、TCP 读写缓存）等等。最后，大量请求带来的中断处理，也会带来非常高的处理成本。这样，就需要多队列网卡、中断负载均衡、CPU 绑定、RPS/RFS（软中断负载均衡到多个 CPU 核上），以及将网络包的处理卸载（Offload）到网络设备（如 TSO/GSO、LRO/GRO、VXLAN OFFLOAD）等各种硬件和软件的优化。&lt;/li&gt;
&lt;li&gt;C1000K 的解决方法，本质上还是构建在epoll的非阻塞I/O模型上。只不过，除了I/O模型之外，还需要从应用程序到Linux内核、再到CPU、内存和网络等各个层次的深度优化，特别是需要借助硬件，来卸载那些原来通过软件处理的大量功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;33-c10m&#34;&gt;3.3 C10M&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Linux内核协议栈做了太多太繁重的工作。从网卡中断带来的硬中断处理程序开始，到软中断中的各层网络协议处理，最后再到应用程序，这个路径实在是太长了，就会导致网络包的处理优化，到了一定程度后，就无法更进一步了。&lt;/li&gt;
&lt;li&gt;要解决这个问题，最重要就是跳过内核协议栈的冗长路径，把网络包直接送到要处理的应用程序那里去。这里有两种常见的机制，DPDK和XDP。&lt;/li&gt;
&lt;/ul&gt;
- https://gongluck.github.io/linux/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E4%B8%93%E9%A2%98/ - </description>
        </item>
    
    
  </channel>
</rss> 