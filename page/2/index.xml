<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gongluck&#39;s blog</title>
    <link>https://gongluck.github.io/</link>
    <description>Recent content on gongluck&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 28 Dec 2020 22:24:36 +0800</lastBuildDate>
    
        <atom:link href="https://gongluck.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>基础组件开发专栏</title>
        <link>https://gongluck.github.io/linux/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%93%E6%A0%8F/</link>
        <pubDate>Mon, 30 Nov 2020 20:58:32 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%93%E6%A0%8F/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%93%E6%A0%8F/ -&lt;h2 id=&#34;三基础组件开发专栏&#34;&gt;三、基础组件开发专栏&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1线程池原理与实现&#34;&gt;1.线程池原理与实现&lt;/h3&gt;
&lt;h4 id=&#34;11-线程池工作流程&#34;&gt;1.1 线程池工作流程&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png?raw=true&#34; alt=&#34;线程池工作流程&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;12-线程池实现&#34;&gt;1.2 线程池实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/threadpool/threadpool.c&#34;&gt;线程池实现代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;// 添加队列节点
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define LL_ADD(item, list) \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    do                     \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    {                      \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;        item-&amp;gt;prev = NULL; \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;        item-&amp;gt;next = list; \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;        list = item;       \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    } while (0)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;// 移除队列节点
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define LL_REMOVE(item, list)              \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    do                                     \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    {                                      \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;        if (item-&amp;gt;prev != NULL)            \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;            item-&amp;gt;prev-&amp;gt;next = item-&amp;gt;next; \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;        if (item-&amp;gt;next != NULL)            \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;            item-&amp;gt;next-&amp;gt;prev = item-&amp;gt;prev; \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;        if (list == item)                  \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;            list = item-&amp;gt;next;             \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;        item-&amp;gt;prev = item-&amp;gt;next = NULL;    \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    } while (0)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;// 工作线程
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; WORKER
{
    pthread_t &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;thread&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; terminate;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; WORKQUEUE *workqueue;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; WORKER *prev;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; WORKER *next;
} Worker;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 工作任务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; JOB
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; (*job_function)(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; JOB *job);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *user_data;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; JOB *prev;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; JOB *next;
} Job;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 工作调度
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; WORKQUEUE
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; WORKER *workers;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; JOB *waiting_jobs;
    pthread_mutex_t jobs_mtx;
    pthread_cond_t jobs_cond;
} WorkQueue;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; WorkQueue ThreadPool;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 工作线程回调函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *&lt;span style=&#34;color:#008b45&#34;&gt;WorkerThread&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *ptr)
{
    Worker *worker = (Worker *)ptr;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        pthread_mutex_lock(&amp;amp;worker-&amp;gt;workqueue-&amp;gt;jobs_mtx);
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (worker-&amp;gt;workqueue-&amp;gt;waiting_jobs == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (worker-&amp;gt;terminate)
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            pthread_cond_wait(&amp;amp;worker-&amp;gt;workqueue-&amp;gt;jobs_cond, &amp;amp;worker-&amp;gt;workqueue-&amp;gt;jobs_mtx);
        }
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (worker-&amp;gt;terminate)
        {
            pthread_mutex_unlock(&amp;amp;worker-&amp;gt;workqueue-&amp;gt;jobs_mtx);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
  
        Job *job = worker-&amp;gt;workqueue-&amp;gt;waiting_jobs;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (job != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        {
            LL_REMOVE(job, worker-&amp;gt;workqueue-&amp;gt;waiting_jobs);
        }
  
        pthread_mutex_unlock(&amp;amp;worker-&amp;gt;workqueue-&amp;gt;jobs_mtx);
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (job == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
  
        job-&amp;gt;job_function(job);
    }
  
    free(worker);
    pthread_exit(&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;);
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 创建线程池
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ThreadPoolCreate&lt;/span&gt;(ThreadPool *workqueue, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; numWorkers)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (numWorkers &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
        numWorkers = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    memset(workqueue, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(ThreadPool));
  
    pthread_mutex_init(&amp;amp;workqueue-&amp;gt;jobs_mtx, &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;);
    pthread_cond_init(&amp;amp;workqueue-&amp;gt;jobs_cond, &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;);
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; numWorkers; i++)
    {
        Worker *worker = (Worker *)malloc(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(Worker));
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (worker == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        {
            perror(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;malloc&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
        }
  
        memset(worker, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(Worker));
        worker-&amp;gt;workqueue = workqueue;
  
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ret = pthread_create(&amp;amp;worker-&amp;gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;thread&lt;/span&gt;, &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, WorkerThread, (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *)worker);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (ret)
        {
            perror(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pthread_create&amp;#34;&lt;/span&gt;);
            free(worker);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
        }
  
        LL_ADD(worker, worker-&amp;gt;workqueue-&amp;gt;workers);
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 终止线程池
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ThreadPoolShutdown&lt;/span&gt;(ThreadPool *workqueue)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (Worker *worker = workqueue-&amp;gt;workers; worker != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;; worker = worker-&amp;gt;next)
    {
        worker-&amp;gt;terminate = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
  
    pthread_mutex_lock(&amp;amp;workqueue-&amp;gt;jobs_mtx);
  
    workqueue-&amp;gt;workers = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    workqueue-&amp;gt;waiting_jobs = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
  
    pthread_cond_broadcast(&amp;amp;workqueue-&amp;gt;jobs_cond);
  
    pthread_mutex_unlock(&amp;amp;workqueue-&amp;gt;jobs_mtx);
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 添加任务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ThreadPoolQueue&lt;/span&gt;(ThreadPool *workqueue, Job *job)
{
    pthread_mutex_lock(&amp;amp;workqueue-&amp;gt;jobs_mtx);
  
    LL_ADD(job, workqueue-&amp;gt;waiting_jobs);
  
    pthread_cond_signal(&amp;amp;workqueue-&amp;gt;jobs_cond);
    pthread_mutex_unlock(&amp;amp;workqueue-&amp;gt;jobs_mtx);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2cas和无锁队列&#34;&gt;2.CAS和无锁队列&lt;/h3&gt;
&lt;h4 id=&#34;21-cas&#34;&gt;2.1 CAS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;比较并交换（compare and swap，CAS），是&lt;strong&gt;原⼦操作&lt;/strong&gt;的⼀种，可⽤于在多线程编程中实现不被打断的数据交换操作，从而避免多线程同时改写某⼀数据时由于执行顺序不确定性以及中断的不可预知性产⽣的数据不一致问题有了CAS，我们就可以用它来实现各种无锁（lock free）的数据结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该操作通过将内存中的值与指定数据进行比较，当数值⼀样时将内存中的数据替换为新的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;compare_and_swap&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; *reg, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; oldval, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; newval)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; old_ref_val = *reg;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(old_reg_val == oldval)&lt;span style=&#34;color:#228b22&#34;&gt;//compare
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        *reg = newval;&lt;span style=&#34;color:#228b22&#34;&gt;//swap
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; old_reg_val;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gcc/g++中的CAS&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;__sync_bool_compare_and_swap&lt;/span&gt;(type *ptr, type oldval type newval, ...);
type &lt;span style=&#34;color:#008b45&#34;&gt;__sync_val_compare_and_swap&lt;/span&gt;(type *ptr, type oldval type newval, ...);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows的CAS&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;InterlockedCompareExchange(__inout LONG &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;volatile&lt;/span&gt;  *Target, __in LONG Exchange, __in LONG Comperand);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++11标准库的CAS&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;template&amp;lt; class T &amp;gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; atomic_compare_exchange_weak(std::atomic&amp;lt;T&amp;gt;* obj, T* expected, T desired);
template&amp;lt; class T &amp;gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; atomic_compare_exchange_weak(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;volatile&lt;/span&gt; std::atomic&amp;lt;T&amp;gt;* obj, T* expected, T desired );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-无锁队列&#34;&gt;2.2 无锁队列&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/cas/cas.h&#34;&gt;无锁队列代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Author: gongluck 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Date: 2020-11-16 16:02:56 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified by:   gongluck 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Last Modified time: 2020-11-16 16:02:56 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
  
template &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typename&lt;/span&gt; ElemType&amp;gt;
class Queue
{
public:
    Queue();
    ~Queue();
  
public:
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; push(ElemType elem);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;pop&lt;/span&gt;();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;();
  
private:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _qNode
    {
        _qNode() : _next(nullptr) {}
        _qNode(ElemType elem) : _elem(elem), _next(nullptr) {}
        ElemType _elem;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _qNode *_next;
    };
  
private:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _qNode *_head;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _qNode *_tail;
};
  
template &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typename&lt;/span&gt; ElemType&amp;gt;
Queue&amp;lt;ElemType&amp;gt;::Queue()
{
    _head = _tail = new _qNode();
}
  
template &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typename&lt;/span&gt; ElemType&amp;gt;
Queue&amp;lt;ElemType&amp;gt;::~Queue()
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (_head != nullptr)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _qNode *tempNode = _head;
        _head = _head-&amp;gt;_next;
        delete tempNode;
    }
}
  
template &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typename&lt;/span&gt; ElemType&amp;gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; Queue&amp;lt;ElemType&amp;gt;::push(ElemType elem)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _qNode *newNode = new &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _qNode(elem);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _qNode *oldp = _tail;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (!__sync_bool_compare_and_swap(&amp;amp;_tail-&amp;gt;_next, nullptr, newNode))
        ;
    __sync_bool_compare_and_swap(&amp;amp;_tail, oldp, newNode);
}
  
template &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typename&lt;/span&gt; ElemType&amp;gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; Queue&amp;lt;ElemType&amp;gt;::pop()
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _qNode *p;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;
    {
        p = _head;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (p-&amp;gt;_next == nullptr)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (!__sync_bool_compare_and_swap(&amp;amp;_head, p, p-&amp;gt;_next));
    delete p;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3内存池&#34;&gt;3.内存池&lt;/h3&gt;
&lt;h4 id=&#34;31-nginx内存池结构&#34;&gt;3.1 Nginx内存池结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nginx内存池结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/Nginx%E5%86%85%E5%AD%98%E6%B1%A0%E7%BB%93%E6%9E%84.jpg?raw=true&#34; alt=&#34;Nginx内存池结构&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nginx对内存的管理分为大内存与小内存，当某一个申请的内存大于某一个值时，就需要从大内存中分配空间，否则从小内存中分配空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nginx中的内存池是在创建的时候就设定好了大小，在以后分配小块内存的时候，如果内存不够，则是重新创建一块内存串到内存池中，而不是将原有的内存池进行扩张。当要分配大块内存是，则是在内存池外面再分配空间进行管理的，称为大块内存池。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nginx内存池中大内存块和小内存块的分配与释放是不一样的。使用内存池时，可以使用ngx_palloc进行分配，使用ngx_pfree释放。对于大内存，这样做是没有问题的，而对于小内存就不一样了，分配的小内存，不会进行释放。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-nginx内存池的实现httpsgithubcomgongluckcvipblobmastercodemmpoolngx_pallocc&#34;&gt;3.2 &lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/mmpool/ngx_palloc.c&#34;&gt;Nginx内存池的实现&lt;/a&gt;&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;ngx_pool_t *
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_create_pool&lt;/span&gt;(size_t size, ngx_log_t *log)
{
    ngx_pool_t  *p;

    p = ngx_memalign(NGX_POOL_ALIGNMENT, size, log);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (p == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    }

    p-&amp;gt;d.last = (u_char *) p + &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(ngx_pool_t);&lt;span style=&#34;color:#228b22&#34;&gt;//初始状态：last指向ngx_pool_t结构体之后数据取起始位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    p-&amp;gt;d.end = (u_char *) p + size;&lt;span style=&#34;color:#228b22&#34;&gt;//end指向分配的整个size大小的内存的末尾
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    p-&amp;gt;d.next = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    p-&amp;gt;d.failed = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;

    size = size - &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(ngx_pool_t);
    p-&amp;gt;max = (size &amp;lt; NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL;

    p-&amp;gt;current = p;
    p-&amp;gt;chain = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    p-&amp;gt;large = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    p-&amp;gt;cleanup = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    p-&amp;gt;log = log;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; p;
}


&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_destroy_pool&lt;/span&gt;(ngx_pool_t *pool)
{
    ngx_pool_t          *p, *n;
    ngx_pool_large_t    *l;
    ngx_pool_cleanup_t  *c;

    &lt;span style=&#34;color:#228b22&#34;&gt;//首先调用所有的数据清理函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (c = pool-&amp;gt;cleanup; c; c = c-&amp;gt;next) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (c-&amp;gt;handler) {
            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&amp;gt;log, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,
                           &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;run cleanup: %p&amp;#34;&lt;/span&gt;, c);
            c-&amp;gt;handler(c-&amp;gt;data);
        }
    }

&lt;span style=&#34;color:#1e889b&#34;&gt;#if (NGX_DEBUG)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * we could allocate the pool-&amp;gt;log from this pool
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * so we cannot use this log while free()ing the pool
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (l = pool-&amp;gt;large; l; l = l-&amp;gt;next) {
        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&amp;gt;log, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;free: %p&amp;#34;&lt;/span&gt;, l-&amp;gt;alloc);
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (p = pool, n = pool-&amp;gt;d.next; &lt;span style=&#34;color:#228b22&#34;&gt;/* void */&lt;/span&gt;; p = n, n = n-&amp;gt;d.next) {
        ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, pool-&amp;gt;log, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,
                       &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;free: %p, unused: %uz&amp;#34;&lt;/span&gt;, p, p-&amp;gt;d.end - p-&amp;gt;d.last);

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (n == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    }

&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;//释放所有的大块内存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (l = pool-&amp;gt;large; l; l = l-&amp;gt;next) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (l-&amp;gt;alloc) {
            ngx_free(l-&amp;gt;alloc);
        }
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;//最后释放所有内存池中的内存块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (p = pool, n = pool-&amp;gt;d.next; &lt;span style=&#34;color:#228b22&#34;&gt;/* void */&lt;/span&gt;; p = n, n = n-&amp;gt;d.next) {
        ngx_free(p);

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (n == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    }
}


&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_reset_pool&lt;/span&gt;(ngx_pool_t *pool)
{
    ngx_pool_t        *p;
    ngx_pool_large_t  *l;

    &lt;span style=&#34;color:#228b22&#34;&gt;//释放所有大块内存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (l = pool-&amp;gt;large; l; l = l-&amp;gt;next) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (l-&amp;gt;alloc) {
            ngx_free(l-&amp;gt;alloc);
        }
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;//重置所有小块内存区
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (p = pool; p; p = p-&amp;gt;d.next) {
        p-&amp;gt;d.last = (u_char *) p + &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(ngx_pool_t);
        p-&amp;gt;d.failed = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    }

    pool-&amp;gt;current = pool;
    pool-&amp;gt;chain = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    pool-&amp;gt;large = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
}


&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_palloc&lt;/span&gt;(ngx_pool_t *pool, size_t size)
{
&lt;span style=&#34;color:#1e889b&#34;&gt;#if !(NGX_DEBUG_PALLOC)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (size &amp;lt;= pool-&amp;gt;max) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ngx_palloc_small(pool, size, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    }
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ngx_palloc_large(pool, size);
}


&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_pnalloc&lt;/span&gt;(ngx_pool_t *pool, size_t size)
{
&lt;span style=&#34;color:#1e889b&#34;&gt;#if !(NGX_DEBUG_PALLOC)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (size &amp;lt;= pool-&amp;gt;max) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ngx_palloc_small(pool, size, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    }
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ngx_palloc_large(pool, size);
}


&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ngx_inline &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_palloc_small&lt;/span&gt;(ngx_pool_t *pool, size_t size, ngx_uint_t align)
{
    u_char      *m;
    ngx_pool_t  *p;

    p = pool-&amp;gt;current;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt; {
        m = p-&amp;gt;d.last;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (align) {
            m = ngx_align_ptr(m, NGX_ALIGNMENT);
        }

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((size_t) (p-&amp;gt;d.end - m) &amp;gt;= size) {&lt;span style=&#34;color:#228b22&#34;&gt;//如果在当前内存块有效范围内，进行内存指针的移动
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            p-&amp;gt;d.last = m + size;

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; m;
        }

        p = p-&amp;gt;d.next;&lt;span style=&#34;color:#228b22&#34;&gt;//如果当前内存块有效容量不够分配，则移动到下一个内存块进行分配
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (p);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ngx_palloc_block(pool, size);
}


&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_palloc_block&lt;/span&gt;(ngx_pool_t *pool, size_t size)
{
    u_char      *m;
    size_t       psize;
    ngx_pool_t  *p, *new;

    psize = (size_t) (pool-&amp;gt;d.end - (u_char *) pool);&lt;span style=&#34;color:#228b22&#34;&gt;//计算内存池第一个内存块的大小
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    m = ngx_memalign(NGX_POOL_ALIGNMENT, psize, pool-&amp;gt;log);&lt;span style=&#34;color:#228b22&#34;&gt;//分配和第一个内存块同样大小的内存块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (m == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    }

    new = (ngx_pool_t *) m;

    new-&amp;gt;d.end = m + psize;&lt;span style=&#34;color:#228b22&#34;&gt;//设置新内存块的end
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    new-&amp;gt;d.next = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    new-&amp;gt;d.failed = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;

    m += &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(ngx_pool_data_t);&lt;span style=&#34;color:#228b22&#34;&gt;//将指针m移动到d后面的一个位置，作为起始位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    m = ngx_align_ptr(m, NGX_ALIGNMENT);
    new-&amp;gt;d.last = m + size;&lt;span style=&#34;color:#228b22&#34;&gt;//设置新内存块的last，即申请使用size大小的内存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;//这里的循环用来找最后一个链表节点，这里failed用来控制循环的长度，如果分配失败次数达到5次，就忽略，不需要每次都从头找起
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (p = pool-&amp;gt;current; p-&amp;gt;d.next; p = p-&amp;gt;d.next) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (p-&amp;gt;d.failed++ &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;) {
            pool-&amp;gt;current = p-&amp;gt;d.next;
        }
    }

    p-&amp;gt;d.next = new;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; m;
}


&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_palloc_large&lt;/span&gt;(ngx_pool_t *pool, size_t size)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;              *p;
    ngx_uint_t         n;
    ngx_pool_large_t  *large;

    &lt;span style=&#34;color:#228b22&#34;&gt;//直接在系统堆中分配一块空间
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    p = ngx_alloc(size, pool-&amp;gt;log);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (p == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    }

    n = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#228b22&#34;&gt;//查找到一个空的large区，如果有，则将刚才分配的空间交由它管理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (large = pool-&amp;gt;large; large; large = large-&amp;gt;next) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (large-&amp;gt;alloc == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) {
            large-&amp;gt;alloc = p;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; p;
        }

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (n++ &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;//为了提高效率， 如果在三次内没有找到空的large结构体，则创建一个
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    large = ngx_palloc_small(pool, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(ngx_pool_large_t), &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (large == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) {
        ngx_free(p);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    }

    large-&amp;gt;alloc = p;
    large-&amp;gt;next = pool-&amp;gt;large;
    pool-&amp;gt;large = large;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; p;
}


&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_pmemalign&lt;/span&gt;(ngx_pool_t *pool, size_t size, size_t alignment)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;              *p;
    ngx_pool_large_t  *large;

    p = ngx_memalign(alignment, size, pool-&amp;gt;log);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (p == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    }

    large = ngx_palloc_small(pool, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(ngx_pool_large_t), &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (large == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) {
        ngx_free(p);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    }

    large-&amp;gt;alloc = p;
    large-&amp;gt;next = pool-&amp;gt;large;
    pool-&amp;gt;large = large;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; p;
}


ngx_int_t
&lt;span style=&#34;color:#008b45&#34;&gt;ngx_pfree&lt;/span&gt;(ngx_pool_t *pool, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p)
{
    ngx_pool_large_t  *l;

    &lt;span style=&#34;color:#228b22&#34;&gt;//只检查是否是大内存块，如果是大内存块则释放
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (l = pool-&amp;gt;large; l; l = l-&amp;gt;next) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (p == l-&amp;gt;alloc) {
            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&amp;gt;log, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,
                           &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;free: %p&amp;#34;&lt;/span&gt;, l-&amp;gt;alloc);
            ngx_free(l-&amp;gt;alloc);
            l-&amp;gt;alloc = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; NGX_OK;
        }
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; NGX_DECLINED;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
- https://gongluck.github.io/linux/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%93%E6%A0%8F/ - </description>
        </item>
    
    
    
        <item>
        <title>后台组件编程专栏</title>
        <link>https://gongluck.github.io/linux/%E5%90%8E%E5%8F%B0%E7%BB%84%E4%BB%B6%E7%BC%96%E7%A8%8B%E4%B8%93%E6%A0%8F/</link>
        <pubDate>Mon, 30 Nov 2020 20:52:27 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E5%90%8E%E5%8F%B0%E7%BB%84%E4%BB%B6%E7%BC%96%E7%A8%8B%E4%B8%93%E6%A0%8F/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E5%90%8E%E5%8F%B0%E7%BB%84%E4%BB%B6%E7%BC%96%E7%A8%8B%E4%B8%93%E6%A0%8F/ -&lt;h2 id=&#34;二后台组件编程专栏&#34;&gt;二、后台组件编程专栏&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1mysql基本操作与编程&#34;&gt;1.MySQL基本操作与编程&lt;/h3&gt;
&lt;h4 id=&#34;11-mysql基础逻辑框架&#34;&gt;1.1 MySQL基础逻辑框架&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/MySQL%E5%9F%BA%E7%A1%80%E9%80%BB%E8%BE%91%E6%A1%86%E6%9E%B6.png?raw=true&#34; alt=&#34;MySQL基础逻辑框架&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;12-基本操作&#34;&gt;1.2 基本操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install mysql-server mysql-client -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动、重启、关闭&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo /etc/init.d/mysql start|stop|restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mysql -h127.0.0.1 -uroot -p &lt;span style=&#34;color:#228b22&#34;&gt;#root用户默认密码为空&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ERROR 1698 (28000): Access denied for user &amp;lsquo;root&amp;rsquo;@&amp;lsquo;localhost&amp;rsquo;问题解决&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 查看/etc/mysql/debian.cnf&lt;/span&gt;
sudo vim /etc/mysql/debian.cnf
&lt;span style=&#34;color:#228b22&#34;&gt;###########################################################&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Automatically generated for Debian scripts. DO NOT TOUCH!&lt;/span&gt;
[client]
&lt;span style=&#34;color:#00688b&#34;&gt;host&lt;/span&gt;     = localhost
&lt;span style=&#34;color:#00688b&#34;&gt;user&lt;/span&gt;     = debian-sys-maint &lt;span style=&#34;color:#228b22&#34;&gt;# 记住这两项&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;password&lt;/span&gt; = 5VRSokq1P0uQ2S39 &lt;span style=&#34;color:#228b22&#34;&gt;# 记住这两项&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;socket&lt;/span&gt;   = /var/run/mysqld/mysqld.sock
[mysql_upgrade]
&lt;span style=&#34;color:#00688b&#34;&gt;host&lt;/span&gt;     = localhost
&lt;span style=&#34;color:#00688b&#34;&gt;user&lt;/span&gt;     = debian-sys-maint
&lt;span style=&#34;color:#00688b&#34;&gt;password&lt;/span&gt; = 5VRSokq1P0uQ2S39
&lt;span style=&#34;color:#00688b&#34;&gt;socket&lt;/span&gt;   = /var/run/mysqld/mysqld.sock
&lt;span style=&#34;color:#228b22&#34;&gt;###########################################################&lt;/span&gt;
mysql -udebian-sys-maint -p5VRSokq1P0uQ2S39
&lt;span style=&#34;color:#228b22&#34;&gt;# 登录MySQL成功后&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; user, plugin from mysql.user;
update mysql.user &lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;authentication_string&lt;/span&gt;=PASSWORD(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#00688b&#34;&gt;plugin&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;mysql_native_password&amp;#39;&lt;/span&gt; where &lt;span style=&#34;color:#00688b&#34;&gt;user&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;;
flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;# &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;创建数据库&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;database&lt;/span&gt; `test` &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;character&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;set&lt;/span&gt; utf8;
# &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;使用数据库&lt;/span&gt;
use test;
# &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;创建表&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt; user_info (
  id &lt;span style=&#34;color:#658b00&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; auto_increment,
  `name` &lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;),
  `title` &lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;),
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;key&lt;/span&gt;(id)
)engine = InnoDB charset = utf8;
# &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;增删查改&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;into&lt;/span&gt; user_info(`name`, `title`)&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;values&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gongluck&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; user_info;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;update&lt;/span&gt; user_info &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;set&lt;/span&gt; `name`=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; id = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; user_info &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; id = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;# &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;创建用户&lt;/span&gt;
#&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;USER&lt;/span&gt; username@&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;host&lt;/span&gt; IDENTIFIED &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;BY&lt;/span&gt; password;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;USER&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gongluck&amp;#39;&lt;/span&gt;@&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt; IDENTIFIED &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;;
  
# &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;授权&lt;/span&gt;
#&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;GRANT&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;privileges&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ON&lt;/span&gt; databasename.tablename &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TO&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;@&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;host&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;WITH&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;GRANT&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;OPTION&lt;/span&gt;;
#&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;privileges&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：用户的操作权限，如&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;UPDATE等&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，如果要授予所的权限则使用&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ALL&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;GRANT&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;, REPLICATION SLAVE, REPLICATION CLIENT &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ON&lt;/span&gt; *.* &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TO&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gongluck&amp;#39;&lt;/span&gt;@&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;GRANT&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ALL&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;PRIVILEGES&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ON&lt;/span&gt; *.* &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TO&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gongluck&amp;#39;&lt;/span&gt;@&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;;
FLUSH &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;PRIVILEGES&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;13-libmysql编程环境&#34;&gt;1.3 libmysql编程环境&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install libmysqlclient-dev -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/mysql/mysql.h&#34;&gt;头文件（/usr/include/mysql/mysql.h）&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   This program is free software; you can redistribute it and/or modify
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   it under the terms of the GNU General Public License, version 2.0,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   as published by the Free Software Foundation.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   This program is also distributed with certain software (including
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   but not limited to OpenSSL) that is licensed under separate terms,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   as designated in a particular file or component or in included license
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   documentation.  The authors of MySQL hereby grant you an additional
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   permission to link the program and your derivative works with the
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   separately licensed software that they have included with MySQL.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   Without limiting anything contained in the foregoing, this file,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   which is part of C Driver for MySQL (Connector/C), is also subject to the
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   Universal FOSS Exception, version 1.0, a copy of which can be found at
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   http://oss.oracle.com/licenses/universal-foss-exception.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   This program is distributed in the hope that it will be useful,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   but WITHOUT ANY WARRANTY; without even the implied warranty of
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   GNU General Public License, version 2.0, for more details.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   You should have received a copy of the GNU General Public License
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   along with this program; if not, write to the Free Software
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */&lt;/span&gt;
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  This file defines the client API to MySQL and also the ABI of the
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  dynamically linked libmysqlclient.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  The ABI should never be changed in a released product of MySQL,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  thus you need to take great care when changing the file. In case
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  the file is changed so the ABI is broken, you must also update
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  the SHARED_LIB_MAJOR_VERSION in cmake/mysql_version.cmake
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifndef _mysql_h
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define _mysql_h
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef	__cplusplus
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; {
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifndef MY_GLOBAL_INCLUDED                &lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* If not standard header */&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#ifndef MYSQL_ABI_CHECK
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; my_bool;
&lt;span style=&#34;color:#1e889b&#34;&gt;#if !defined(_WIN32)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define STDCALL
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define STDCALL __stdcall
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifndef my_socket_defined
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef _WIN32
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef WIN32_LEAN_AND_MEAN
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;winsock2.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define my_socket SOCKET
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; my_socket;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* _WIN32 */&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* my_socket_defined */&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* MY_GLOBAL_INCLUDED */&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;mysql_version.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;mysql_com.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;mysql_time.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;my_list.h&amp;#34; /* for LISTs used in &amp;#39;MYSQL&amp;#39; and &amp;#39;MYSQL_STMT&amp;#39; */&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;/* Include declarations of plug-in API */&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;mysql/client_plugin.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; mysql_port;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *mysql_unix_port;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#define CLIENT_NET_READ_TIMEOUT		365*24*3600	&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* Timeout on read */&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define CLIENT_NET_WRITE_TIMEOUT	365*24*3600	&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* Timeout on write */&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#define IS_PRI_KEY(n)	((n) &amp;amp; PRI_KEY_FLAG)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define IS_NOT_NULL(n)	((n) &amp;amp; NOT_NULL_FLAG)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define IS_BLOB(n)	((n) &amp;amp; BLOB_FLAG)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   Returns true if the value is a number which does not need quotes for
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;   the sql_lex.cc parser to parse correctly.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#define IS_NUM(t)	(((t) &amp;lt;= MYSQL_TYPE_INT24 &amp;amp;&amp;amp; (t) != MYSQL_TYPE_TIMESTAMP) || (t) == MYSQL_TYPE_YEAR || (t) == MYSQL_TYPE_NEWDECIMAL)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define IS_LONGDATA(t) ((t) &amp;gt;= MYSQL_TYPE_TINY_BLOB &amp;amp;&amp;amp; (t) &amp;lt;= MYSQL_TYPE_STRING)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_field {
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *name;                 &lt;span style=&#34;color:#228b22&#34;&gt;/* Name of column */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *org_name;             &lt;span style=&#34;color:#228b22&#34;&gt;/* Original column name, if an alias */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *table;                &lt;span style=&#34;color:#228b22&#34;&gt;/* Table of column if column was a field */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *org_table;            &lt;span style=&#34;color:#228b22&#34;&gt;/* Org table name, if table was an alias */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *db;                   &lt;span style=&#34;color:#228b22&#34;&gt;/* Database for table */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *catalog;	      &lt;span style=&#34;color:#228b22&#34;&gt;/* Catalog for table */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *def;                  &lt;span style=&#34;color:#228b22&#34;&gt;/* Default value (set by mysql_list_fields) */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; length;       &lt;span style=&#34;color:#228b22&#34;&gt;/* Width of column (create length) */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; max_length;   &lt;span style=&#34;color:#228b22&#34;&gt;/* Max width for selected set */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; name_length;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; org_name_length;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; table_length;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; org_table_length;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; db_length;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; catalog_length;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; def_length;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; flags;         &lt;span style=&#34;color:#228b22&#34;&gt;/* Div flags */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; decimals;      &lt;span style=&#34;color:#228b22&#34;&gt;/* Number of decimals in field */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; charsetnr;     &lt;span style=&#34;color:#228b22&#34;&gt;/* Character set */&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; enum_field_types type; &lt;span style=&#34;color:#228b22&#34;&gt;/* Type of field. See mysql_com.h for types */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *extension;
} MYSQL_FIELD;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; **MYSQL_ROW;		&lt;span style=&#34;color:#228b22&#34;&gt;/* return data as array of strings */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MYSQL_FIELD_OFFSET; &lt;span style=&#34;color:#228b22&#34;&gt;/* offset to current field */&lt;/span&gt;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifndef MY_GLOBAL_INCLUDED
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#if defined (_WIN32)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;__int64&lt;/span&gt; my_ulonglong;
&lt;span style=&#34;color:#1e889b&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; my_ulonglong;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;typelib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#define MYSQL_COUNT_ERROR (~(my_ulonglong) 0)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;/* backward compatibility define - to be removed eventually */&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#define ER_WARN_DATA_TRUNCATED WARN_DATA_TRUNCATED
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_rows {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_rows *next;		&lt;span style=&#34;color:#228b22&#34;&gt;/* list of rows */&lt;/span&gt;
  MYSQL_ROW data;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; length;
} MYSQL_ROWS;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; MYSQL_ROWS *MYSQL_ROW_OFFSET;	&lt;span style=&#34;color:#228b22&#34;&gt;/* offset to current row */&lt;/span&gt;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;my_alloc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; embedded_query_result EMBEDDED_QUERY_RESULT;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_data {
  MYSQL_ROWS *data;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; embedded_query_result *embedded_info;
  MEM_ROOT alloc;
  my_ulonglong rows;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fields;
  &lt;span style=&#34;color:#228b22&#34;&gt;/* extra info for embedded library */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *extension;
} MYSQL_DATA;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; mysql_option 
{
  MYSQL_OPT_CONNECT_TIMEOUT, MYSQL_OPT_COMPRESS, MYSQL_OPT_NAMED_PIPE,
  MYSQL_INIT_COMMAND, MYSQL_READ_DEFAULT_FILE, MYSQL_READ_DEFAULT_GROUP,
  MYSQL_SET_CHARSET_DIR, MYSQL_SET_CHARSET_NAME, MYSQL_OPT_LOCAL_INFILE,
  MYSQL_OPT_PROTOCOL, MYSQL_SHARED_MEMORY_BASE_NAME, MYSQL_OPT_READ_TIMEOUT,
  MYSQL_OPT_WRITE_TIMEOUT, MYSQL_OPT_USE_RESULT,
  MYSQL_OPT_USE_REMOTE_CONNECTION, MYSQL_OPT_USE_EMBEDDED_CONNECTION,
  MYSQL_OPT_GUESS_CONNECTION, MYSQL_SET_CLIENT_IP, MYSQL_SECURE_AUTH,
  MYSQL_REPORT_DATA_TRUNCATION, MYSQL_OPT_RECONNECT,
  MYSQL_OPT_SSL_VERIFY_SERVER_CERT, MYSQL_PLUGIN_DIR, MYSQL_DEFAULT_AUTH,
  MYSQL_OPT_BIND,
  MYSQL_OPT_SSL_KEY, MYSQL_OPT_SSL_CERT, 
  MYSQL_OPT_SSL_CA, MYSQL_OPT_SSL_CAPATH, MYSQL_OPT_SSL_CIPHER,
  MYSQL_OPT_SSL_CRL, MYSQL_OPT_SSL_CRLPATH,
  MYSQL_OPT_CONNECT_ATTR_RESET, MYSQL_OPT_CONNECT_ATTR_ADD,
  MYSQL_OPT_CONNECT_ATTR_DELETE,
  MYSQL_SERVER_PUBLIC_KEY,
  MYSQL_ENABLE_CLEARTEXT_PLUGIN,
  MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS,
  MYSQL_OPT_SSL_ENFORCE,
  MYSQL_OPT_MAX_ALLOWED_PACKET, MYSQL_OPT_NET_BUFFER_LENGTH,
  MYSQL_OPT_TLS_VERSION,
  MYSQL_OPT_SSL_MODE,
  MYSQL_OPT_GET_SERVER_PUBLIC_KEY
};
  
&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  @todo remove the &amp;#34;extension&amp;#34;, move st_mysql_options completely
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  out of mysql.h
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_options_extention; 
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_options {
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; connect_timeout, read_timeout, write_timeout;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; port, protocol;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; client_flag;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *host,*user,*password,*unix_socket,*db;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_dynamic_array *init_commands;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *my_cnf_file,*my_cnf_group, *charset_dir, *charset_name;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *ssl_key;				&lt;span style=&#34;color:#228b22&#34;&gt;/* PEM key file */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *ssl_cert;				&lt;span style=&#34;color:#228b22&#34;&gt;/* PEM cert file */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *ssl_ca;					&lt;span style=&#34;color:#228b22&#34;&gt;/* PEM CA file */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *ssl_capath;				&lt;span style=&#34;color:#228b22&#34;&gt;/* PEM directory of CA-s? */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *ssl_cipher;				&lt;span style=&#34;color:#228b22&#34;&gt;/* cipher to use */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *shared_memory_base_name;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; max_allowed_packet;
  my_bool use_ssl;                              &lt;span style=&#34;color:#228b22&#34;&gt;/* Deprecated ! Former use_ssl */&lt;/span&gt;
  my_bool compress,named_pipe;
  my_bool unused1;
  my_bool unused2;
  my_bool unused3;
  my_bool unused4;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; mysql_option methods_to_use;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;union&lt;/span&gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;      The ip/hostname to use when authenticating
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;      client against embedded server built with
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;      grant tables - only used in embedded server
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *client_ip;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;      The local address to bind when connecting to
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;      remote server - not used in embedded server
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *bind_address;
  } ci;
  my_bool unused5;
  &lt;span style=&#34;color:#228b22&#34;&gt;/* 0 - never report, 1 - always report (default) */&lt;/span&gt;
  my_bool report_data_truncation;
  
  &lt;span style=&#34;color:#228b22&#34;&gt;/* function pointers for local infile support */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; (*local_infile_init)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; **, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *);
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; (*local_infile_read)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;);
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; (*local_infile_end)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *);
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; (*local_infile_error)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;);
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *local_infile_userdata;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_options_extention *extension;
};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; mysql_status 
{
  MYSQL_STATUS_READY, MYSQL_STATUS_GET_RESULT, MYSQL_STATUS_USE_RESULT,
  MYSQL_STATUS_STATEMENT_GET_RESULT
};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; mysql_protocol_type 
{
  MYSQL_PROTOCOL_DEFAULT, MYSQL_PROTOCOL_TCP, MYSQL_PROTOCOL_SOCKET,
  MYSQL_PROTOCOL_PIPE, MYSQL_PROTOCOL_MEMORY
};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; mysql_ssl_mode
{
  SSL_MODE_DISABLED= &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, SSL_MODE_PREFERRED, SSL_MODE_REQUIRED,
  SSL_MODE_VERIFY_CA, SSL_MODE_VERIFY_IDENTITY
};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; character_set
{
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;      number;     &lt;span style=&#34;color:#228b22&#34;&gt;/* character set number              */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;      state;      &lt;span style=&#34;color:#228b22&#34;&gt;/* character set state               */&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;        *csname;    &lt;span style=&#34;color:#228b22&#34;&gt;/* collation name                    */&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;        *name;      &lt;span style=&#34;color:#228b22&#34;&gt;/* character set name                */&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;        *comment;   &lt;span style=&#34;color:#228b22&#34;&gt;/* comment                           */&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;        *dir;       &lt;span style=&#34;color:#228b22&#34;&gt;/* character set directory           */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;      mbminlen;   &lt;span style=&#34;color:#228b22&#34;&gt;/* min. length for multibyte strings */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;      mbmaxlen;   &lt;span style=&#34;color:#228b22&#34;&gt;/* max. length for multibyte strings */&lt;/span&gt;
} MY_CHARSET_INFO;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_methods;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_stmt;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql
{
  NET		net;			&lt;span style=&#34;color:#228b22&#34;&gt;/* Communication parameters */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;	*connector_fd;		&lt;span style=&#34;color:#228b22&#34;&gt;/* ConnectorFd for SSL */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;		*host,*user,*passwd,*unix_socket,*server_version,*host_info;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;          *info, *db;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; charset_info_st *charset;
  MYSQL_FIELD	*fields;
  MEM_ROOT	field_alloc;
  my_ulonglong affected_rows;
  my_ulonglong insert_id;		&lt;span style=&#34;color:#228b22&#34;&gt;/* id if insert on table with NEXTNR */&lt;/span&gt;
  my_ulonglong extra_info;		&lt;span style=&#34;color:#228b22&#34;&gt;/* Not used */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; thread_id;		&lt;span style=&#34;color:#228b22&#34;&gt;/* Id for connection in server */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; packet_length;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;	port;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; client_flag,server_capabilities;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;	protocol_version;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;	field_count;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; 	server_status;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;  server_language;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;	warning_count;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_options options;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; mysql_status status;
  my_bool	free_me;		&lt;span style=&#34;color:#228b22&#34;&gt;/* If free in mysql_close */&lt;/span&gt;
  my_bool	reconnect;		&lt;span style=&#34;color:#228b22&#34;&gt;/* set to 1 if automatic reconnect */&lt;/span&gt;
  
  &lt;span style=&#34;color:#228b22&#34;&gt;/* session-wide random string */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;	        scramble[SCRAMBLE_LENGTH+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
  my_bool unused1;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *unused2, *unused3, *unused4, *unused5;
  
  LIST  *stmts;                     &lt;span style=&#34;color:#228b22&#34;&gt;/* list of all statements */&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_methods *methods;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *thd;
  &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    Points to boolean flag in MYSQL_RES  or MYSQL_STMT. We set this flag 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    from mysql_stmt_close if close had to cancel result set of this object.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  */&lt;/span&gt;
  my_bool *unbuffered_fetch_owner;
  &lt;span style=&#34;color:#228b22&#34;&gt;/* needed for embedded server - no net buffer to store the &amp;#39;info&amp;#39; */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *info_buffer;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *extension;
} MYSQL;
  
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_res {
  my_ulonglong  row_count;
  MYSQL_FIELD	*fields;
  MYSQL_DATA	*data;
  MYSQL_ROWS	*data_cursor;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; *lengths;		&lt;span style=&#34;color:#228b22&#34;&gt;/* column lengths of current row */&lt;/span&gt;
  MYSQL		*handle;		&lt;span style=&#34;color:#228b22&#34;&gt;/* for unbuffered reads */&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_methods *methods;
  MYSQL_ROW	row;			&lt;span style=&#34;color:#228b22&#34;&gt;/* If unbuffered read */&lt;/span&gt;
  MYSQL_ROW	current_row;		&lt;span style=&#34;color:#228b22&#34;&gt;/* buffer to current row */&lt;/span&gt;
  MEM_ROOT	field_alloc;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;	field_count, current_field;
  my_bool	eof;			&lt;span style=&#34;color:#228b22&#34;&gt;/* Used by mysql_fetch_row */&lt;/span&gt;
  &lt;span style=&#34;color:#228b22&#34;&gt;/* mysql_stmt_close() had to cancel this result */&lt;/span&gt;
  my_bool       unbuffered_fetch_cancelled;  
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *extension;
} MYSQL_RES;
  
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#if !defined(MYSQL_SERVER) &amp;amp;&amp;amp; !defined(MYSQL_CLIENT)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define MYSQL_CLIENT
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  Set up and bring down the server; to ensure that applications will
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  work when linked against either the standard client library or the
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  embedded server library, these functions should be called.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_server_init&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; **argv, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; **groups);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_server_end&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;);
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  mysql_server_init/end need to be called when using libmysqld or
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  libmysqlclient (exactly, mysql_server_init() is called by mysql_init() so
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  you don&amp;#39;t need to call it explicitely; but you need to call
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  mysql_server_end() to free memory). The names are a bit misleading
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  (mysql_SERVER* to be used when using libmysqlCLIENT). So we add more general
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  names which suit well whether you&amp;#39;re using libmysqld or libmysqlclient. We
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  intend to promote these aliases over the mysql_server* ones.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#define mysql_library_init mysql_server_init
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define mysql_library_end mysql_server_end
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  Set up and bring down a thread; these function should be called
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  for each thread in an application which opens at least one MySQL
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  connection.  All uses of the connection(s) should be between these
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  function calls.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_thread_init&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_thread_end&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;);
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  Functions to get information from the MYSQL and MYSQL_RES structures
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  Should definitely be used if one uses shared libraries.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
  
my_ulonglong STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_num_rows&lt;/span&gt;(MYSQL_RES *res);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_num_fields&lt;/span&gt;(MYSQL_RES *res);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_eof&lt;/span&gt;(MYSQL_RES *res);
MYSQL_FIELD *STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_fetch_field_direct&lt;/span&gt;(MYSQL_RES *res,
                        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fieldnr);
MYSQL_FIELD * STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_fetch_fields&lt;/span&gt;(MYSQL_RES *res);
MYSQL_ROW_OFFSET STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_row_tell&lt;/span&gt;(MYSQL_RES *res);
MYSQL_FIELD_OFFSET STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_field_tell&lt;/span&gt;(MYSQL_RES *res);
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_field_count&lt;/span&gt;(MYSQL *mysql);
my_ulonglong STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_affected_rows&lt;/span&gt;(MYSQL *mysql);
my_ulonglong STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_insert_id&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_errno&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; * STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_error&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_sqlstate&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_warning_count&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; * STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_info&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_thread_id&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; * STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_character_set_name&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;          STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_set_character_set&lt;/span&gt;(MYSQL *mysql, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *csname);
  
MYSQL *		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_init&lt;/span&gt;(MYSQL *mysql);
my_bool		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_ssl_set&lt;/span&gt;(MYSQL *mysql, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *key,
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *cert, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *ca,
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *capath, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *cipher);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *    STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_get_ssl_cipher&lt;/span&gt;(MYSQL *mysql);
my_bool		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_change_user&lt;/span&gt;(MYSQL *mysql, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *user, 
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *passwd, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *db);
MYSQL *		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_real_connect&lt;/span&gt;(MYSQL *mysql, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *host,
                     &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *user,
                     &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *passwd,
                     &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *db,
                     &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; port,
                     &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *unix_socket,
                     &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; clientflag);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_select_db&lt;/span&gt;(MYSQL *mysql, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *db);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_query&lt;/span&gt;(MYSQL *mysql, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *q);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_send_query&lt;/span&gt;(MYSQL *mysql, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *q,
                   &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; length);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_real_query&lt;/span&gt;(MYSQL *mysql, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *q,
                  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; length);
MYSQL_RES *     STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_store_result&lt;/span&gt;(MYSQL *mysql);
MYSQL_RES *     STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_use_result&lt;/span&gt;(MYSQL *mysql);
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;        STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_get_character_set_info&lt;/span&gt;(MYSQL *mysql,
                           MY_CHARSET_INFO *charset);
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_session_track_get_first&lt;/span&gt;(MYSQL *mysql,
                                          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; enum_session_state_type type,
                                          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; **data,
                                          size_t *length);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_session_track_get_next&lt;/span&gt;(MYSQL *mysql,
                                         &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; enum_session_state_type type,
                                         &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; **data,
                                         size_t *length);
&lt;span style=&#34;color:#228b22&#34;&gt;/* local infile support */&lt;/span&gt;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#define LOCAL_INFILE_ERROR_LEN 512
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;color:#008b45&#34;&gt;mysql_set_local_infile_handler&lt;/span&gt;(MYSQL *mysql,
                               &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; (*local_infile_init)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; **, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *,
                            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *),
                               &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; (*local_infile_read)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *,
                          &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;),
                               &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; (*local_infile_end)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *),
                               &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; (*local_infile_error)(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*,
                           &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;),
                               &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *);
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;color:#008b45&#34;&gt;mysql_set_local_infile_default&lt;/span&gt;(MYSQL *mysql);
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_shutdown&lt;/span&gt;(MYSQL *mysql,
                                       &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; mysql_enum_shutdown_level
                                       shutdown_level);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_dump_debug_info&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_refresh&lt;/span&gt;(MYSQL *mysql,
                   &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; refresh_options);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_kill&lt;/span&gt;(MYSQL *mysql,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; pid);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_set_server_option&lt;/span&gt;(MYSQL *mysql,
                      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; enum_mysql_set_option
                      option);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_ping&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stat&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_get_server_info&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_get_client_info&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt;	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_get_client_version&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_get_host_info&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt;	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_get_server_version&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_get_proto_info&lt;/span&gt;(MYSQL *mysql);
MYSQL_RES *	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_list_dbs&lt;/span&gt;(MYSQL *mysql,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *wild);
MYSQL_RES *	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_list_tables&lt;/span&gt;(MYSQL *mysql,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *wild);
MYSQL_RES *	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_list_processes&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_options&lt;/span&gt;(MYSQL *mysql,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; mysql_option option,
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_options4&lt;/span&gt;(MYSQL *mysql,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; mysql_option option,
                                       &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg1, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg2);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;             STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_get_option&lt;/span&gt;(MYSQL *mysql, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; mysql_option option,
                                         &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *arg);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_free_result&lt;/span&gt;(MYSQL_RES *result);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;		STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_data_seek&lt;/span&gt;(MYSQL_RES *result,
                  my_ulonglong offset);
MYSQL_ROW_OFFSET STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_row_seek&lt;/span&gt;(MYSQL_RES *result,
                      MYSQL_ROW_OFFSET offset);
MYSQL_FIELD_OFFSET STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_field_seek&lt;/span&gt;(MYSQL_RES *result,
                     MYSQL_FIELD_OFFSET offset);
MYSQL_ROW	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_fetch_row&lt;/span&gt;(MYSQL_RES *result);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; * STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_fetch_lengths&lt;/span&gt;(MYSQL_RES *result);
MYSQL_FIELD *	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_fetch_field&lt;/span&gt;(MYSQL_RES *result);
MYSQL_RES *     STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_list_fields&lt;/span&gt;(MYSQL *mysql, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *table,
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *wild);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt;	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_escape_string&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *to,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *from,
                      &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; from_length);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt;	STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_hex_string&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *to,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *from,
                                         &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; from_length);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_real_escape_string&lt;/span&gt;(MYSQL *mysql,
                         &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *to,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *from,
                         &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; length);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_real_escape_string_quote&lt;/span&gt;(MYSQL *mysql,
                 &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *to, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *from,
                 &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; length, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; quote);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;          STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_debug&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *debug);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;          STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;myodbc_remove_escape&lt;/span&gt;(MYSQL *mysql,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *name);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;  STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_thread_safe&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;);
my_bool       STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_embedded&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;);
my_bool       STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_read_query_result&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;           STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_reset_connection&lt;/span&gt;(MYSQL *mysql);
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  The following definitions are added for the enhanced 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  client-server protocol
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
  
&lt;span style=&#34;color:#228b22&#34;&gt;/* statement state */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; enum_mysql_stmt_state
{
  MYSQL_STMT_INIT_DONE= &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, MYSQL_STMT_PREPARE_DONE, MYSQL_STMT_EXECUTE_DONE,
  MYSQL_STMT_FETCH_DONE
};
  
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  This structure is used to define bind information, and
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  internally by the client library.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  Public members with their descriptions are listed below
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  (conventionally `On input&amp;#39; refers to the binds given to
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  mysql_stmt_bind_param, `On output&amp;#39; refers to the binds given
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  to mysql_stmt_bind_result):
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  buffer_type    - One of the MYSQL_* types, used to describe
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   the host language type of buffer.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   On output: if column type is different from
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   buffer_type, column value is automatically converted
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   to buffer_type before it is stored in the buffer.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  buffer         - On input: points to the buffer with input data.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   On output: points to the buffer capable to store
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   output data.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   The type of memory pointed by buffer must correspond
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   to buffer_type. See the correspondence table in
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   the comment to mysql_stmt_bind_param.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  The two above members are mandatory for any kind of bind.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  buffer_length  - the length of the buffer. You don&amp;#39;t have to set
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   it for any fixed length buffer: float, double,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   int, etc. It must be set however for variable-length
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   types, such as BLOBs or STRINGs.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  length         - On input: in case when lengths of input values
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   are different for each execute, you can set this to
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   point at a variable containining value length. This
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   way the value length can be different in each execute.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   If length is not NULL, buffer_length is not used.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   Note, length can even point at buffer_length if
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   you keep bind structures around while fetching:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   this way you can change buffer_length before
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   each execution, everything will work ok.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   On output: if length is set, mysql_stmt_fetch will
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   write column length into it.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  is_null        - On input: points to a boolean variable that should
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   be set to TRUE for NULL values.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   This member is useful only if your data may be
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   NULL in some but not all cases.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   If your data is never NULL, is_null should be set to 0.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   If your data is always NULL, set buffer_type
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   to MYSQL_TYPE_NULL, and is_null will not be used.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  is_unsigned    - On input: used to signify that values provided for one
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   of numeric types are unsigned.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   On output describes signedness of the output buffer.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   If, taking into account is_unsigned flag, column data
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   is out of range of the output buffer, data for this column
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   is regarded truncated. Note that this has no correspondence
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   to the sign of result set column, if you need to find it out
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   use mysql_stmt_result_metadata.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  error          - where to write a truncation error if it is present.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   possible error value is:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   0  no truncation
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                   1  value is out of range or buffer is too small
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  Please note that MYSQL_BIND also has internals members.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_bind
{
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt;	*length;          &lt;span style=&#34;color:#228b22&#34;&gt;/* output length pointer */&lt;/span&gt;
  my_bool       *is_null;	  &lt;span style=&#34;color:#228b22&#34;&gt;/* Pointer to null indicator */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;		*buffer;	  &lt;span style=&#34;color:#228b22&#34;&gt;/* buffer to get/put data */&lt;/span&gt;
  &lt;span style=&#34;color:#228b22&#34;&gt;/* set this if you want to track data truncations happened during fetch */&lt;/span&gt;
  my_bool       *error;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *row_ptr;         &lt;span style=&#34;color:#228b22&#34;&gt;/* for the current data position */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; (*store_param_func)(NET *net, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_bind *param);
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; (*fetch_result)(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_bind *, MYSQL_FIELD *,
                       &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; **row);
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; (*skip_result)(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_bind *, MYSQL_FIELD *,
            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; **row);
  &lt;span style=&#34;color:#228b22&#34;&gt;/* output buffer length, must be set when fetching str/binary */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; buffer_length;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; offset;           &lt;span style=&#34;color:#228b22&#34;&gt;/* offset position for char/binary fetch */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; length_value;     &lt;span style=&#34;color:#228b22&#34;&gt;/* Used if length is 0 */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;	param_number;	  &lt;span style=&#34;color:#228b22&#34;&gt;/* For null count and error messages */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;  pack_length;	  &lt;span style=&#34;color:#228b22&#34;&gt;/* Internal length for packed data */&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; enum_field_types buffer_type;	&lt;span style=&#34;color:#228b22&#34;&gt;/* buffer type */&lt;/span&gt;
  my_bool       error_value;      &lt;span style=&#34;color:#228b22&#34;&gt;/* used if error is 0 */&lt;/span&gt;
  my_bool       is_unsigned;      &lt;span style=&#34;color:#228b22&#34;&gt;/* set if integer type is unsigned */&lt;/span&gt;
  my_bool	long_data_used;	  &lt;span style=&#34;color:#228b22&#34;&gt;/* If used with mysql_send_long_data */&lt;/span&gt;
  my_bool	is_null_value;    &lt;span style=&#34;color:#228b22&#34;&gt;/* Used if is_null is 0 */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *extension;
} MYSQL_BIND;
  
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_stmt_extension;
  
&lt;span style=&#34;color:#228b22&#34;&gt;/* statement handler */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_stmt
{
  MEM_ROOT       mem_root;             &lt;span style=&#34;color:#228b22&#34;&gt;/* root allocations */&lt;/span&gt;
  LIST           list;                 &lt;span style=&#34;color:#228b22&#34;&gt;/* list to keep track of all stmts */&lt;/span&gt;
  MYSQL          *mysql;               &lt;span style=&#34;color:#228b22&#34;&gt;/* connection handle */&lt;/span&gt;
  MYSQL_BIND     *params;              &lt;span style=&#34;color:#228b22&#34;&gt;/* input parameters */&lt;/span&gt;
  MYSQL_BIND     *bind;                &lt;span style=&#34;color:#228b22&#34;&gt;/* output parameters */&lt;/span&gt;
  MYSQL_FIELD    *fields;              &lt;span style=&#34;color:#228b22&#34;&gt;/* result set metadata */&lt;/span&gt;
  MYSQL_DATA     result;               &lt;span style=&#34;color:#228b22&#34;&gt;/* cached result set */&lt;/span&gt;
  MYSQL_ROWS     *data_cursor;         &lt;span style=&#34;color:#228b22&#34;&gt;/* current row in cached result */&lt;/span&gt;
  &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    mysql_stmt_fetch() calls this function to fetch one row (it&amp;#39;s different
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    for buffered, unbuffered and cursor fetch).
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;            (*read_row_func)(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_stmt *stmt, 
                                  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; **row);
  &lt;span style=&#34;color:#228b22&#34;&gt;/* copy of mysql-&amp;gt;affected_rows after statement execution */&lt;/span&gt;
  my_ulonglong   affected_rows;
  my_ulonglong   insert_id;            &lt;span style=&#34;color:#228b22&#34;&gt;/* copy of mysql-&amp;gt;insert_id */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt;	 stmt_id;	       &lt;span style=&#34;color:#228b22&#34;&gt;/* Id for prepared statement */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt;  flags;                &lt;span style=&#34;color:#228b22&#34;&gt;/* i.e. type of cursor to open */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt;  prefetch_rows;        &lt;span style=&#34;color:#228b22&#34;&gt;/* number of rows per one COM_FETCH */&lt;/span&gt;
  &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    Copied from mysql-&amp;gt;server_status after execute/fetch to know
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    server-side cursor status for this statement.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;   server_status;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;	 last_errno;	       &lt;span style=&#34;color:#228b22&#34;&gt;/* error code */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;   param_count;          &lt;span style=&#34;color:#228b22&#34;&gt;/* input parameter count */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;   field_count;          &lt;span style=&#34;color:#228b22&#34;&gt;/* number of columns in result set */&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; enum_mysql_stmt_state state;    &lt;span style=&#34;color:#228b22&#34;&gt;/* statement state */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;		 last_error[MYSQL_ERRMSG_SIZE]; &lt;span style=&#34;color:#228b22&#34;&gt;/* error message */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;		 sqlstate[SQLSTATE_LENGTH+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
  &lt;span style=&#34;color:#228b22&#34;&gt;/* Types of input parameters should be sent to server */&lt;/span&gt;
  my_bool        send_types_to_server;
  my_bool        bind_param_done;      &lt;span style=&#34;color:#228b22&#34;&gt;/* input buffers were supplied */&lt;/span&gt;
  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;  bind_result_done;     &lt;span style=&#34;color:#228b22&#34;&gt;/* output buffers were supplied */&lt;/span&gt;
  &lt;span style=&#34;color:#228b22&#34;&gt;/* mysql_stmt_close() had to cancel this result */&lt;/span&gt;
  my_bool       unbuffered_fetch_cancelled;  
  &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    Is set to true if we need to calculate field-&amp;gt;max_length for 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    metadata fields when doing mysql_stmt_store_result.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  */&lt;/span&gt;
  my_bool       update_max_length;     
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; st_mysql_stmt_extension *extension;
} MYSQL_STMT;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; enum_stmt_attr_type
{
  &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    When doing mysql_stmt_store_result calculate max_length attribute
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    of statement metadata. This is to be consistent with the old API, 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    where this was done automatically.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    In the new API we do that only by request because it slows down
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    mysql_stmt_store_result sufficiently.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  */&lt;/span&gt;
  STMT_ATTR_UPDATE_MAX_LENGTH,
  &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    unsigned long with combination of cursor flags (read only, for update,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    etc)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  */&lt;/span&gt;
  STMT_ATTR_CURSOR_TYPE,
  &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    Amount of rows to retrieve from server per one fetch if using cursors.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    Accepts unsigned long attribute in the range 1 - ulong_max
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;  */&lt;/span&gt;
  STMT_ATTR_PREFETCH_ROWS
};
  
  
MYSQL_STMT * STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_init&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_prepare&lt;/span&gt;(MYSQL_STMT *stmt, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *query,
                               &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; length);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_execute&lt;/span&gt;(MYSQL_STMT *stmt);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_fetch&lt;/span&gt;(MYSQL_STMT *stmt);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_fetch_column&lt;/span&gt;(MYSQL_STMT *stmt, MYSQL_BIND *bind_arg, 
                                    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; column,
                                    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; offset);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_store_result&lt;/span&gt;(MYSQL_STMT *stmt);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_param_count&lt;/span&gt;(MYSQL_STMT * stmt);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_attr_set&lt;/span&gt;(MYSQL_STMT *stmt,
                                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; enum_stmt_attr_type attr_type,
                                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *attr);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_attr_get&lt;/span&gt;(MYSQL_STMT *stmt,
                                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; enum_stmt_attr_type attr_type,
                                    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *attr);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_bind_param&lt;/span&gt;(MYSQL_STMT * stmt, MYSQL_BIND * bnd);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_bind_result&lt;/span&gt;(MYSQL_STMT * stmt, MYSQL_BIND * bnd);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_close&lt;/span&gt;(MYSQL_STMT * stmt);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_reset&lt;/span&gt;(MYSQL_STMT * stmt);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_free_result&lt;/span&gt;(MYSQL_STMT *stmt);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_send_long_data&lt;/span&gt;(MYSQL_STMT *stmt, 
                                          &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; param_number,
                                          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *data, 
                                          &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; length);
MYSQL_RES *STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_result_metadata&lt;/span&gt;(MYSQL_STMT *stmt);
MYSQL_RES *STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_param_metadata&lt;/span&gt;(MYSQL_STMT *stmt);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_errno&lt;/span&gt;(MYSQL_STMT * stmt);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_error&lt;/span&gt;(MYSQL_STMT * stmt);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_sqlstate&lt;/span&gt;(MYSQL_STMT * stmt);
MYSQL_ROW_OFFSET STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_row_seek&lt;/span&gt;(MYSQL_STMT *stmt, 
                                             MYSQL_ROW_OFFSET offset);
MYSQL_ROW_OFFSET STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_row_tell&lt;/span&gt;(MYSQL_STMT *stmt);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_data_seek&lt;/span&gt;(MYSQL_STMT *stmt, my_ulonglong offset);
my_ulonglong STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_num_rows&lt;/span&gt;(MYSQL_STMT *stmt);
my_ulonglong STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_affected_rows&lt;/span&gt;(MYSQL_STMT *stmt);
my_ulonglong STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_insert_id&lt;/span&gt;(MYSQL_STMT *stmt);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_field_count&lt;/span&gt;(MYSQL_STMT *stmt);
  
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_commit&lt;/span&gt;(MYSQL * mysql);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_rollback&lt;/span&gt;(MYSQL * mysql);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_autocommit&lt;/span&gt;(MYSQL * mysql, my_bool auto_mode);
my_bool STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_more_results&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_next_result&lt;/span&gt;(MYSQL *mysql);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_stmt_next_result&lt;/span&gt;(MYSQL_STMT *stmt);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; STDCALL &lt;span style=&#34;color:#008b45&#34;&gt;mysql_close&lt;/span&gt;(MYSQL *sock);
  
  
&lt;span style=&#34;color:#228b22&#34;&gt;/* status return codes */&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#define MYSQL_NO_DATA        100
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define MYSQL_DATA_TRUNCATED 101
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#define mysql_reload(mysql) mysql_refresh((mysql),REFRESH_GRANT)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#define HAVE_MYSQL_REAL_CONNECT
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef	__cplusplus
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* _mysql_h */&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/mysql/mysql.c&#34;&gt;例子代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;MYSQL *conn;
MYSQL_RES *res;
MYSQL_ROW row;
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; server[] = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; user[] = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;gongluck&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; password[] = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; database[] = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;;
  
conn = mysql_init(&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (mysql_real_connect(conn, server, user, password, database, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;))
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, mysql_error(conn));
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; sql[&lt;span style=&#34;color:#b452cd&#34;&gt;128&lt;/span&gt;] = {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;};
sprintf(sql, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;insert into user_info(`name`,title)values(&amp;#39;gongluck&amp;#39;, &amp;#39;test&amp;#39;);&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (mysql_query(conn, sql))
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, mysql_error(conn));
}
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (mysql_query(conn, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;select * from user_info&amp;#34;&lt;/span&gt;))
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, mysql_error(conn));
}
  
res = mysql_use_result(conn);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; ((row = mysql_fetch_row(res)) != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
{
     printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, row[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;]);
     printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, row[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]);
     printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, row[&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;]);
}
  
mysql_free_result(res);
mysql_close(conn);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2mysql事务索引存储引擎&#34;&gt;2.MySQL事务、索引、存储引擎&lt;/h3&gt;
&lt;h4 id=&#34;21-mysql事务&#34;&gt;2.1 MySQL事务&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在MySQL中只有使用了Innodb数据库引擎的数据库或表才支持事务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务处理可以用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务用来管理insert,update,delete语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务四大特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性（Atomicity，或称不可分割性）&lt;/li&gt;
&lt;li&gt;一致性（Consistency）&lt;/li&gt;
&lt;li&gt;隔离性（Isolation，又称独立性）&lt;/li&gt;
&lt;li&gt;持久性（Durability）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按照锁的粒度把数据库锁分为行级锁(INNODB引擎)、表级锁(MYISAM引擎)和页级锁(BDB引擎 )。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行级锁
&lt;ul&gt;
&lt;li&gt;行级锁是Mysql中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。&lt;/li&gt;
&lt;li&gt;行级锁能大大减少数据库操作的冲突。&lt;/li&gt;
&lt;li&gt;其加锁粒度最小，但加锁的开销也最大。&lt;/li&gt;
&lt;li&gt;行级锁分为共享锁和排他锁。&lt;/li&gt;
&lt;li&gt;特点：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;表级锁
&lt;ul&gt;
&lt;li&gt;表级锁是MySQL中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分 MySQL引擎支持。&lt;/li&gt;
&lt;li&gt;最常使用的MYISAM与INNODB都支持表级锁定。&lt;/li&gt;
&lt;li&gt;表级锁定分为表共享读锁（共享锁）与表独占写锁 （排他锁）。&lt;/li&gt;
&lt;li&gt;特点：开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;页级锁
&lt;ul&gt;
&lt;li&gt;页级锁是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。&lt;/li&gt;
&lt;li&gt;表级锁速度快，但冲突多，行级冲突少，但速度慢。 所以取了折衷的页级，一次锁定相邻的一组记录。&lt;/li&gt;
&lt;li&gt;BDB支持页级锁&lt;/li&gt;
&lt;li&gt;特点：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-mysql索引&#34;&gt;2.2 MySQL索引&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根据存储分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-树索引&lt;/li&gt;
&lt;li&gt;哈希索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据用途分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通索引&lt;/li&gt;
&lt;li&gt;唯一性索引&lt;/li&gt;
&lt;li&gt;主键索引&lt;/li&gt;
&lt;li&gt;空间索引&lt;/li&gt;
&lt;li&gt;全文索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引的实现原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。&lt;/li&gt;
&lt;li&gt;InnoDB也使用B+Tree作为索引结构，InnoDB的数据文件本身就是索引文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;23-mysql存储引擎&#34;&gt;2.3 MySQL存储引擎&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.png?raw=true&#34; alt=&#34;MySQL存储引擎&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建表指定存储引擎（默认InnoDB）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; `test`(`id` &lt;span style=&#34;color:#658b00&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT) ENGINE = InnoDB; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改数据表命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;alter&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt; test engine = MyISAM;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InnoDB&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所有的数据按照主键来组织。数据和索引放在一块，都位于B+数的叶子节点上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InnoDB存储引擎在磁盘中存放的对应的表的磁盘文件有*.frm*、*.ibd*这两个文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;frm文件是存放表结构，表的定义信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ibd文件是存放表中的数据、索引信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MyISAM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主键索引的叶子节点只存放数据在物理磁盘上的指针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MyISAM索引文件在数据库中存放的对应表的磁盘文件有*.frm*、*.MYD*、*.MYI*结尾的三个文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;frm文件是存放的表结构，表的定义信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MYD文件是存放着表中的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MYI文件存放着表的索引信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3nginx反向代理负载均衡配置&#34;&gt;3.Nginx反向代理负载均衡配置&lt;/h3&gt;
&lt;h4 id=&#34;31-安装编译&#34;&gt;3.1 安装编译&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 安装依赖&lt;/span&gt;
sudo apt-get update
sudo apt-get install build-essential libtool -y
sudo apt-get install libpcre3 libpcre3-dev -y
sudo apt-get install zlib1g-dev -y
sudo apt-get install openssl -y
&lt;span style=&#34;color:#228b22&#34;&gt;#下载nginx&lt;/span&gt;
wget http://nginx.org/download/nginx-1.19.0.tar.gz
tar zxvf nginx-1.19.0.tar.gz
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; nginx-1.19.0/
&lt;span style=&#34;color:#228b22&#34;&gt;# 配置&lt;/span&gt;
./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_gzip_static_module --with-http_secure_link_module --with-http_stub_status_module --with-stream --with-pcre &lt;span style=&#34;color:#228b22&#34;&gt;#--with-zlib --with-openssl&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 编译&lt;/span&gt;
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 安装&lt;/span&gt;
sudo make install
&lt;span style=&#34;color:#228b22&#34;&gt;# 启动&lt;/span&gt;
sudo /usr/local/nginx/sbin/nginx -c test.conf
&lt;span style=&#34;color:#228b22&#34;&gt;# 停止&lt;/span&gt;
sudo /usr/local/nginx/sbin/nginx -s stop
&lt;span style=&#34;color:#228b22&#34;&gt;# 重新加载配置文件&lt;/span&gt;
sudo /usr/local/nginx/sbin/nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;32-配置文件&#34;&gt;3.2 配置文件&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;worker_processes&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;;&lt;span style=&#34;color:#228b22&#34;&gt;#工作进程数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;events&lt;/span&gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;worker_connections&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1024&lt;/span&gt;;&lt;span style=&#34;color:#228b22&#34;&gt;#单个工作进程可以允许同时建立外部连接的数量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#228b22&#34;&gt;#设定http服务器，利用它的反向代理功能提供负载均衡支持
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;http&lt;/span&gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;#负载均衡配置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;test&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;#weigth参数表示权值，权值越高被分配到的几率越大。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;www.baidu.com&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;weight=2&lt;/span&gt;;
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;www.163.com&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;weight=1&lt;/span&gt;;
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;www.example7.com&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;weight=1&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;server&lt;/span&gt; {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;;
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;localhost&lt;/span&gt;;
		
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;client_max_body_size&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;100m&lt;/span&gt;;
		
        &lt;span style=&#34;color:#228b22&#34;&gt;#反向代理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;/&lt;/span&gt; {
&lt;span style=&#34;color:#228b22&#34;&gt;#			root /usr/local/nginx/html/;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#			proxy_pass http://172.20.106.204;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;http://test&lt;/span&gt;;
			
&lt;span style=&#34;color:#228b22&#34;&gt;#			proxy_redirect   off;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;Host&lt;/span&gt;             &lt;span style=&#34;color:#cd5555&#34;&gt;www.example7.com&lt;/span&gt;;
&lt;span style=&#34;color:#228b22&#34;&gt;#			proxy_set_header X-Real-IP        $remote_addr;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#			proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		}

		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;/images/&lt;/span&gt; {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;/usr/local/nginx/&lt;/span&gt;;&lt;span style=&#34;color:#228b22&#34;&gt;#访问/usr/local/nginx/images/
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		}
		
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;location&lt;/span&gt; ~ &lt;span style=&#34;color:#1c7e71&#34;&gt;\.(mp3|mp4)&lt;/span&gt; {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;/usr/local/nginx/media/&lt;/span&gt;;&lt;span style=&#34;color:#228b22&#34;&gt;#访问/usr/local/nginx/media/
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		}	
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4http和restful&#34;&gt;4.HTTP和Restful&lt;/h3&gt;
&lt;h4 id=&#34;41-http&#34;&gt;4.1 Http&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/http%E5%92%8Chttps.png?raw=true&#34; alt=&#34;http和https&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTTP协议，即超文本传输协议（Hypertext transfer protocol）。是一种详细规定了浏览器和万维网（WWW = World Wide Web）服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议，可以传输文本，图片，视频等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP协议作为TCP/IP模型中应用层的协议也不例外。HTTP 协议通常承载于TCP协议之 上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP默认的端口号为 80，HTTPS的端口号为443。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP0.9和1.0使用非持续连接：限制每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答后，即断开连接。HTTP1.1使用持续连接：不必为每个web对象创建一个新的连接，一个连接可以传送多个对象，采用这种方式可以节省传输时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发 送。客户端以及服务器指定使用适合的MIME-type内容类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处 理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP1.0定义了三种请求方法: GET、POST和HEAD方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP1.1新增了六种请求方法: OPTIONS、PUT、PATCH、DELETE、TRACE和CONNECT方法。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GET&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;请求指定的页面信息，并返回实体主体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HEAD&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;POST&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。 数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PUT&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从客户端向服务器传送的数据取代指定的文档的内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DELETE&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;请求服务器删除指定的页面。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CONNECT&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OPTIONS&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;允许客户端查看服务器的性能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TRACE&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;回显服务器收到的请求，主要用于测试或诊断。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PATCH&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是对 PUT 方法的补充，用来对已知资源进行局部更新。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP响应头信息&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;应答头&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Allow&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;服务器支持哪些请求方法（如GET、POST等）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Content-Encoding&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Content-Length&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表示内容长度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Content-Type&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式 地指定为text/html。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Location&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表示客户应当到哪里去提取文档。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Set-Cookie&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;设置和页面关联的Cookie。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;42-restful&#34;&gt;4.2 Restful&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征）性状态转移。 它首次出现在2000年Roy Fielding的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。 他在论文中提到：&amp;ldquo;我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。&amp;rdquo; 如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。&lt;/li&gt;
&lt;li&gt;REST本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用Web的现有特征和能力，更好地使用现有Web标准中的一些准则和约束。虽然REST本身受Web技术的影响很深，但是理论上REST架构风格并不是绑定在HTTP上，只不过目前HTTP是唯一与REST相关的实例。所以我们这里描述的REST也是通过HTTP实现的REST。&lt;/li&gt;
&lt;li&gt;RESTful架构应该遵循统一接口原则，统一接口包含了一组受限的预定义的操作，不论什么样的资源，都是通过使用相同的接口进行资源的访问。接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。&lt;/li&gt;
&lt;li&gt;如果按照HTTP方法的语义来暴露资源，那么接口将会拥有安全性和幂等性的特性，例如GET和HEAD请求都是安全的，无论请求多少次，都不会改变服务器状态。而GET、HEAD、PUT和DELETE请求都是幂等的，无论对资源操作多少次，结果总是一样的，后面的请求并不会产生比第一次更多的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5redis操作和编程&#34;&gt;5.Redis操作和编程&lt;/h3&gt;
&lt;h4 id=&#34;51-redis操作&#34;&gt;5.1 Redis操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;REmote DIctionary Server（Redis）是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。它通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 下载源码&lt;/span&gt;
wget http://download.redis.io/releases/redis-6.0.0.tar.gz
tar zxvf redis-6.0.0.tar.gz
&lt;span style=&#34;color:#228b22&#34;&gt;# 编译&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; redis-6.0.0/
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# 安装（默认安装到/usr/local/bin/目录）&lt;/span&gt;
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;redis-server -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;redis-server redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redis-cli&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;连接&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;redis-cli -h 127.0.0.1 -p &lt;span style=&#34;color:#b452cd&#34;&gt;6379&lt;/span&gt; -a &lt;span style=&#34;color:#b452cd&#34;&gt;123456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;停止服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;redis-cli -h 127.0.0.1 -p &lt;span style=&#34;color:#b452cd&#34;&gt;6379&lt;/span&gt; shutdown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内部命令&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;命令&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DEL key&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;该命令用于在key存在时删除 key。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DUMP key&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;序列化给定key，并返回被序列化的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXISTS key&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;检查给定key是否存在。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXPIRE key seconds&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;为给定key设置过期时间，以秒计。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXPIREAT key timestamp&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXPIREAT的作用和EXPIRE类似，都用于为key设置过期时间。不同在于EXPIREAT命令接受的时间参数是UNIX时间戳(unix timestamp)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PEXPIRE key milliseconds&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;设置key的过期时间以毫秒计。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PEXPIREAT key milliseconds-timestamp&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;设置key过期时间的时间戳(unix timestamp) 以毫秒计。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;KEYS pattern&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;查找所有符合给定模式( pattern)的key。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MOVE key db&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将当前数据库的key移动到给定的数据库db当中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PERSIST key&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;移除key的过期时间，key将持久保持。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PTTL key&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;以毫秒为单位返回key的剩余的过期时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TTL key&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;以秒为单位，返回给定key的剩余生存时间(TTL, time to live)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RANDOMKEY&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从当前数据库中随机返回一个key。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RENAME key newkey&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;修改key的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RENAMENX key newkey&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;仅当newkey不存在时，将key改名为newkey。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TYPE key&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;返回key所储存的值的类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redis基本数据结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png?raw=true&#34; alt=&#34;redis基本数据结构&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;52-hiredis编程&#34;&gt;5.2 hiredis编程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编译安装hiredis&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; deps/hiredis
make -j &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;
sudo make install
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/redis/hiredis.c&#34;&gt;例子代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 连接Redis服务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;redisContext *context = redisConnect(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;6379&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (context == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt; || context-&amp;gt;err)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (context)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, context-&amp;gt;errstr);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redisConnect error&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    }
    exit(EXIT_FAILURE);
}
printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-----------------connect success--------------------&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// REDIS_REPLY_STRING == 1 :返回值是字符串,字符串储存在redis-&amp;gt;str当中,字符串长度为redis-&amp;gt;len。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// REDIS_REPLY_ARRAY == 2 :返回值是数组,数组大小存在redis-&amp;gt;elements里面,数组值存储在redis-&amp;gt;element[i]里面。数组里面存储的是指向redisReply的指针,数组里面的返回值可以通过redis-&amp;gt;element[i]-&amp;gt;str来访问,数组的结果里全是type==REDIS_REPLY_STRING的redisReply对象指针。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// REDIS_REPLY_INTEGER == 3 :返回值为整数long long。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// REDIS_REPLY_NIL == 4 :返回值为空表示执行结果为空。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// REDIS_REPLY_STATUS == 5 :返回命令执行的状态,比如set foo bar返回的状态为OK,存储在str当中reply-&amp;gt;str == &amp;#34;OK&amp;#34;。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// REDIS_REPLY_ERROR == 6 :命令执行错误,错误信息存放在reply-&amp;gt;str当中。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;// 授权
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;redisReply *reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;auth gongluck&amp;#34;&lt;/span&gt;);
printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;type : %d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;type);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_STATUS)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;auth ok&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_ERROR)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;auth err : %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;str);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// Set Key Value
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *key = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;str&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *val = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;;
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;SET %s %s&amp;#34;&lt;/span&gt;, key, val);
printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;type : %d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;type);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_STATUS)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;SET %s %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, key, val);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// GET Key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GET %s&amp;#34;&lt;/span&gt;, key);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_STRING)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GET str %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;str);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GET len %ld&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;len);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// APPEND key value
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *append = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; I am your GOD&amp;#34;&lt;/span&gt;;
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;APPEND %s %s&amp;#34;&lt;/span&gt;, key, append);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_INTEGER)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;APPEND %s %s &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, key, append);
}
freeReplyObject(reply);
  
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GET %s&amp;#34;&lt;/span&gt;, key);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_STRING)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GET %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;str);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// INCR key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;INCR counter&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_INTEGER)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;INCR counter %lld&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;integer);
}
freeReplyObject(reply);
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;INCR counter&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_INTEGER)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;INCR counter %lld&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;integer);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// DECR key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DECR counter&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_INTEGER)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DECR counter %lld&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;integer);
}
freeReplyObject(reply);
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DECR counter&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_INTEGER)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DECR counter %lld&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;integer);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// DECRBY key decrement
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DECRBY counter 5&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_INTEGER)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DECRBY counter %lld&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;integer);
}
freeReplyObject(reply);
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DECRBY counter 5&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_INTEGER)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DECRBY counter %lld&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;integer);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// INCRBY key increment
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;INCRBY counter 5&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_INTEGER)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;INCRBY counter %lld&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;integer);
}
freeReplyObject(reply);
  
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;INCRBY counter 5&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_INTEGER)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;INCRBY counter %lld&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;integer);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// GETRANGE key start end
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GETRANGE str 0 5&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_STRING)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GETRANGE %s %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, key, reply-&amp;gt;str);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;// GETSET key value
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GETSET %s %s&amp;#34;&lt;/span&gt;, key, val);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_STRING)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GETSET %s %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, key, reply-&amp;gt;str);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*INCRBYFLOAT key increment*/&lt;/span&gt;
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;INCRBYFLOAT f 2.1&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_STRING)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;INCRBYFLOAT counter %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;str);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*MSET key value [key value ...]*/&lt;/span&gt;
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;MSET k1 hello k2 world k3 good&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_STATUS)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;MSET k1 hello k2 world k3 good&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*MGET key [key ...]*/&lt;/span&gt;
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;MGET k1 k2 k3&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_ARRAY)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;MGET k1  k2  k3 &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    redisReply **pReply = reply-&amp;gt;element;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    size_t len = reply-&amp;gt;elements;
    &lt;span style=&#34;color:#228b22&#34;&gt;//hello world good
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (; i &amp;lt; len; ++i)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s &amp;#34;&lt;/span&gt;, pReply[i]-&amp;gt;str);
    }
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*STRLEN key*/&lt;/span&gt;
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;STRLEN str&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_INTEGER)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;STRLEN str %lld &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, reply-&amp;gt;integer);
}
freeReplyObject(reply);
  
&lt;span style=&#34;color:#228b22&#34;&gt;/*SETEX key seconds value*/&lt;/span&gt;
reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;SETEX s 10 10seconds&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_STATUS)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;SETEX s 10 10seconds&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    freeReplyObject(reply);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (i++ &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;)
    {
        reply = redisCommand(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GET s&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_STRING)
        {
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d s %s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, i, reply-&amp;gt;str);
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (reply-&amp;gt;type == REDIS_REPLY_NIL)
        {
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d s nil&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, i);
        }
        freeReplyObject(reply);
        sleep(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    }
}
  
redisFree(context);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; EXIT_SUCCESS;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6mongodb操作和编程&#34;&gt;6.MongoDB操作和编程&lt;/h3&gt;
&lt;h4 id=&#34;61-mongodb操作&#34;&gt;6.1 MongoDB操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MongoDB概念&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;SQL术语/概念&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;MongoDB术语/概念&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;解释/说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;database&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;database&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;table&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;collection&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据库表/集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;row&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;document&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据记录行/文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;column&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;field&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据字段/域&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;index&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;index&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;table joins&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表连接，MongoDB不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;primary key&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;primary key&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;主键，MongoDB自动将_id字段设置为主键&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装MongoDB&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1804-4.4.1.tgz
tar -zxvf mongodb-linux-x86_64-ubuntu1804-4.4.1.tgz 
sudo mv mongodb-linux-x86_64-ubuntu1804-4.4.1 /usr/local/mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动MongoDB&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MongoDB的数据存储在data目录的db目录下，但是这个目录在安装过程不会自动创建，所以需要手动创建data目录，并在data目录中创建db目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在命令行中执行mongo安装目录中的bin目录执行mongod命令来启动mongdb服务。如果数据库目录不是/data/db，可以通过&amp;ndash;dbpath来指定。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;/usr/local/mongodb/bin/mongod --dbpath=/data/db --bind_ip=0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB后台管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MongoDB Shell是MongoDB自带的交互式Javascript shell，用来对MongoDB进行操作和管理的交互式环境。它默认会链接到test文档（数据库）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;/usr/local/mongodb/bin/mongo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示所有数据的列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;show&lt;/span&gt; dbs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示当前数据库对象或集合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（创建）连接到一个指定的数据库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;use gongluck
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;db.gongluck.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;gongluck&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除当前数据库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;db.dropDatabase()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建集合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;db.createCollection(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看已有集合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;show&lt;/span&gt; collections
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除集合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;db.test.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;drop&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入文档&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;db.test.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;gongluck&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;socre&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看已插入文档&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;db.test.find().pretty()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新文档&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;db.test.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;gongluck&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{$&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;set&lt;/span&gt;:&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;updated&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}}&lt;/span&gt;, &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{&lt;/span&gt;multi:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}&lt;/span&gt;)
db.test.save(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;:ObjectId(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;5fafd5407f51c6334abca881&amp;#34;&lt;/span&gt;),&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;gongluck&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;socre&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除文档&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;db.test.remove(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;gongluck&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}&lt;/span&gt;)
db.test.remove()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建索引&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;# &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;升序&lt;/span&gt;,-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;降序&lt;/span&gt;
db.test.createIndex(&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;score&amp;#34;&lt;/span&gt;:-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;62-mongodb编程&#34;&gt;6.2 MongoDB编程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编译mongo-c-driver&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget https://github.com/mongodb/mongo-c-driver/releases/download/1.17.2/mongo-c-driver-1.17.2.tar.gz
tar -zxvf mongo-c-driver-1.17.2.tar.gz
mongo-c-driver-1.17.2/
mkdir cmake-build
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; cmake-build
cmake -DENABLE_AUTOMATIC_INIT_AND_CLEANUP=OFF ..
cmake --build .
sudo cmake --build . --target install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/mongodb/mongodb.c&#34;&gt;例子代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//gcc mongodb.c -I/usr/local/include/libmongoc-1.0 -I/usr/local/include/libbson-1.0/ -lmongoc-1.0 -lbson-1.0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;bson.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;mongoc.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    mongoc_client_t *client;
    mongoc_collection_t *collection;
    bson_t *insert;
    bson_error_t error;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;//初始化libmongoc驱动
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    mongoc_init();
      
    &lt;span style=&#34;color:#228b22&#34;&gt;//创建连接对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    client = mongoc_client_new(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mongodb://localhost:27017&amp;#34;&lt;/span&gt;);
      
    &lt;span style=&#34;color:#228b22&#34;&gt;//获取指定数据库和集合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    collection = mongoc_client_get_collection(client, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;gongluck&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;);
      
    &lt;span style=&#34;color:#228b22&#34;&gt;//字段为hello，值为world字符串
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    insert = BCON_NEW(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, BCON_UTF8(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;));
      
    &lt;span style=&#34;color:#228b22&#34;&gt;//插入文档
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!mongoc_collection_insert(collection, MONGOC_INSERT_NONE, insert, &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;, &amp;amp;error))
    {
        fprintf(stderr, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, error.message);
    }
      
    bson_destroy(insert);
      
    mongoc_collection_destroy(collection); &lt;span style=&#34;color:#228b22&#34;&gt;//释放表对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    mongoc_client_destroy(client);         &lt;span style=&#34;color:#228b22&#34;&gt;//释放连接对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    mongoc_cleanup();                      &lt;span style=&#34;color:#228b22&#34;&gt;//释放libmongoc驱动
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gongluck.github.io/linux/%E5%90%8E%E5%8F%B0%E7%BB%84%E4%BB%B6%E7%BC%96%E7%A8%8B%E4%B8%93%E6%A0%8F/ - </description>
        </item>
    
    
    
        <item>
        <title>算法与设计模式专栏</title>
        <link>https://gongluck.github.io/linux/%E7%AE%97%E6%B3%95%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%93%E6%A0%8F/</link>
        <pubDate>Mon, 30 Nov 2020 20:35:46 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/%E7%AE%97%E6%B3%95%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%93%E6%A0%8F/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/%E7%AE%97%E6%B3%95%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%93%E6%A0%8F/ -&lt;h2 id=&#34;一算法与设计模式专栏&#34;&gt;一、算法与设计模式专栏&lt;/h2&gt;
&lt;h3 id=&#34;0项目仓库&#34;&gt;0.项目仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP.git&#34;&gt;https://github.com/gongluck/CVIP.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1查找与排序kmp算法栈队列&#34;&gt;1.查找与排序/KMP算法，栈/队列&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/%E6%8E%92%E5%BA%8F%E6%AF%94%E8%BE%83.png?raw=true&#34; alt=&#34;排序比较&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;11-希尔排序&#34;&gt;1.1 希尔排序&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。&lt;/p&gt;
&lt;p&gt;希尔排序是基于插入排序的以下两点性质而提出改进方法的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；&lt;/li&gt;
&lt;li&gt;但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录&amp;quot;基本有序&amp;quot;时，再对全体记录进行依次直接插入排序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择一个增量序列 t1，t2，……，tk，其中 ti &amp;gt; tj, tk = 1；&lt;/li&gt;
&lt;li&gt;按增量序列个数 k，对序列进行 k 趟排序；&lt;/li&gt;
&lt;li&gt;每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/sort/sort.c&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;shell_sort&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; *data, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; length)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; gap = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, j = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; temp = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 外层分组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (gap = length / &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;; gap &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; gap /= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 插入排序
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = gap; i &amp;lt; length; ++i)
        {
            temp = data[i];
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (j = i - gap; j &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; temp &amp;lt; data[j]; j -= gap)
            {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 将data[j]右移
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                data[j + gap] = data[j];
            }
            &lt;span style=&#34;color:#228b22&#34;&gt;// 将temp(开始的data[i])放到循环跳出的地方
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            data[j + gap] = temp;
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-归并排序&#34;&gt;1.2 归并排序&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自下而上的迭代；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；&lt;/li&gt;
&lt;li&gt;设定两个指针，最初位置分别为两个已经排序序列的起始位置；&lt;/li&gt;
&lt;li&gt;比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；&lt;/li&gt;
&lt;li&gt;重复步骤 3 直到某一指针达到序列尾；&lt;/li&gt;
&lt;li&gt;将另一序列剩下的所有元素直接复制到合并序列尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/sort/sort.c&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; *data, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; *temp, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; start, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; middle, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; end)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = start, j = middle + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, k = start;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;lt;= middle &amp;amp;&amp;amp; j &amp;lt;= end)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (data[i] &amp;gt; data[j])
        {
            temp[k++] = data[j++];
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            temp[k++] = data[i++];
        }
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;lt;= middle)
    {
        temp[k++] = data[i++];
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (j &amp;lt;= end)
    {
        temp[k++] = data[j++];
    }
      
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = start; i &amp;lt;= end; i++)
    {
        data[i] = temp[i];
    }
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;merge_sort&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; *data, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; *temp, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; start, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; end)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; middle;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (start &amp;lt; end)
    {
        middle = start + (end - start) / &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
        merge_sort(data, temp, start, middle);
        merge_sort(data, temp, middle + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, end);
        merge(data, temp, start, middle, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;13-快速排序&#34;&gt;1.3 快速排序&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从数列中挑出一个元素，称为 &amp;ldquo;基准&amp;rdquo;（pivot）;&lt;/li&gt;
&lt;li&gt;重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；&lt;/li&gt;
&lt;li&gt;递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/sort/sort.c&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;quick&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; *data, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; left, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; right)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (left &amp;gt;= right)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = left;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = right;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 哨兵
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; key = data[left];
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;lt; j)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;lt; j &amp;amp;&amp;amp; key &amp;lt;= data[j])
        {
            j--;
        }
        data[i] = data[j];
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;lt; j &amp;amp;&amp;amp; key &amp;gt;= data[i])
        {
            i++;
        }
        data[j] = data[i];
    }
  
    data[i] = key;
    quick(data, left, i - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    quick(data, i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, right);
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;quick_sort&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; *data, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; length)
{
    quick(data, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, length - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;14-kmp算法&#34;&gt;1.4 KMP算法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Knuth-Morris-Pratt字符串查找算法&lt;/strong&gt;（简称为&lt;strong&gt;KMP算法&lt;/strong&gt;）可在一个&lt;strong&gt;主文本字符串&lt;/strong&gt;&lt;code&gt;S&lt;/code&gt;内查找一个&lt;strong&gt;词&lt;/strong&gt;&lt;code&gt;W&lt;/code&gt;的出现位置。此算法通过运用对这个词在不匹配时本身就包含足够的信息来确定下一个匹配将在哪里开始的发现，从而避免重新检查先前匹配的字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;部分匹配表&lt;/strong&gt;，又称为&lt;strong&gt;失配函数&lt;/strong&gt;，作用是让算法无需多次匹配&lt;code&gt;S&lt;/code&gt;中的任何字符。能够实现线性时间搜索的关键是在主串的一些字段中检查模式串的&lt;em&gt;初始字段&lt;/em&gt;，我们可以确切地知道在当前位置之前的一个潜在匹配的位置。换句话说，在不错过任何潜在匹配的情况下，我们&amp;quot;预搜索&amp;quot;这个模式串本身并将其译成一个包含所有可能失配的位置对应可以绕过最多无效字符的列表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于&lt;code&gt;W&lt;/code&gt;中的任何位置，我们都希望能够查询那个位置前（不包括那个位置）有可能的&lt;code&gt;W&lt;/code&gt;的最长初始字段的长度，而不是从&lt;code&gt;W[0]&lt;/code&gt;开始失配的整个字段，这长度就是我们查找下一个匹配时回退的距离。因此&lt;code&gt;T[i]&lt;/code&gt;是&lt;code&gt;W&lt;/code&gt;的可能的&lt;em&gt;适当&lt;/em&gt;初始字段同时也是结束于&lt;code&gt;W[i - 1]&lt;/code&gt;的子串的最大长度。我们使空串长度是0。当一个失配出现在模式串的最开始，这是特殊情况（无法回退），我们设置&lt;code&gt;T[0] = -1&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/search/kmp.c&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;make_next&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *pattern, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; *next)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; q, k;&lt;span style=&#34;color:#228b22&#34;&gt;// k前缀下标，q后缀下标
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m = strlen(pattern);
  
    next[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (q = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, k = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; q &amp;lt; m; q++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (k &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; pattern[q] != pattern[k])
            k = next[k - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pattern[q] == pattern[k])
        {
            k++;
        }
  
        next[q] = k;
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// abcabc
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// next[0] = 0;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// q=1, k=0, pattern[q]:pattern[k] = b:a, next[1] = 0;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// q=2, k=0, pattern[q]:pattern[k] = c:a, next[2] = 0;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// q=3, k=0, pattern[q]:pattern[k] = a:a, k++, next[3] = 1;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// q=4, k=1, pattern[q]:pattern[k] = b:b, k++, next[4] = 2;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// q=5, k=2, pattern[q]:pattern[k] = c:c, k++, next[5] = 3;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// q=6, k=3, pattern[q]:pattern[k] = d:a, k=next[k-1] -&amp;gt; k=0; next[6] = 0;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;kmp&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *text, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *pattern, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; *next)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = strlen(text);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m = strlen(pattern);
    make_next(pattern, next);
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i, q;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, q = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (q &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; pattern[q] != text[i])
        {
            q = next[q - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
        }
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pattern[q] == text[i])
        {
            q++;
        }
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (q == m)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i - q + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2二叉树与红黑树&#34;&gt;2.二叉树与红黑树&lt;/h3&gt;
&lt;h4 id=&#34;21-二叉树&#34;&gt;2.1 二叉树&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;二叉树&lt;/strong&gt;是n(n&amp;gt;=0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树组成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二叉树特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点。&lt;/li&gt;
&lt;li&gt;左子树和右子树是有顺序的，次序不能任意颠倒。&lt;/li&gt;
&lt;li&gt;即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/tree/btree.c&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; KEY_VALUE;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#define BSTREE_ENTRY(name, type) \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    struct name                  \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    {                            \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;        struct type *left;       \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;        struct type *right;      \
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree_node
{
    KEY_VALUE data;
    BSTREE_ENTRY(, bstree_node)
    bst;
};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree_node *root;
};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree_node *&lt;span style=&#34;color:#008b45&#34;&gt;bstree_create_node&lt;/span&gt;(KEY_VALUE key)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree_node *node = (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree_node *)malloc(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree_node));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        assert(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    }
    node-&amp;gt;data = key;
    node-&amp;gt;bst.left = node-&amp;gt;bst.right = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; node;
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;bstree_insert&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree *T, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; key)
{
    assert(T != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (T-&amp;gt;root == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        T-&amp;gt;root = bstree_create_node(key);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree_node *node = T-&amp;gt;root;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree_node *tmp = T-&amp;gt;root;&lt;span style=&#34;color:#228b22&#34;&gt;//保存父节点
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (node != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        tmp = node;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (key &amp;lt; node-&amp;gt;data)
        {
            node = node-&amp;gt;bst.left;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            node = node-&amp;gt;bst.right;
        }
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (key &amp;lt; tmp-&amp;gt;data)
    {
        tmp-&amp;gt;bst.left = bstree_create_node(key);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        tmp-&amp;gt;bst.right = bstree_create_node(key);
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;bstree_traversal&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; bstree_node *node)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
  
    bstree_traversal(node-&amp;gt;bst.left);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%4d &amp;#34;&lt;/span&gt;, node-&amp;gt;data);
    bstree_traversal(node-&amp;gt;bst.right);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-红黑树&#34;&gt;2.2 红黑树&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/%E7%BA%A2%E9%BB%91%E6%A0%91.jpg?raw=true&#34; alt=&#34;红黑树&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;R-B Tree，全称是Red-Black Tree，又称为“红黑树”，它一种特殊的二叉查找树。红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个节点或者是黑色，或者是红色。&lt;/li&gt;
&lt;li&gt;根节点是黑色。&lt;/li&gt;
&lt;li&gt;每个叶子节点（NIL）是黑色。这里叶子节点，是指为空(NIL或NULL)的叶子节点！&lt;/li&gt;
&lt;li&gt;如果一个节点是红色的，则它的子节点必须是黑色的。&lt;/li&gt;
&lt;li&gt;从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/tree/rbtree.c&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define RED 1
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define BLACK 2
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; KEY_TYPE;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _rbtree_node
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; color;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _rbtree_node *right;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _rbtree_node *left;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _rbtree_node *parent;
    KEY_TYPE key;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *value;
} rbtree_node;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _rbtree
{
    rbtree_node *root;
    rbtree_node *nil;
} rbtree;
  
rbtree_node *&lt;span style=&#34;color:#008b45&#34;&gt;rbtree_mini&lt;/span&gt;(rbtree *T, rbtree_node *x)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (x-&amp;gt;left != T-&amp;gt;nil)
    {
        x = x-&amp;gt;left;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; x;
}
  
rbtree_node *&lt;span style=&#34;color:#008b45&#34;&gt;rbtree_maxi&lt;/span&gt;(rbtree *T, rbtree_node *x)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (x-&amp;gt;right != T-&amp;gt;nil)
    {
        x = x-&amp;gt;right;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; x;
}
  
rbtree_node *&lt;span style=&#34;color:#008b45&#34;&gt;rbtree_successor&lt;/span&gt;(rbtree *T, rbtree_node *x)
{
    rbtree_node *y = x-&amp;gt;parent;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x-&amp;gt;right != T-&amp;gt;nil)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; rbtree_mini(T, x-&amp;gt;right);
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; ((y != T-&amp;gt;nil) &amp;amp;&amp;amp; (x == y-&amp;gt;right))
    {
        x = y;
        y = y-&amp;gt;parent;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; y;
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;rbtree_left_rotate&lt;/span&gt;(rbtree *T, rbtree_node *x)
{
    rbtree_node *y = x-&amp;gt;right; &lt;span style=&#34;color:#228b22&#34;&gt;// x  --&amp;gt; y  ,  y --&amp;gt; x,   right --&amp;gt; left,  left --&amp;gt; right
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    x-&amp;gt;right = y-&amp;gt;left; &lt;span style=&#34;color:#228b22&#34;&gt;//1 1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y-&amp;gt;left != T-&amp;gt;nil)
    { &lt;span style=&#34;color:#228b22&#34;&gt;//1 2
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        y-&amp;gt;left-&amp;gt;parent = x;
    }
  
    y-&amp;gt;parent = x-&amp;gt;parent; &lt;span style=&#34;color:#228b22&#34;&gt;//1 3
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x-&amp;gt;parent == T-&amp;gt;nil)
    { &lt;span style=&#34;color:#228b22&#34;&gt;//1 4
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        T-&amp;gt;root = y;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x == x-&amp;gt;parent-&amp;gt;left)
    {
        x-&amp;gt;parent-&amp;gt;left = y;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        x-&amp;gt;parent-&amp;gt;right = y;
    }
  
    y-&amp;gt;left = x;   &lt;span style=&#34;color:#228b22&#34;&gt;//1 5
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    x-&amp;gt;parent = y; &lt;span style=&#34;color:#228b22&#34;&gt;//1 6
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;rbtree_right_rotate&lt;/span&gt;(rbtree *T, rbtree_node *y)
{
    rbtree_node *x = y-&amp;gt;left;
  
    y-&amp;gt;left = x-&amp;gt;right;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x-&amp;gt;right != T-&amp;gt;nil)
    {
        x-&amp;gt;right-&amp;gt;parent = y;
    }
  
    x-&amp;gt;parent = y-&amp;gt;parent;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y-&amp;gt;parent == T-&amp;gt;nil)
    {
        T-&amp;gt;root = x;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y == y-&amp;gt;parent-&amp;gt;right)
    {
        y-&amp;gt;parent-&amp;gt;right = x;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        y-&amp;gt;parent-&amp;gt;left = x;
    }
  
    x-&amp;gt;right = y;
    y-&amp;gt;parent = x;
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;rbtree_insert_fixup&lt;/span&gt;(rbtree *T, rbtree_node *z)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (z-&amp;gt;parent-&amp;gt;color == RED)
    { &lt;span style=&#34;color:#228b22&#34;&gt;//z ---&amp;gt; RED
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (z-&amp;gt;parent == z-&amp;gt;parent-&amp;gt;parent-&amp;gt;left)
        {
            rbtree_node *y = z-&amp;gt;parent-&amp;gt;parent-&amp;gt;right;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y-&amp;gt;color == RED)
            {
                z-&amp;gt;parent-&amp;gt;color = BLACK;
                y-&amp;gt;color = BLACK;
                z-&amp;gt;parent-&amp;gt;parent-&amp;gt;color = RED;
  
                z = z-&amp;gt;parent-&amp;gt;parent; &lt;span style=&#34;color:#228b22&#34;&gt;//z --&amp;gt; RED
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (z == z-&amp;gt;parent-&amp;gt;right)
                {
                    z = z-&amp;gt;parent;
                    rbtree_left_rotate(T, z);
                }
  
                z-&amp;gt;parent-&amp;gt;color = BLACK;
                z-&amp;gt;parent-&amp;gt;parent-&amp;gt;color = RED;
                rbtree_right_rotate(T, z-&amp;gt;parent-&amp;gt;parent);
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            rbtree_node *y = z-&amp;gt;parent-&amp;gt;parent-&amp;gt;left;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y-&amp;gt;color == RED)
            {
                z-&amp;gt;parent-&amp;gt;color = BLACK;
                y-&amp;gt;color = BLACK;
                z-&amp;gt;parent-&amp;gt;parent-&amp;gt;color = RED;
  
                z = z-&amp;gt;parent-&amp;gt;parent; &lt;span style=&#34;color:#228b22&#34;&gt;//z --&amp;gt; RED
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (z == z-&amp;gt;parent-&amp;gt;left)
                {
                    z = z-&amp;gt;parent;
                    rbtree_right_rotate(T, z);
                }
  
                z-&amp;gt;parent-&amp;gt;color = BLACK;
                z-&amp;gt;parent-&amp;gt;parent-&amp;gt;color = RED;
                rbtree_left_rotate(T, z-&amp;gt;parent-&amp;gt;parent);
            }
        }
    }
  
    T-&amp;gt;root-&amp;gt;color = BLACK;
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;rbtree_insert&lt;/span&gt;(rbtree *T, rbtree_node *z)
{
    rbtree_node *y = T-&amp;gt;nil;
    rbtree_node *x = T-&amp;gt;root;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (x != T-&amp;gt;nil)
    {
        y = x;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (z-&amp;gt;key &amp;lt; x-&amp;gt;key)
        {
            x = x-&amp;gt;left;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (z-&amp;gt;key &amp;gt; x-&amp;gt;key)
        {
            x = x-&amp;gt;right;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        { &lt;span style=&#34;color:#228b22&#34;&gt;//Exist
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
    }
  
    z-&amp;gt;parent = y;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y == T-&amp;gt;nil)
    {
        T-&amp;gt;root = z;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (z-&amp;gt;key &amp;lt; y-&amp;gt;key)
    {
        y-&amp;gt;left = z;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        y-&amp;gt;right = z;
    }
  
    z-&amp;gt;left = T-&amp;gt;nil;
    z-&amp;gt;right = T-&amp;gt;nil;
    z-&amp;gt;color = RED;
  
    rbtree_insert_fixup(T, z);
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;rbtree_delete_fixup&lt;/span&gt;(rbtree *T, rbtree_node *x)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; ((x != T-&amp;gt;root) &amp;amp;&amp;amp; (x-&amp;gt;color == BLACK))
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x == x-&amp;gt;parent-&amp;gt;left)
        {
            rbtree_node *w = x-&amp;gt;parent-&amp;gt;right;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (w-&amp;gt;color == RED)
            {
                w-&amp;gt;color = BLACK;
                x-&amp;gt;parent-&amp;gt;color = RED;
  
                rbtree_left_rotate(T, x-&amp;gt;parent);
                w = x-&amp;gt;parent-&amp;gt;right;
            }
  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((w-&amp;gt;left-&amp;gt;color == BLACK) &amp;amp;&amp;amp; (w-&amp;gt;right-&amp;gt;color == BLACK))
            {
                w-&amp;gt;color = RED;
                x = x-&amp;gt;parent;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (w-&amp;gt;right-&amp;gt;color == BLACK)
                {
                    w-&amp;gt;left-&amp;gt;color = BLACK;
                    w-&amp;gt;color = RED;
                    rbtree_right_rotate(T, w);
                    w = x-&amp;gt;parent-&amp;gt;right;
                }
  
                w-&amp;gt;color = x-&amp;gt;parent-&amp;gt;color;
                x-&amp;gt;parent-&amp;gt;color = BLACK;
                w-&amp;gt;right-&amp;gt;color = BLACK;
                rbtree_left_rotate(T, x-&amp;gt;parent);
  
                x = T-&amp;gt;root;
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            rbtree_node *w = x-&amp;gt;parent-&amp;gt;left;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (w-&amp;gt;color == RED)
            {
                w-&amp;gt;color = BLACK;
                x-&amp;gt;parent-&amp;gt;color = RED;
                rbtree_right_rotate(T, x-&amp;gt;parent);
                w = x-&amp;gt;parent-&amp;gt;left;
            }
  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((w-&amp;gt;left-&amp;gt;color == BLACK) &amp;amp;&amp;amp; (w-&amp;gt;right-&amp;gt;color == BLACK))
            {
                w-&amp;gt;color = RED;
                x = x-&amp;gt;parent;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (w-&amp;gt;left-&amp;gt;color == BLACK)
                {
                    w-&amp;gt;right-&amp;gt;color = BLACK;
                    w-&amp;gt;color = RED;
                    rbtree_left_rotate(T, w);
                    w = x-&amp;gt;parent-&amp;gt;left;
                }
  
                w-&amp;gt;color = x-&amp;gt;parent-&amp;gt;color;
                x-&amp;gt;parent-&amp;gt;color = BLACK;
                w-&amp;gt;left-&amp;gt;color = BLACK;
                rbtree_right_rotate(T, x-&amp;gt;parent);
  
                x = T-&amp;gt;root;
            }
        }
    }
  
    x-&amp;gt;color = BLACK;
}
  
rbtree_node *&lt;span style=&#34;color:#008b45&#34;&gt;rbtree_delete&lt;/span&gt;(rbtree *T, rbtree_node *z)
{
    rbtree_node *y = T-&amp;gt;nil;
    rbtree_node *x = T-&amp;gt;nil;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((z-&amp;gt;left == T-&amp;gt;nil) || (z-&amp;gt;right == T-&amp;gt;nil))
    {
        y = z;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        y = rbtree_successor(T, z);
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y-&amp;gt;left != T-&amp;gt;nil)
    {
        x = y-&amp;gt;left;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y-&amp;gt;right != T-&amp;gt;nil)
    {
        x = y-&amp;gt;right;
    }
  
    x-&amp;gt;parent = y-&amp;gt;parent;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y-&amp;gt;parent == T-&amp;gt;nil)
    {
        T-&amp;gt;root = x;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y == y-&amp;gt;parent-&amp;gt;left)
    {
        y-&amp;gt;parent-&amp;gt;left = x;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        y-&amp;gt;parent-&amp;gt;right = x;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y != z)
    {
        z-&amp;gt;key = y-&amp;gt;key;
        z-&amp;gt;value = y-&amp;gt;value;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y-&amp;gt;color == BLACK)
    {
        rbtree_delete_fixup(T, x);
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; y;
}
  
rbtree_node *&lt;span style=&#34;color:#008b45&#34;&gt;rbtree_search&lt;/span&gt;(rbtree *T, KEY_TYPE key)
{
    rbtree_node *node = T-&amp;gt;root;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (node != T-&amp;gt;nil)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (key &amp;lt; node-&amp;gt;key)
        {
            node = node-&amp;gt;left;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (key &amp;gt; node-&amp;gt;key)
        {
            node = node-&amp;gt;right;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; node;
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; T-&amp;gt;nil;
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;rbtree_traversal&lt;/span&gt;(rbtree *T, rbtree_node *node)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node != T-&amp;gt;nil)
    {
        rbtree_traversal(T, node-&amp;gt;left);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;key:%d, color:%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, node-&amp;gt;key, node-&amp;gt;color);
        rbtree_traversal(T, node-&amp;gt;right);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3b-树&#34;&gt;3.B-树&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/B%E6%A0%91.png?raw=true&#34; alt=&#34;B树&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;B树也称B-树，它是一颗多路平衡查找树。我们描述一颗B树时需要指定它的阶数，阶数表示了一个结点最多有多少个孩子结点，一般用字母m表示阶数。当m取2时，就是我们常见的二叉搜索树。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一颗m阶的B树定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个结点最多有m-1个关键字。&lt;/li&gt;
&lt;li&gt;根结点最少可以只有1个关键字。&lt;/li&gt;
&lt;li&gt;非根结点至少有Math.ceil(m/2)-1个关键字。&lt;/li&gt;
&lt;li&gt;每个结点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。&lt;/li&gt;
&lt;li&gt;所有叶子结点都位于同一层，或者说根结点到每个叶子结点的长度都相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/tree/b-tree.c&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define DEGREE 3
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; KEY_VALUE;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _btree_node
{
    KEY_VALUE *keys;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _btree_node **childrens;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; leaf;
} btree_node;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; _btree
{
    btree_node *root;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; t;
} btree;
  
btree_node *&lt;span style=&#34;color:#008b45&#34;&gt;btree_create_node&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; t, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; leaf)
{
    btree_node *node = (btree_node *)calloc(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(btree_node));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        assert(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
  
    node-&amp;gt;leaf = leaf;
    node-&amp;gt;keys = (KEY_VALUE *)calloc(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, (&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; * t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;) * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(KEY_VALUE));
    node-&amp;gt;childrens = (btree_node **)calloc(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, (&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; * t) * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(btree_node));
    node-&amp;gt;num = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; node;
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_destroy_node&lt;/span&gt;(btree_node *node)
{
    assert(node);
  
    free(node-&amp;gt;childrens);
    free(node-&amp;gt;keys);
    free(node);
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_create&lt;/span&gt;(btree *T, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; t)
{
    T-&amp;gt;t = t;
  
    btree_node *x = btree_create_node(t, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    T-&amp;gt;root = x;
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_split_child&lt;/span&gt;(btree *T, btree_node *x, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; t = T-&amp;gt;t;
  
    btree_node *y = x-&amp;gt;childrens[i];
    btree_node *z = btree_create_node(t, y-&amp;gt;leaf);
  
    z-&amp;gt;num = t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (j = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; j &amp;lt; t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; j++)
    {
        z-&amp;gt;keys[j] = y-&amp;gt;keys[j + t];
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (y-&amp;gt;leaf == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (j = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; j &amp;lt; t; j++)
        {
            z-&amp;gt;childrens[j] = y-&amp;gt;childrens[j + t];
        }
    }
  
    y-&amp;gt;num = t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (j = x-&amp;gt;num; j &amp;gt;= i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; j--)
    {
        x-&amp;gt;childrens[j + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = x-&amp;gt;childrens[j];
    }
  
    x-&amp;gt;childrens[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = z;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (j = x-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; j &amp;gt;= i; j--)
    {
        x-&amp;gt;keys[j + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = x-&amp;gt;keys[j];
    }
    x-&amp;gt;keys[i] = y-&amp;gt;keys[t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
    x-&amp;gt;num += &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_insert_nonfull&lt;/span&gt;(btree *T, btree_node *x, KEY_VALUE k)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = x-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x-&amp;gt;leaf == &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; x-&amp;gt;keys[i] &amp;gt; k)
        {
            x-&amp;gt;keys[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = x-&amp;gt;keys[i];
            i--;
        }
        x-&amp;gt;keys[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = k;
        x-&amp;gt;num += &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; x-&amp;gt;keys[i] &amp;gt; k)
            i--;
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x-&amp;gt;childrens[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]-&amp;gt;num == (&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; * (T-&amp;gt;t)) - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
        {
            btree_split_child(T, x, i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (k &amp;gt; x-&amp;gt;keys[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;])
                i++;
        }
  
        btree_insert_nonfull(T, x-&amp;gt;childrens[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;], k);
    }
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_insert&lt;/span&gt;(btree *T, KEY_VALUE key)
{
    &lt;span style=&#34;color:#228b22&#34;&gt;//int t = T-&amp;gt;t;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    btree_node *r = T-&amp;gt;root;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (r-&amp;gt;num == &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; * T-&amp;gt;t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        btree_node *node = btree_create_node(T-&amp;gt;t, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
        T-&amp;gt;root = node;
  
        node-&amp;gt;childrens[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] = r;
  
        btree_split_child(T, node, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
  
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node-&amp;gt;keys[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] &amp;lt; key)
            i++;
        btree_insert_nonfull(T, node-&amp;gt;childrens[i], key);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        btree_insert_nonfull(T, r, key);
    }
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_traverse&lt;/span&gt;(btree_node *x)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; x-&amp;gt;num; i++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x-&amp;gt;leaf == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
            btree_traverse(x-&amp;gt;childrens[i]);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%C &amp;#34;&lt;/span&gt;, x-&amp;gt;keys[i]);
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x-&amp;gt;leaf == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
        btree_traverse(x-&amp;gt;childrens[i]);
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_print&lt;/span&gt;(btree *T, btree_node *node, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; layer)
{
    btree_node *p = node;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (p)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;layer = %d keynum = %d is_leaf = %d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, layer, p-&amp;gt;num, p-&amp;gt;leaf);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; node-&amp;gt;num; i++)
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%c &amp;#34;&lt;/span&gt;, p-&amp;gt;keys[i]);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
  
        layer++;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt;= p-&amp;gt;num; i++)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (p-&amp;gt;childrens[i])
                btree_print(T, p-&amp;gt;childrens[i], layer);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;the tree is empty&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_bin_search&lt;/span&gt;(btree_node *node, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; low, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; high, KEY_VALUE key)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; mid;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (low &amp;gt; high || low &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; || high &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (low &amp;lt;= high)
    {
        mid = (low + high) / &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (key &amp;gt; node-&amp;gt;keys[mid])
        {
            low = mid + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            high = mid - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
        }
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; low;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;//{child[idx], key[idx], child[idx+1]}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_merge&lt;/span&gt;(btree *T, btree_node *node, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; idx)
{
    btree_node *left = node-&amp;gt;childrens[idx];
    btree_node *right = node-&amp;gt;childrens[idx + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/////data merge
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    left-&amp;gt;keys[T-&amp;gt;t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = node-&amp;gt;keys[idx];
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; T-&amp;gt;t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; i++)
    {
        left-&amp;gt;keys[T-&amp;gt;t + i] = right-&amp;gt;keys[i];
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!left-&amp;gt;leaf)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; T-&amp;gt;t; i++)
        {
            left-&amp;gt;childrens[T-&amp;gt;t + i] = right-&amp;gt;childrens[i];
        }
    }
    left-&amp;gt;num += T-&amp;gt;t;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;//destroy right
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    btree_destroy_node(right);
  
    &lt;span style=&#34;color:#228b22&#34;&gt;//node
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = idx + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; i &amp;lt; node-&amp;gt;num; i++)
    {
        node-&amp;gt;keys[i - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = node-&amp;gt;keys[i];
        node-&amp;gt;childrens[i] = node-&amp;gt;childrens[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
    }
    node-&amp;gt;childrens[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    node-&amp;gt;num -= &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node-&amp;gt;num == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        T-&amp;gt;root = left;
        btree_destroy_node(node);
    }
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_delete_key&lt;/span&gt;(btree *T, btree_node *node, KEY_VALUE key)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; idx = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, i;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (idx &amp;lt; node-&amp;gt;num &amp;amp;&amp;amp; key &amp;gt; node-&amp;gt;keys[idx])
    {
        idx++;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (idx &amp;lt; node-&amp;gt;num &amp;amp;&amp;amp; key == node-&amp;gt;keys[idx])
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node-&amp;gt;leaf)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = idx; i &amp;lt; node-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; i++)
            {
                node-&amp;gt;keys[i] = node-&amp;gt;keys[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
            }
  
            node-&amp;gt;keys[node-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
            node-&amp;gt;num--;
  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node-&amp;gt;num == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
            { &lt;span style=&#34;color:#228b22&#34;&gt;//root
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                free(node);
                T-&amp;gt;root = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
            }
  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node-&amp;gt;childrens[idx]-&amp;gt;num &amp;gt;= T-&amp;gt;t)
        {
            btree_node *left = node-&amp;gt;childrens[idx];
            node-&amp;gt;keys[idx] = left-&amp;gt;keys[left-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
  
            btree_delete_key(T, left, left-&amp;gt;keys[left-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]);
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (node-&amp;gt;childrens[idx + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]-&amp;gt;num &amp;gt;= T-&amp;gt;t)
        {
            btree_node *right = node-&amp;gt;childrens[idx + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
            node-&amp;gt;keys[idx] = right-&amp;gt;keys[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
  
            btree_delete_key(T, right, right-&amp;gt;keys[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;]);
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            btree_merge(T, node, idx);
            btree_delete_key(T, node-&amp;gt;childrens[idx], key);
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        btree_node *child = node-&amp;gt;childrens[idx];
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (child == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        {
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Cannot del key = %d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, key);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (child-&amp;gt;num == T-&amp;gt;t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
        {
            btree_node *left = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
            btree_node *right = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (idx - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
                left = node-&amp;gt;childrens[idx - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (idx + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; &amp;lt;= node-&amp;gt;num)
                right = node-&amp;gt;childrens[idx + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((left &amp;amp;&amp;amp; left-&amp;gt;num &amp;gt;= T-&amp;gt;t) ||
                (right &amp;amp;&amp;amp; right-&amp;gt;num &amp;gt;= T-&amp;gt;t))
            {
                &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; richR = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (right)
                    richR = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (left &amp;amp;&amp;amp; right)
                    richR = (right-&amp;gt;num &amp;gt; left-&amp;gt;num) ? &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; : &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
  
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (right &amp;amp;&amp;amp; right-&amp;gt;num &amp;gt;= T-&amp;gt;t &amp;amp;&amp;amp; richR)
                { &lt;span style=&#34;color:#228b22&#34;&gt;//borrow from next
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    child-&amp;gt;keys[child-&amp;gt;num] = node-&amp;gt;keys[idx];
                    child-&amp;gt;childrens[child-&amp;gt;num + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = right-&amp;gt;childrens[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
                    child-&amp;gt;num++;
  
                    node-&amp;gt;keys[idx] = right-&amp;gt;keys[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; right-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; i++)
                    {
                        right-&amp;gt;keys[i] = right-&amp;gt;keys[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
                        right-&amp;gt;childrens[i] = right-&amp;gt;childrens[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
                    }
  
                    right-&amp;gt;keys[right-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
                    right-&amp;gt;childrens[right-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = right-&amp;gt;childrens[right-&amp;gt;num];
                    right-&amp;gt;childrens[right-&amp;gt;num] = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
                    right-&amp;gt;num--;
                }
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
                { &lt;span style=&#34;color:#228b22&#34;&gt;//borrow from prev
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = child-&amp;gt;num; i &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i--)
                    {
                        child-&amp;gt;keys[i] = child-&amp;gt;keys[i - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
                        child-&amp;gt;childrens[i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = child-&amp;gt;childrens[i];
                    }
  
                    child-&amp;gt;childrens[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = child-&amp;gt;childrens[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;];
                    child-&amp;gt;childrens[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] = left-&amp;gt;childrens[left-&amp;gt;num];
                    child-&amp;gt;keys[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] = node-&amp;gt;keys[idx - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
  
                    child-&amp;gt;num++;
  
                    node-&amp;gt;keys[idx - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = left-&amp;gt;keys[left-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
                    left-&amp;gt;keys[left-&amp;gt;num - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
                    left-&amp;gt;childrens[left-&amp;gt;num] = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
                    left-&amp;gt;num--;
                }
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((!left || (left-&amp;gt;num == T-&amp;gt;t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)) &amp;amp;&amp;amp; (!right || (right-&amp;gt;num == T-&amp;gt;t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)))
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (left &amp;amp;&amp;amp; left-&amp;gt;num == T-&amp;gt;t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
                {
                    btree_merge(T, node, idx - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
                    child = left;
                }
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (right &amp;amp;&amp;amp; right-&amp;gt;num == T-&amp;gt;t - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
                {
                    btree_merge(T, node, idx);
                }
            }
        }
  
        btree_delete_key(T, child, key);
    }
}
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;btree_delete&lt;/span&gt;(btree *T, KEY_VALUE key)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!T-&amp;gt;root)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    btree_delete_key(T, T-&amp;gt;root, key);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4布隆过滤器&#34;&gt;4.布隆过滤器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.png?raw=true&#34; alt=&#34;布隆过滤器&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bloom算法类似一个hash set，用来判断某个元素（key）是否在某个集合中。和一般的hash set不同的是，这个算法无需存储key的值，对于每个key，只需要k个比特位，每个存储一个标志，用来判断key是否在集合中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先需要k个hash函数，每个函数可以把key散列成为1个整数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化时，需要一个长度为n比特的数组，每个比特位初始化为0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;某个key加入集合时，用k个hash函数计算出k个散列值，并把数组中对应的比特位置为1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断某个key是否在集合时，用k个hash函数计算出k个散列值，并查询数组中对应的比特位，如果所有的比特位都是1，认为在集合中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点：不需要存储key，节省空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法判断key在集合中时，有一定的概率key其实不在集合中&lt;/li&gt;
&lt;li&gt;无法删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;典型的应用场景：
某些存储系统的设计中，会存在空查询缺陷：当查询一个不存在的key时，需要访问慢设备，导致效率低下。比如一个前端页面的缓存系统，可能这样设计：先查询某个页面在本地是否存在，如果存在就直接返回，如果不存在，就从后端获取。但是当频繁从缓存系统查询一个页面时，缓存系统将会频繁请求后端，把压力导入后端。这时只要增加一个bloom算法的服务，后端插入一个key时，在这个服务中设置一次
需要查询后端时，先判断key在后端是否存在，这样就能避免后端的压力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/bloomfilter/bloomfilter.h&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *  BloomFilter使用例子：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *  static BaseBloomFilter stBloomFilter = {0};
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *  初始化BloomFilter(最大100000元素，不超过0.00001的错误率)：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *      InitBloomFilter(&amp;amp;stBloomFilter, 0, 100000, 0.00001);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *  重置BloomFilter：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *      ResetBloomFilter(&amp;amp;stBloomFilter);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *  释放BloomFilter:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *      FreeBloomFilter(&amp;amp;stBloomFilter);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *  向BloomFilter中新增一个数值（0-正常，1-加入数值过多）：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *      uint32_t dwValue;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *      iRet = BloomFilter_Add(&amp;amp;stBloomFilter, &amp;amp;dwValue, sizeof(uint32_t));
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *  检查数值是否在BloomFilter内（0-存在，1-不存在）：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *      iRet = BloomFilter_Check(&amp;amp;stBloomFilter, &amp;amp;dwValue, sizeof(uint32_t));
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *  (1.1新增) 将生成好的BloomFilter写入文件:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *      iRet = SaveBloomFilterToFile(&amp;amp;stBloomFilter, &amp;#34;dump.bin&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *  (1.1新增) 从文件读取生成好的BloomFilter:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *      iRet = LoadBloomFilterFromFile(&amp;amp;stBloomFilter, &amp;#34;dump.bin&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;**/&lt;/span&gt;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 注意，要让Add/Check函数内联，必须使用 -O2 或以上的优化等级
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define FORCE_INLINE __attribute__((always_inline))
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#define BYTE_BITS (8)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define MIX_UINT64(v) ((uint32_t)((v &amp;gt;&amp;gt; 32) ^ (v)))
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#define SETBIT(filter, n) (filter-&amp;gt;pstFilter[n / BYTE_BITS] |= (1 &amp;lt;&amp;lt; (n % BYTE_BITS)))
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define GETBIT(filter, n) (filter-&amp;gt;pstFilter[n / BYTE_BITS] &amp;amp; (1 &amp;lt;&amp;lt; (n % BYTE_BITS)))
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#1e889b&#34;&gt;#pragma pack(1)
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;// BloomFilter结构定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;
{
    uint8_t cInitFlag; &lt;span style=&#34;color:#228b22&#34;&gt;// 初始化标志，为0时的第一次Add()会对stFilter[]做初始化
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    uint8_t cResv[&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;];
  
    uint32_t dwMaxItems;   &lt;span style=&#34;color:#228b22&#34;&gt;// n - BloomFilter中最大元素个数 (输入量)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; dProbFalse;     &lt;span style=&#34;color:#228b22&#34;&gt;// p - 假阳概率(误判率) (输入量，比如万分之一：0.00001)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    uint32_t dwFilterBits; &lt;span style=&#34;color:#228b22&#34;&gt;// m =  ; - BloomFilter的比特数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    uint32_t dwHashFuncs;  &lt;span style=&#34;color:#228b22&#34;&gt;// k = round(log(2.0) * m / n); - 哈希函数个数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    uint32_t dwSeed;  &lt;span style=&#34;color:#228b22&#34;&gt;// MurmurHash的种子偏移量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    uint32_t dwCount; &lt;span style=&#34;color:#228b22&#34;&gt;// Add()的计数，超过MAX_BLOOMFILTER_N则返回失败
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    uint32_t dwFilterSize;    &lt;span style=&#34;color:#228b22&#34;&gt;// dwFilterBits / BYTE_BITS
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *pstFilter; &lt;span style=&#34;color:#228b22&#34;&gt;// BloomFilter存储指针，使用malloc分配
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    uint32_t *pdwHashPos;     &lt;span style=&#34;color:#228b22&#34;&gt;// 存储上次hash得到的K个bit位置数组(由bloom_hash填充)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;} BaseBloomFilter;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// BloomFilter文件头部定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;
{
    uint32_t dwMagicCode; &lt;span style=&#34;color:#228b22&#34;&gt;// 文件头部标识，填充 __MGAIC_CODE__
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    uint32_t dwSeed;
    uint32_t dwCount;
  
    uint32_t dwMaxItems;   &lt;span style=&#34;color:#228b22&#34;&gt;// n - BloomFilter中最大元素个数 (输入量)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; dProbFalse;     &lt;span style=&#34;color:#228b22&#34;&gt;// p - 假阳概率 (输入量，比如万分之一：0.00001)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    uint32_t dwFilterBits; &lt;span style=&#34;color:#228b22&#34;&gt;// m = ceil((n * log(p)) / log(1.0 / (pow(2.0, log(2.0))))); - BloomFilter的比特数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    uint32_t dwHashFuncs;  &lt;span style=&#34;color:#228b22&#34;&gt;// k = round(log(2.0) * m / n); - 哈希函数个数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    uint32_t dwResv[&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;];
    uint32_t dwFileCrc;    &lt;span style=&#34;color:#228b22&#34;&gt;// (未使用)整个文件的校验和
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    uint32_t dwFilterSize; &lt;span style=&#34;color:#228b22&#34;&gt;// 后面Filter的Buffer长度
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;} BloomFileHead;
  
&lt;span style=&#34;color:#1e889b&#34;&gt;#pragma pack()
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;// 计算BloomFilter的参数m,k
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;_CalcBloomFilterParam&lt;/span&gt;(uint32_t n, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; p, uint32_t *pm, uint32_t *pk)
{
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *  n - Number of items in the filter
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *  p - Probability of false positives, float between 0 and 1 or a number indicating 1-in-p
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *  m - Number of bits in the filter
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *  k - Number of hash functions
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *  f = ln(2) × ln(1/2) × m / n = (0.6185) ^ (m/n)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *  m = -1 * ln(p) × n / 0.6185 , 这里有错误
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *  k = ln(2) × m / n = 0.6931 * m / n
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * darren修正：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * m = -1*n*ln(p)/((ln(2))^2) = -1*n*ln(p)/(ln(2)*ln(2)) = -1*n*ln(p)/(0.69314718055995*0.69314718055995))
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *   = -1*n*ln(p)/0.4804530139182079271955440025
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * k = ln(2)*m/n
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    **/&lt;/span&gt;
  
    uint32_t m, k, m2;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;//    printf(&amp;#34;ln(2):%lf, ln(p):%lf\n&amp;#34;, log(2), log(p)); // 用来验证函数正确性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 计算指定假阳(误差)概率下需要的比特数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    m = (uint32_t)ceil(-&lt;span style=&#34;color:#b452cd&#34;&gt;1.0&lt;/span&gt; * n * log(p) / &lt;span style=&#34;color:#b452cd&#34;&gt;0.480453&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//darren 修正
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    m = (m - m % &lt;span style=&#34;color:#b452cd&#34;&gt;64&lt;/span&gt;) + &lt;span style=&#34;color:#b452cd&#34;&gt;64&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 8字节对齐
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                           &lt;span style=&#34;color:#228b22&#34;&gt;//    m2 =(uint32_t) ceil(-1 * n * log(p) / 0.480453); //错误写法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 计算哈希函数个数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; double_k = (&lt;span style=&#34;color:#b452cd&#34;&gt;0.69314&lt;/span&gt; * m / n); &lt;span style=&#34;color:#228b22&#34;&gt;// ln(2)*m/n // 这里只是为了debug出来看看具体的浮点数值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    k = round(double_k);                 &lt;span style=&#34;color:#228b22&#34;&gt;// 返回x的四舍五入整数值。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;orig_k:%lf, k:%u&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, double_k, k);
  
    *pm = m;
    *pk = k;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 根据目标精度和数据个数，初始化BloomFilter结构
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @brief 初始化布隆过滤器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param pstBloomfilter 布隆过滤器实例
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param dwSeed    hash种子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param dwMaxItems 存储容量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param dProbFalse 允许的误判率
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @return 返回值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *      -1 传入的布隆过滤器为空
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *      -2 hash种子错误或误差&amp;gt;=1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;InitBloomFilter&lt;/span&gt;(BaseBloomFilter *pstBloomfilter,
                           uint32_t dwSeed,
                           uint32_t dwMaxItems, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; dProbFalse)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pstBloomfilter == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((dProbFalse &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;) || (dProbFalse &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;))
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 先检查是否重复Init，释放内存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pstBloomfilter-&amp;gt;pstFilter != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        free(pstBloomfilter-&amp;gt;pstFilter);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pstBloomfilter-&amp;gt;pdwHashPos != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        free(pstBloomfilter-&amp;gt;pdwHashPos);
  
    memset(pstBloomfilter, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(BaseBloomFilter));
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 初始化内存结构，并计算BloomFilter需要的空间
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    pstBloomfilter-&amp;gt;dwMaxItems = dwMaxItems; &lt;span style=&#34;color:#228b22&#34;&gt;// 最大存储
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    pstBloomfilter-&amp;gt;dProbFalse = dProbFalse; &lt;span style=&#34;color:#228b22&#34;&gt;// 误差
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    pstBloomfilter-&amp;gt;dwSeed = dwSeed;         &lt;span style=&#34;color:#228b22&#34;&gt;// hash种子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 计算 m, k
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    _CalcBloomFilterParam(pstBloomfilter-&amp;gt;dwMaxItems, pstBloomfilter-&amp;gt;dProbFalse,
                          &amp;amp;pstBloomfilter-&amp;gt;dwFilterBits, &amp;amp;pstBloomfilter-&amp;gt;dwHashFuncs);
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 分配BloomFilter的存储空间
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    pstBloomfilter-&amp;gt;dwFilterSize = pstBloomfilter-&amp;gt;dwFilterBits / BYTE_BITS;
    pstBloomfilter-&amp;gt;pstFilter = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *)malloc(pstBloomfilter-&amp;gt;dwFilterSize);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt; == pstBloomfilter-&amp;gt;pstFilter)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 哈希结果数组，每个哈希函数一个
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    pstBloomfilter-&amp;gt;pdwHashPos = (uint32_t *)malloc(pstBloomfilter-&amp;gt;dwHashFuncs * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint32_t));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt; == pstBloomfilter-&amp;gt;pdwHashPos)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;;
  
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt; Init BloomFilter(n=%u, p=%e, m=%u, k=%d), malloc() size=%.6fMB, items:bits=1:%0.1lf&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,
           pstBloomfilter-&amp;gt;dwMaxItems, pstBloomfilter-&amp;gt;dProbFalse, pstBloomfilter-&amp;gt;dwFilterBits,
           pstBloomfilter-&amp;gt;dwHashFuncs, (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt;)pstBloomfilter-&amp;gt;dwFilterSize / &lt;span style=&#34;color:#b452cd&#34;&gt;1024&lt;/span&gt; / &lt;span style=&#34;color:#b452cd&#34;&gt;1024&lt;/span&gt;,
           pstBloomfilter-&amp;gt;dwFilterBits * &lt;span style=&#34;color:#b452cd&#34;&gt;1.0&lt;/span&gt; / pstBloomfilter-&amp;gt;dwMaxItems);
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 初始化BloomFilter的内存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    memset(pstBloomfilter-&amp;gt;pstFilter, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, pstBloomfilter-&amp;gt;dwFilterSize);
    pstBloomfilter-&amp;gt;cInitFlag = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 释放BloomFilter
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;FreeBloomFilter&lt;/span&gt;(BaseBloomFilter *pstBloomfilter)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pstBloomfilter == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    pstBloomfilter-&amp;gt;cInitFlag = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    pstBloomfilter-&amp;gt;dwCount = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
  
    free(pstBloomfilter-&amp;gt;pstFilter);
    pstBloomfilter-&amp;gt;pstFilter = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    free(pstBloomfilter-&amp;gt;pdwHashPos);
    pstBloomfilter-&amp;gt;pdwHashPos = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 重置BloomFilter
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 注意: Reset()函数不会立即初始化stFilter，而是当一次Add()时去memset
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ResetBloomFilter&lt;/span&gt;(BaseBloomFilter *pstBloomfilter)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pstBloomfilter == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    pstBloomfilter-&amp;gt;cInitFlag = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    pstBloomfilter-&amp;gt;dwCount = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 和ResetBloomFilter不同，调用后立即memset内存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;RealResetBloomFilter&lt;/span&gt;(BaseBloomFilter *pstBloomfilter)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pstBloomfilter == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    memset(pstBloomfilter-&amp;gt;pstFilter, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, pstBloomfilter-&amp;gt;dwFilterSize);
    pstBloomfilter-&amp;gt;cInitFlag = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    pstBloomfilter-&amp;gt;dwCount = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;///
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;///  函数FORCE_INLINE，加速执行
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;///
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// MurmurHash2, 64-bit versions, by Austin Appleby
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// https://sites.google.com/site/murmurhash/
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;FORCE_INLINE uint64_t &lt;span style=&#34;color:#008b45&#34;&gt;MurmurHash2_x64&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *key, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; len, uint32_t seed)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; uint64_t m = &lt;span style=&#34;color:#b452cd&#34;&gt;0xc6a4a7935bd1e995&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; r = &lt;span style=&#34;color:#b452cd&#34;&gt;47&lt;/span&gt;;
  
    uint64_t h = seed ^ (len * m);
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; uint64_t *data = (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; uint64_t *)key;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; uint64_t *end = data + (len / &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;);
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (data != end)
    {
        uint64_t k = *data++;
  
        k *= m;
        k ^= k &amp;gt;&amp;gt; r;
        k *= m;
  
        h ^= k;
        h *= m;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; uint8_t *data2 = (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; uint8_t *)data;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (len &amp;amp; &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;)
    {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;:
        h ^= ((uint64_t)data2[&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;]) &amp;lt;&amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;48&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;:
        h ^= ((uint64_t)data2[&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;]) &amp;lt;&amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;40&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;:
        h ^= ((uint64_t)data2[&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;]) &amp;lt;&amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;32&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;:
        h ^= ((uint64_t)data2[&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]) &amp;lt;&amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;24&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;:
        h ^= ((uint64_t)data2[&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;]) &amp;lt;&amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;:
        h ^= ((uint64_t)data2[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]) &amp;lt;&amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:
        h ^= ((uint64_t)data2[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;]);
        h *= m;
    };
  
    h ^= h &amp;gt;&amp;gt; r;
    h *= m;
    h ^= h &amp;gt;&amp;gt; r;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; h;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 双重散列封装，k个函数函数, 比如要20个
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;FORCE_INLINE &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;bloom_hash&lt;/span&gt;(BaseBloomFilter *pstBloomfilter, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *key, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; len)
{
    &lt;span style=&#34;color:#228b22&#34;&gt;//if (pstBloomfilter == NULL) return;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i;
    uint32_t dwFilterBits = pstBloomfilter-&amp;gt;dwFilterBits;
    uint64_t hash1 = MurmurHash2_x64(key, len, pstBloomfilter-&amp;gt;dwSeed);
    uint64_t hash2 = MurmurHash2_x64(key, len, MIX_UINT64(hash1));
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)pstBloomfilter-&amp;gt;dwHashFuncs; i++)
    {
        &lt;span style=&#34;color:#228b22&#34;&gt;// k0 = (hash1 + 0*hash2) % dwFilterBits; // dwFilterBits bit向量的长度
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// k1 = (hash1 + 1*hash2) % dwFilterBits;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        pstBloomfilter-&amp;gt;pdwHashPos[i] = (hash1 + i * hash2) % dwFilterBits;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 向BloomFilter中新增一个元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 成功返回0，当添加数据超过限制值时返回1提示用户
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;FORCE_INLINE &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;BloomFilter_Add&lt;/span&gt;(BaseBloomFilter *pstBloomfilter, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *key, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; len)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((pstBloomfilter == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) || (key == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) || (len &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;))
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pstBloomfilter-&amp;gt;cInitFlag != &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#228b22&#34;&gt;// Reset后没有初始化，使用前需要memset
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        memset(pstBloomfilter-&amp;gt;pstFilter, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, pstBloomfilter-&amp;gt;dwFilterSize);
        pstBloomfilter-&amp;gt;cInitFlag = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// hash key到bloomfilter中, 为了计算不同hash命中的位置，保存pdwHashPos数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    bloom_hash(pstBloomfilter, key, len);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)pstBloomfilter-&amp;gt;dwHashFuncs; i++)
    {
        &lt;span style=&#34;color:#228b22&#34;&gt;// dwHashFuncs[0] = hash0(key)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// dwHashFuncs[1] = hash1(key)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// dwHashFuncs[k-1] = hashk-1(key)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        SETBIT(pstBloomfilter, pstBloomfilter-&amp;gt;pdwHashPos[i]);
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 增加count数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    pstBloomfilter-&amp;gt;dwCount++;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pstBloomfilter-&amp;gt;dwCount &amp;lt;= pstBloomfilter-&amp;gt;dwMaxItems)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 超过N最大值，可能出现准确率下降等情况
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 检查一个元素是否在bloomfilter中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 返回：0-存在，1-不存在，负数表示失败
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;FORCE_INLINE &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;BloomFilter_Check&lt;/span&gt;(BaseBloomFilter *pstBloomfilter, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *key, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; len)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((pstBloomfilter == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) || (key == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) || (len &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;))
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i;
  
    bloom_hash(pstBloomfilter, key, len);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)pstBloomfilter-&amp;gt;dwHashFuncs; i++)
    {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果有任意bit不为1，说明key不在bloomfilter中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 注意: GETBIT()返回不是0|1，高位可能出现128之类的情况
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (GETBIT(pstBloomfilter, pstBloomfilter-&amp;gt;pdwHashPos[i]) == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;/* 文件相关封装 */&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 将生成好的BloomFilter写入文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;SaveBloomFilterToFile&lt;/span&gt;(BaseBloomFilter *pstBloomfilter, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *szFileName)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((pstBloomfilter == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) || (szFileName == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;))
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; iRet;
    FILE *pFile;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; BloomFileHead stFileHeader = {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;};
  
    pFile = fopen(szFileName, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pFile == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        perror(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fopen&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 先写入文件头
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    stFileHeader.dwMagicCode = __MGAIC_CODE__;
    stFileHeader.dwSeed = pstBloomfilter-&amp;gt;dwSeed;
    stFileHeader.dwCount = pstBloomfilter-&amp;gt;dwCount;
    stFileHeader.dwMaxItems = pstBloomfilter-&amp;gt;dwMaxItems;
    stFileHeader.dProbFalse = pstBloomfilter-&amp;gt;dProbFalse;
    stFileHeader.dwFilterBits = pstBloomfilter-&amp;gt;dwFilterBits;
    stFileHeader.dwHashFuncs = pstBloomfilter-&amp;gt;dwHashFuncs;
    stFileHeader.dwFilterSize = pstBloomfilter-&amp;gt;dwFilterSize;
  
    iRet = fwrite((&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *)&amp;amp;stFileHeader, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(stFileHeader), &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, pFile);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (iRet != &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        perror(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fwrite(head)&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;21&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 接着写入BloomFilter的内容
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    iRet = fwrite(pstBloomfilter-&amp;gt;pstFilter, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, pstBloomfilter-&amp;gt;dwFilterSize, pFile);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((uint32_t)iRet != pstBloomfilter-&amp;gt;dwFilterSize)
    {
        perror(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fwrite(data)&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;31&lt;/span&gt;;
    }
  
    fclose(pFile);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 从文件读取生成好的BloomFilter
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;LoadBloomFilterFromFile&lt;/span&gt;(BaseBloomFilter *pstBloomfilter, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *szFileName)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((pstBloomfilter == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;) || (szFileName == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;))
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; iRet;
    FILE *pFile;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; BloomFileHead stFileHeader = {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;};
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pstBloomfilter-&amp;gt;pstFilter != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        free(pstBloomfilter-&amp;gt;pstFilter);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pstBloomfilter-&amp;gt;pdwHashPos != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
        free(pstBloomfilter-&amp;gt;pdwHashPos);
  
    &lt;span style=&#34;color:#228b22&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    pFile = fopen(szFileName, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pFile == &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        perror(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fopen&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 读取并检查文件头
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    iRet = fread((&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *)&amp;amp;stFileHeader, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(stFileHeader), &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, pFile);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (iRet != &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        perror(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fread(head)&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;21&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((stFileHeader.dwMagicCode != __MGAIC_CODE__) || (stFileHeader.dwFilterBits != stFileHeader.dwFilterSize * BYTE_BITS))
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 初始化传入的 BaseBloomFilter 结构
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    pstBloomfilter-&amp;gt;dwMaxItems = stFileHeader.dwMaxItems;
    pstBloomfilter-&amp;gt;dProbFalse = stFileHeader.dProbFalse;
    pstBloomfilter-&amp;gt;dwFilterBits = stFileHeader.dwFilterBits;
    pstBloomfilter-&amp;gt;dwHashFuncs = stFileHeader.dwHashFuncs;
    pstBloomfilter-&amp;gt;dwSeed = stFileHeader.dwSeed;
    pstBloomfilter-&amp;gt;dwCount = stFileHeader.dwCount;
    pstBloomfilter-&amp;gt;dwFilterSize = stFileHeader.dwFilterSize;
  
    pstBloomfilter-&amp;gt;pstFilter = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *)malloc(pstBloomfilter-&amp;gt;dwFilterSize);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt; == pstBloomfilter-&amp;gt;pstFilter)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;;
    pstBloomfilter-&amp;gt;pdwHashPos = (uint32_t *)malloc(pstBloomfilter-&amp;gt;dwHashFuncs * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint32_t));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt; == pstBloomfilter-&amp;gt;pdwHashPos)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 将后面的Data部分读入 pstFilter
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    iRet = fread((&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *)(pstBloomfilter-&amp;gt;pstFilter), &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, pstBloomfilter-&amp;gt;dwFilterSize, pFile);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((uint32_t)iRet != pstBloomfilter-&amp;gt;dwFilterSize)
    {
        perror(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fread(data)&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;31&lt;/span&gt;;
    }
    pstBloomfilter-&amp;gt;cInitFlag = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
  
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt; Load BloomFilter(n=%u, p=%f, m=%u, k=%d), malloc() size=%.2fMB&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,
           pstBloomfilter-&amp;gt;dwMaxItems, pstBloomfilter-&amp;gt;dProbFalse, pstBloomfilter-&amp;gt;dwFilterBits,
           pstBloomfilter-&amp;gt;dwHashFuncs, (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt;)pstBloomfilter-&amp;gt;dwFilterSize / &lt;span style=&#34;color:#b452cd&#34;&gt;1024&lt;/span&gt; / &lt;span style=&#34;color:#b452cd&#34;&gt;1024&lt;/span&gt;);
  
    fclose(pFile);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5设计模式&#34;&gt;5.设计模式&lt;/h3&gt;
&lt;h4 id=&#34;51-观察者模式&#34;&gt;5.1 观察者模式&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png?raw=true&#34; alt=&#34;观察者模式&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/designpattern/observer.cpp&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 简单变形示例——区别对待观察者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;1：范例需求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;这是一个实际系统的简化需求：在一个水质监测系统中有这样一个功能，当水中的杂质为正常的时候，只是通知监测人员做记录；
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;当为轻度污染的时候，除了通知监测人员做记录外，还要通知预警人员，判断是否需要预警；当为中度或者高度污染的时候，
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;除了通知监测人员做记录外，还要通知预警人员，判断是否需要预警，同时还要通知监测部门领导做相应的处理。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;WaterQualitySubject&lt;/span&gt;;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 观察者的接口
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 水质观察者接口定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;WatcherObserver&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    WatcherObserver() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~WatcherObserver() {}
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 被通知的方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @param subject 传入被观察的目标对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;update&lt;/span&gt;(WaterQualitySubject *subject) = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 和普通观察者模式， 增加了角色
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 设置观察人员的职务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @param job 观察人员的职务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setJob&lt;/span&gt;(string job) = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 获取观察人员的职务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @return 观察人员的职务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; string &lt;span style=&#34;color:#008b45&#34;&gt;getJob&lt;/span&gt;() = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
};
  
&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;* 定义水质监测的目标对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;WaterQualitySubject&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    WaterQualitySubject() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~WaterQualitySubject() {}
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    * 注册观察者对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @param observer 观察者对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;attach&lt;/span&gt;(WatcherObserver *observer)
    {
        observers.push_back(observer);
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 删除观察者对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @param observer 观察者对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;detach&lt;/span&gt;(WatcherObserver *observer)
    {
        observers.remove(observer);
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 通知相应的观察者对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;notifyWatchers&lt;/span&gt;() = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 获取水质污染的级别
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @return 水质污染的级别
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getPolluteLevel&lt;/span&gt;() = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;protected&lt;/span&gt;:
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 用来保存注册的观察者对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    list&amp;lt;WatcherObserver *&amp;gt; observers;
};
  
&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 具体的观察者实现
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Watcher&lt;/span&gt; : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; WatcherObserver
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    Watcher() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~Watcher() {}
    string &lt;span style=&#34;color:#008b45&#34;&gt;getJob&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; m_job;
    }
  
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setJob&lt;/span&gt;(string job)
    {
        m_job = job;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;update&lt;/span&gt;(WaterQualitySubject *subject)
    {
        &lt;span style=&#34;color:#228b22&#34;&gt;//这里采用的是拉的方式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        cout &amp;lt;&amp;lt; m_job &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; 获取到通知，当前污染级别为：&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; subject-&amp;gt;getPolluteLevel() &amp;lt;&amp;lt; endl;
    }
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 职务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    string m_job;
};
  
&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 具体的水质监测对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;WaterQuality&lt;/span&gt; : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; WaterQualitySubject
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    WaterQuality() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~WaterQuality() {}
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 获取水质污染的级别
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @return 水质污染的级别
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getPolluteLevel&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; m_polluteLevel;
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 当监测水质情况后，设置水质污染的级别
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @param polluteLevel 水质污染的级别
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setPolluteLevel&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; polluteLevel)
    {
        m_polluteLevel = polluteLevel;
        &lt;span style=&#34;color:#228b22&#34;&gt;//通知相应的观察者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        notifyWatchers();
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 通知相应的观察者对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;notifyWatchers&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#228b22&#34;&gt;//循环所有注册的观察者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (WatcherObserver *watcher : observers)
        {
            &lt;span style=&#34;color:#228b22&#34;&gt;//开始根据污染级别判断是否需要通知，由这里总控
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (m_polluteLevel &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
            {
                &lt;span style=&#34;color:#228b22&#34;&gt;//通知监测员做记录
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (watcher-&amp;gt;getJob().compare(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;监测人员&amp;#34;&lt;/span&gt;) == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
                {
                    watcher-&amp;gt;update(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;);
                }
            }
  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (m_polluteLevel &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
            {
                &lt;span style=&#34;color:#228b22&#34;&gt;//通知预警人员
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (watcher-&amp;gt;getJob().compare(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;预警人员&amp;#34;&lt;/span&gt;) == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
                {
                    watcher-&amp;gt;update(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;);
                }
            }
  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (m_polluteLevel &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)
            {
                &lt;span style=&#34;color:#228b22&#34;&gt;//通知监测部门领导
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (watcher-&amp;gt;getJob().compare(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;监测部门领导&amp;#34;&lt;/span&gt;) == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
                {
                    watcher-&amp;gt;update(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;);
                }
            }
        }
    }
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 污染的级别，0表示正常，1表示轻度污染，2表示中度污染，3表示高度污染
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m_polluteLevel = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
};
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#228b22&#34;&gt;//创建水质主题对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    WaterQuality *subject = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; WaterQuality();
    &lt;span style=&#34;color:#228b22&#34;&gt;//创建几个观察者, 观察者分了不同角色
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    WatcherObserver *watcher1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Watcher();
    watcher1-&amp;gt;setJob(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;监测人员&amp;#34;&lt;/span&gt;);
    WatcherObserver *watcher2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Watcher();
    watcher2-&amp;gt;setJob(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;预警人员&amp;#34;&lt;/span&gt;);
    WatcherObserver *watcher3 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Watcher();
    watcher3-&amp;gt;setJob(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;监测部门领导&amp;#34;&lt;/span&gt;);
  
    &lt;span style=&#34;color:#228b22&#34;&gt;//注册观察者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    subject-&amp;gt;attach(watcher1);
    subject-&amp;gt;attach(watcher2);
    subject-&amp;gt;attach(watcher3);
  
    &lt;span style=&#34;color:#228b22&#34;&gt;//填写水质报告
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;当水质为正常的时候------------------〉&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;
    subject-&amp;gt;setPolluteLevel(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
  
    cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;当水质为轻度污染的时候---------------〉&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;
    subject-&amp;gt;setPolluteLevel(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
  
    cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;当水质为中度污染的时候---------------〉&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;
    subject-&amp;gt;setPolluteLevel(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;);
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 释放观察者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    subject-&amp;gt;detach(watcher1);
    subject-&amp;gt;detach(watcher2);
    subject-&amp;gt;detach(watcher3);
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; watcher1;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; watcher2;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; watcher3;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; subject;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;52-工厂模式&#34;&gt;5.2 工厂模式&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/gongluck/CVIP/blob/master/images/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png?raw=true&#34; alt=&#34;工厂模式&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法是一个类的实例化延迟到其子类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/designpattern/factory.cpp&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ExportFileProduct&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    ExportFileProduct() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~ExportFileProduct() {}
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Export&lt;/span&gt;(string data) = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
};
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 保存成文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ExportTextProduct&lt;/span&gt; : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; ExportFileProduct
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    ExportTextProduct() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~ExportTextProduct() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Export&lt;/span&gt;(string data)
    {
        cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;导出数据:[&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; data &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;]保存成文本的方式&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;;
    }
};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ExportDBProduct&lt;/span&gt; : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; ExportFileProduct
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    ExportDBProduct() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~ExportDBProduct() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Export&lt;/span&gt;(string data)
    {
        cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;导出数据:[&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; data &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;]保存数据库的方式&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;;
    }
};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ExportFactory&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    ExportFactory() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~ExportFactory() {}
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @brief Export
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @param type 导出的类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @param data 具体的数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Export&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; type, string data)
    {
        ExportFileProduct *product = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
        product = factoryMethod(type);
  
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; ret = &lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (product)
        {
            ret = product-&amp;gt;Export(data);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; product;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;没有对应的导出方式&amp;#34;&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ret;
    }
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;protected&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ExportFileProduct *factoryMethod(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; type)
    {
        ExportFileProduct *product = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; == type)
        {
            product = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ExportTextProduct();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; == type)
        {
            product = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ExportDBProduct();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; product;
    }
};
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 加一种新的导出方式:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// (1)修改原来的工厂方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// (2)继承工厂方法去拓展
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ExportXMLProduct&lt;/span&gt; : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; ExportFileProduct
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    ExportXMLProduct() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~ExportXMLProduct() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Export&lt;/span&gt;(string data)
    {
        cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;导出数据:[&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; data &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;]保存XML的方式&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;;
    }
};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ExportPortobufferProduct&lt;/span&gt; : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; ExportFileProduct
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    ExportPortobufferProduct() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~ExportPortobufferProduct() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Export&lt;/span&gt;(string data)
    {
        cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;导出数据:[&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; data &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;]保存Portobuffer的方式&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;;
    }
};
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ExportFactory2&lt;/span&gt; : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; ExportFactory
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    ExportFactory2() {}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ~ExportFactory2() {}
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;protected&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;virtual&lt;/span&gt; ExportFileProduct *factoryMethod(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; type)
    {
        ExportFileProduct *product = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; == type)
        {
            product = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ExportXMLProduct();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt; == type)
        {
            product = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ExportPortobufferProduct();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            product = ExportFactory::factoryMethod(type);
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; product;
    }
};
  
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ExportFactory&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;
    ExportFactory *factory = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ExportFactory();
  
    factory-&amp;gt;Export(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;上课人数&amp;#34;&lt;/span&gt;);
    factory-&amp;gt;Export(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;上课人数&amp;#34;&lt;/span&gt;);
    factory-&amp;gt;Export(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;上课人数&amp;#34;&lt;/span&gt;);
  
    cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;ExportFactory2&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;
    ExportFactory *factory2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ExportFactory2();
  
    factory2-&amp;gt;Export(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;上课人数&amp;#34;&lt;/span&gt;);
    factory2-&amp;gt;Export(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;上课人数&amp;#34;&lt;/span&gt;);
    factory2-&amp;gt;Export(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;上课人数&amp;#34;&lt;/span&gt;);
    factory2-&amp;gt;Export(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;上课人数&amp;#34;&lt;/span&gt;);
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; factory;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; factory2;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;53-单例模式&#34;&gt;5.3 单例模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CVIP/blob/master/code/designpattern/singleton.cpp&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define SINGLETON_INDEX 6 &lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 开关，不同模式的开关
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 补充：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * =default: 用于显式要求编译器提供合成版本的四大函数(构造、拷贝、析构、赋值)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * =delete: 用于定义删除函数，在旧标准下，我们如果希望阻止拷贝可以通过显式声明拷贝构造函数和拷贝赋值函数为private，但新标准下允许我们定义删除函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// 反汇编举例 objdump -S -d 4-singleton-c++11 &amp;gt; 4-singleton-c++11.txt
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 直接汇编：g++ -S -o main2-2.s main2.cpp -std=c++11
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;//1、原始懒汉式单例模式 懒汉式单例就是需要使用这个单例对象的时候才去创建这个单例对象。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#if SINGLETON_INDEX == 1
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton *m_singleton;
    Singleton() = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;;                             &lt;span style=&#34;color:#228b22&#34;&gt;// 自动生成默认构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Singleton(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;;            &lt;span style=&#34;color:#228b22&#34;&gt;// 禁用拷贝构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Singleton &amp;amp;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;operator&lt;/span&gt;=(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 禁用拷贝赋值操作符
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;GarbageCollector&lt;/span&gt;
    {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
        ~GarbageCollector()
        {
            cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;~GarbageCollector&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Singleton::m_singleton)
            {
                cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;free m_singleton&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; Singleton::m_singleton;
                Singleton::m_singleton = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
            }
        }
    };
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; GarbageCollector m_gc;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton *getInstance()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Singleton::m_singleton == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
        {
            std::this_thread::sleep_for(std::chrono::milliseconds(&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;)); &lt;span style=&#34;color:#228b22&#34;&gt;//休眠，模拟创建实例的时间
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            m_singleton = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; m_singleton;
    }
};
&lt;span style=&#34;color:#228b22&#34;&gt;// 必须在类外初始化
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Singleton *Singleton::m_singleton = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
Singleton::GarbageCollector Singleton::m_gc;
&lt;span style=&#34;color:#1e889b&#34;&gt;#elif SINGLETON_INDEX == 2
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 2 线程安全的懒汉式单例模式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//线程安全的懒汉式单例
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton *m_singleton;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; mutex m_mutex;
    Singleton() = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;;
    Singleton(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;;            &lt;span style=&#34;color:#228b22&#34;&gt;// 禁用拷贝构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Singleton &amp;amp;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;operator&lt;/span&gt;=(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 禁用拷贝赋值操作符
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;GarbageCollector&lt;/span&gt;
    {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
        ~GarbageCollector()
        {
            cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;~GarbageCollector&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Singleton::m_singleton)
            {
                cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;free m_singleton&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; Singleton::m_singleton;
                Singleton::m_singleton = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
            }
        }
    };
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; GarbageCollector m_gc;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton *getInstance()
    {                   &lt;span style=&#34;color:#228b22&#34;&gt;// 加锁的粒度大，效率较低， 对高并发的访问
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        m_mutex.lock(); &lt;span style=&#34;color:#228b22&#34;&gt;// 加锁，保证只有一个线程在访问下面的语句
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Singleton::m_singleton == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#228b22&#34;&gt;//std::this_thread::sleep_for(std::chrono::milliseconds(1000)); //休眠，模拟创建实例的时间
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            m_singleton = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
        }
        m_mutex.unlock(); &lt;span style=&#34;color:#228b22&#34;&gt;//解锁
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; m_singleton;
    }
};
Singleton *Singleton::m_singleton = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
mutex Singleton::m_mutex;
Singleton::GarbageCollector Singleton::m_gc;
&lt;span style=&#34;color:#1e889b&#34;&gt;#elif SINGLETON_INDEX == 3
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 3、锁住初始化实例语句之后再次检查实例是否被创建
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* 双检查锁，但由于内存读写reorder不安全 因为C++创建对象时，会执行1、分配内存，2 调用构造，3 赋值操作三步操作，
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;然而现代CPU和编译器高并发下可能会进行乱序重排操作，因而创建对象new CSingleton的第2步可能会晚于第3步进行指令调用，
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;因而导致出现未定义的的行为。*/&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton *m_singleton;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; mutex m_mutex;
    Singleton() = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;;
    Singleton(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;;
    Singleton &amp;amp;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;operator&lt;/span&gt;=(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;GarbageCollector&lt;/span&gt;
    {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
        ~GarbageCollector()
        {
            cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;~GarbageCollector&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Singleton::m_singleton)
            {
                cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;free m_singleton&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; Singleton::m_singleton;
                Singleton::m_singleton = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
            }
        }
    };
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; GarbageCollector m_gc;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *getSingletonAddress()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; m_singleton;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton *&lt;span style=&#34;color:#008b45&#34;&gt;getInstance&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Singleton::m_singleton == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
        {
            m_mutex.lock(); &lt;span style=&#34;color:#228b22&#34;&gt;// 加锁，保证只有一个线程在访问线程内的代码
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Singleton::m_singleton == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
            {                                  &lt;span style=&#34;color:#228b22&#34;&gt;//再次检查
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                m_singleton = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton(); &lt;span style=&#34;color:#228b22&#34;&gt;// 对象的new不是原子操作 1、分配内存，2 调用构造，3 赋值操作，到第3步的时候才是m_singleton非空
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                                               &lt;span style=&#34;color:#228b22&#34;&gt;//  1、分配内存，2 赋值操作 3 调用构造，到第2步的时候才是m_singleton非空
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
            m_mutex.unlock(); &lt;span style=&#34;color:#228b22&#34;&gt;//解锁
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; m_singleton;
    }
};
Singleton *Singleton::m_singleton = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
mutex Singleton::m_mutex;
Singleton::GarbageCollector Singleton::m_gc;
&lt;span style=&#34;color:#1e889b&#34;&gt;#elif SINGLETON_INDEX == 4
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 4、C++ 11版本之后的跨平台实现
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; std::atomic&amp;lt;Singleton *&amp;gt; m_instance;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; std::mutex m_mutex;
    Singleton() = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;;
    Singleton(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;;
    Singleton &amp;amp;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;operator&lt;/span&gt;=(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;GarbageCollector&lt;/span&gt;
    {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
        ~GarbageCollector()
        {
            cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;~GarbageCollector&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;;
            Singleton *tmp = m_instance.load(std::memory_order_relaxed);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (tmp)
            {
                cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;free m_singleton: &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; tmp &amp;lt;&amp;lt; endl;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; tmp;
            }
        }
    };
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; GarbageCollector m_gc;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *getSingletonAddress()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; m_instance;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton *&lt;span style=&#34;color:#008b45&#34;&gt;getInstance&lt;/span&gt;()
    {
        Singleton *tmp = m_instance.load(std::memory_order_relaxed);
        std::atomic_thread_fence(std::memory_order_acquire); &lt;span style=&#34;color:#228b22&#34;&gt;//获取内存fence
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (tmp == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
        {
            std::lock_guard&amp;lt;std::mutex&amp;gt; lock(m_mutex);
            tmp = m_instance.load(std::memory_order_relaxed);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (tmp == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
            {
                tmp = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();                               &lt;span style=&#34;color:#228b22&#34;&gt;// 1、分配内存，2 调用构造，3 赋值操作
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                std::atomic_thread_fence(std::memory_order_release); &lt;span style=&#34;color:#228b22&#34;&gt;//释放内存fence
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                m_instance.store(tmp, std::memory_order_relaxed);
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; tmp;
    }
};
std::atomic&amp;lt;Singleton *&amp;gt; Singleton::m_instance;
std::mutex Singleton::m_mutex;
Singleton::GarbageCollector Singleton::m_gc;
&lt;span style=&#34;color:#1e889b&#34;&gt;#elif SINGLETON_INDEX == 5
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 懒汉式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#228b22&#34;&gt;//Singleton() = default;  // 自动生成默认构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Singleton()
    { &lt;span style=&#34;color:#228b22&#34;&gt;// 构造函数会影响局部静态变量，不能用隐式的构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Singleton construct&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;;
    }
    Singleton(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;;            &lt;span style=&#34;color:#228b22&#34;&gt;// 禁用拷贝构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Singleton &amp;amp;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;operator&lt;/span&gt;=(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 禁用拷贝赋值操作符
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton *getInstance()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton s_singleton; &lt;span style=&#34;color:#228b22&#34;&gt;// C++11线程安全，C++11之前不是线程安全  __cxa_guard_acquire 和 __cxa_guard_release
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;amp;s_singleton;
    }
};
&lt;span style=&#34;color:#1e889b&#34;&gt;#elif SINGLETON_INDEX == 6
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 饿汉式，在main函数运行前初始化，绝对安全
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#228b22&#34;&gt;//Singleton() = default;   //自动生成默认构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Singleton()
    {
        cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Singleton construct&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;;
    }
    Singleton(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;;            &lt;span style=&#34;color:#228b22&#34;&gt;// 禁用拷贝构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Singleton &amp;amp;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;operator&lt;/span&gt;=(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Singleton &amp;amp;s) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 禁用拷贝赋值操作符
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton m_singleton;
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton *getInstance()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;amp;m_singleton;
    }
};
Singleton Singleton::m_singleton;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gongluck.github.io/linux/%E7%AE%97%E6%B3%95%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%93%E6%A0%8F/ - </description>
        </item>
    
    
    
        <item>
        <title>Shell基础</title>
        <link>https://gongluck.github.io/linux/shell/</link>
        <pubDate>Sat, 17 Oct 2020 16:33:15 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/shell/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/shell/ -&lt;h3 id=&#34;使用shell&#34;&gt;使用Shell&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;test.sh需要执行权限&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;/bin/bash ./test.sh
&lt;span style=&#34;color:#228b22&#34;&gt;#或者&lt;/span&gt;
./test.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;简单shell文件&#34;&gt;简单Shell文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#第一句指明使用哪一个解析程序&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;#输出字符串&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello, shell!&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;#定义变量，=号之间不能有空格&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;tmp&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#输出变量，$紧跟变量名取变量值&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;$tmp&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;#循环输出文件名&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; file in &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;$(&lt;/span&gt;ls &lt;span style=&#34;color:#00688b&#34;&gt;$pwd&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;$file&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;#循环加法&lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;sum&lt;/span&gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i in {1..100}; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;sum&lt;/span&gt;+=i  &lt;span style=&#34;color:#228b22&#34;&gt;#let 指明后面的是数字运算&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;$sum&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;#网络探寻&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i in {1..254}; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;
    ping -c &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; -i 0.1 192.168.3.&lt;span style=&#34;color:#00688b&#34;&gt;$i&lt;/span&gt; &amp;amp;&amp;gt; /dev/null
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; [ &lt;span style=&#34;color:#00688b&#34;&gt;$?&lt;/span&gt; -eq &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; ]; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;then&lt;/span&gt;   &lt;span style=&#34;color:#228b22&#34;&gt;# $?可以获取上一个指令的执行结果&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; 192.168.3.&lt;span style=&#34;color:#00688b&#34;&gt;$i&lt;/span&gt; is up
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; 192.168.3.&lt;span style=&#34;color:#00688b&#34;&gt;$i&lt;/span&gt; is down
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://gongluck.github.io/linux/shell/ - </description>
        </item>
    
    
    
        <item>
        <title>搭建WSL的ssh服务</title>
        <link>https://gongluck.github.io/linux/wslssh/</link>
        <pubDate>Sat, 17 Oct 2020 16:33:15 +0800</pubDate>
        
        <guid>https://gongluck.github.io/linux/wslssh/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/linux/wslssh/ -&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get remove --purge openssh-server
sudo apt-get install openssh-server
sudo rm /etc/ssh/ssh_config
sudo service ssh --full-restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://gongluck.github.io/linux/wslssh/ - </description>
        </item>
    
    
    
        <item>
        <title>CMake入门</title>
        <link>https://gongluck.github.io/cmake/cmake-start/</link>
        <pubDate>Sun, 17 May 2020 14:17:09 +0800</pubDate>
        
        <guid>https://gongluck.github.io/cmake/cmake-start/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/cmake/cmake-start/ -&lt;p&gt;&lt;strong&gt;CMake&lt;/strong&gt;是一个跨平台的安装(编译)工具，可以用简单的语句来描述所有平台的安装(编译过程)。能够输出各种各样的&lt;strong&gt;makefile&lt;/strong&gt;或者&lt;strong&gt;project&lt;/strong&gt;文件，能测试编译器所支持的&lt;strong&gt;C++&lt;strong&gt;特性,类似&lt;/strong&gt;UNIX&lt;/strong&gt;下的&lt;strong&gt;automake&lt;/strong&gt;。只是 &lt;strong&gt;CMake&lt;/strong&gt;的组态档取名为&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;。&lt;strong&gt;Cmake&lt;/strong&gt;并不直接建构出最终的软件，而是产生标准的建构档(如 &lt;strong&gt;Unix&lt;/strong&gt;的&lt;strong&gt;Makefile&lt;/strong&gt;或&lt;strong&gt;Windows Visual C++&lt;strong&gt;的&lt;/strong&gt;projects/workspaces&lt;/strong&gt;)，然后再依一般的建构方式使用。这使得熟悉某个集成开发环境(IDE)的开发者可以用标准的方式建构他的软件，这种可以使用各平台的原生建构系统的能力是&lt;strong&gt;CMake&lt;/strong&gt;和&lt;strong&gt;SCons&lt;/strong&gt;等其他类似系统的区别之处。&lt;/p&gt;
&lt;p&gt;至于出现一份代码，到处编译，但是编译不过就有可能是代码的问题了。&lt;/p&gt;
&lt;h3 id=&#34;代码仓库&#34;&gt;代码仓库&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CMake-Demo.git&#34;&gt;https://github.com/gongluck/CMake-Demo.git&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;简单项目&#34;&gt;简单项目&lt;/h3&gt;
&lt;p&gt;创建目录&lt;strong&gt;mydemo&lt;/strong&gt;，再在&lt;strong&gt;mydemo&lt;/strong&gt;目录中创建&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;和&lt;strong&gt;main.c&lt;/strong&gt;两个文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//main.c
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello, cmake!&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#CMakelists.txt
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# CMake最低版本要求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;cmake_minimum_required&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;3.0&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 项目名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;project&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;mydemo&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 查找当前目录下所有源文件并保存到变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;aux_source_directory&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;SRCS&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 指定生成目标
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_executable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;mydemo&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;SRCS&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后执行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-command&#34; data-lang=&#34;command&#34;&gt;cmake -S . -B ./build
cmake --build ./build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一条命令是生成目标平台的项目，将生成使用系统上默认的编译套件的工程。&lt;em&gt;&lt;strong&gt;-S&lt;/strong&gt;&lt;/em&gt;后面的参数是&lt;strong&gt;CMake&lt;/strong&gt;工程&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;文件所在目录，&lt;em&gt;&lt;strong&gt;-B&lt;/strong&gt;&lt;/em&gt;后面的参数是将要生成的目标平台项目文件存放的目录。
第二条命令是构建项目，当然也可以通过其他工具打开项目构建或者执行&lt;em&gt;&lt;strong&gt;make&lt;/strong&gt;&lt;/em&gt;命令等。&lt;em&gt;&lt;strong&gt;&amp;ndash;build&lt;/strong&gt;&lt;/em&gt;是&lt;strong&gt;CMake&lt;/strong&gt;程序构建的命令，后面的参数是需要构建的项目的路径。
&lt;img src=&#34;https://gongluck.github.io/img/cmake_build.jpg&#34; alt=&#34;cmake_build.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;增加子模块&#34;&gt;增加子模块&lt;/h3&gt;
&lt;p&gt;创建目录&lt;strong&gt;myfun&lt;/strong&gt;，再在&lt;strong&gt;myfun&lt;/strong&gt;目录中创建&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;、&lt;strong&gt;myfun.h&lt;/strong&gt;和&lt;strong&gt;myfun.c&lt;/strong&gt;三个文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//myfun.h
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#ifndef __MYFUN_H__
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define __MYFUN_H__
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;myfun&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; b);

&lt;span style=&#34;color:#1e889b&#34;&gt;#endif&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//__MYFUN_H__
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//myfun.c
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;myfun.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;myfun&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; b)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; a+b;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#CMakelists.txt
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# CMake最低版本要求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;cmake_minimum_required&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;3.0&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 获取当前文件夹名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;STRING&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;REGEX&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;REPLACE&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.*/(.*)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\\1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;CURRENT_FOLDER&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 项目名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;project&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;CURRENT_FOLDER&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 查找当前目录下所有源文件并保存到变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;aux_source_directory&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;SRCS&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 生成链接库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_library&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} ${&lt;span style=&#34;color:#00688b&#34;&gt;SRCS&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;子模块中的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 生成链接库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_library&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} &lt;span style=&#34;color:#cd5555&#34;&gt;SHARED&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;SRCS&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;SHARED&lt;/strong&gt;&lt;/em&gt;可以省略，省略后相当于&lt;em&gt;&lt;strong&gt;STATIC&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mydemo&lt;/strong&gt;下的&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;和&lt;strong&gt;main.c&lt;/strong&gt;也要做修改。然后，&lt;strong&gt;重新构建生成&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//main.c
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;myfun/myfun.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello, cmake!&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1+1=%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, myfun(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#CMakelists.txt
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# CMake最低版本要求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;cmake_minimum_required&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;3.0&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 获取当前文件夹名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;STRING&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;REGEX&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;REPLACE&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.*/(.*)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\\1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;CURRENT_FOLDER&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 项目名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;project&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;CURRENT_FOLDER&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 设置变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;SUBMODULE&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;myfun&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 添加子目录
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 必须放在aux_source_directory前,否则同名变量SRCS会冲突
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_subdirectory&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;SUBMODULE&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 查找当前目录下所有源文件并保存到变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;aux_source_directory&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;SRCS&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 指定生成目标
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_executable&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} ${&lt;span style=&#34;color:#00688b&#34;&gt;SRCS&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 添加链接库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;target_link_libraries&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} ${&lt;span style=&#34;color:#00688b&#34;&gt;SUBMODULE&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主模块中主要改动在&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 添加子目录
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 必须放在aux_source_directory前,否则同名变量SRCS会冲突
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_subdirectory&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;SUBMODULE&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 添加链接库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;target_link_libraries&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} ${&lt;span style=&#34;color:#00688b&#34;&gt;SUBMODULE&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;add_subdirectory&lt;/strong&gt;&lt;/em&gt;命令添加子模块目录，&lt;strong&gt;CMake&lt;/strong&gt;会自动执行子模块中的&lt;strong&gt;CMakelists.txt&lt;/strong&gt;。
&lt;em&gt;&lt;strong&gt;target_link_libraries&lt;/strong&gt;&lt;/em&gt;命令是将子模块链接到主模块。
&lt;img src=&#34;https://gongluck.github.io/img/cmake_build2.PNG&#34; alt=&#34;cmake_build2.PNG&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自定义编译选项&#34;&gt;自定义编译选项&lt;/h3&gt;
&lt;p&gt;主模块的&lt;strong&gt;CMakelists.txt&lt;/strong&gt;修改成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#CMakeLists.txt
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# CMake最低版本要求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;cmake_minimum_required&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;3.0&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 获取当前文件夹名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;STRING&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;REGEX&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;REPLACE&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.*/(.*)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\\1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;CURRENT_FOLDER&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 项目名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;project&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;CURRENT_FOLDER&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 加入一个配置头文件用于处理 CMake 对源码的设置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;configure_file&lt;/span&gt;(
  ${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/config.h.in&lt;/span&gt;
  ${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/config.h&lt;/span&gt;
  )&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 自定义编译选项
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;option&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;USESUBMODULE&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;use submodule&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;ON&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#cd5555&#34;&gt;USESUBMODULE&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;# 设置变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;SUBMODULE&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;myfun&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;# 添加包含路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;include_directories&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;SUBMODULE&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;# 添加子目录
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;# 必须放在aux_source_directory前,否则同名变量SRCS会冲突
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;add_subdirectory&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;SUBMODULE&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;# 设置附加库变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;EXTRA_LIBS&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;EXTRA_LIBS&lt;/span&gt;} ${&lt;span style=&#34;color:#00688b&#34;&gt;SUBMODULE&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;endif&lt;/span&gt; (&lt;span style=&#34;color:#cd5555&#34;&gt;USESUBMODULE&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 查找当前目录下所有源文件并保存到变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;aux_source_directory&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;SRCS&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 指定生成目标
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_executable&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} ${&lt;span style=&#34;color:#00688b&#34;&gt;SRCS&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 添加链接库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;target_link_libraries&lt;/span&gt;(${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} ${&lt;span style=&#34;color:#00688b&#34;&gt;EXTRA_LIBS&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建&lt;strong&gt;config.h.in&lt;/strong&gt;文件并输入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#cmakedefine USEMYPRINT
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/em&gt;命令可以设置自定义编译选项，&lt;em&gt;&lt;strong&gt;configure_file&lt;/strong&gt;&lt;/em&gt;命令用于设置配置文件。生成目标工程时，目标目录会生成一个&lt;strong&gt;config.h&lt;/strong&gt;文件。&lt;strong&gt;config.h&lt;/strong&gt;中，如果&lt;em&gt;&lt;strong&gt;USESUBMODULE&lt;/strong&gt;&lt;/em&gt;选项被打开就为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define USESUBMODULE
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;否则是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* #undef USESUBMODULE */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;main.c&lt;/strong&gt;也需要调整：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//main.c
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef USESUBMODULE
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;myfun.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//USESUBMODULE
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello, cmake!&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef USESUBMODULE
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1+1=%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, myfun(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;));
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//USESUBMODULE
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;CMake&lt;/strong&gt;打开选项的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-command&#34; data-lang=&#34;command&#34;&gt;cmake -D[宏名]=[宏值]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以，开关&lt;em&gt;&lt;strong&gt;USESUBMODULE&lt;/strong&gt;&lt;/em&gt;选项使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-command&#34; data-lang=&#34;command&#34;&gt;cmake -S . -B ./build -DUSESUBMODULE=ON
cmake -S . -B ./build -DUSESUBMODULE=OFF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gongluck.github.io/img/cmake_build3.PNG&#34; alt=&#34;cmake_build3.PNG&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;的&lt;em&gt;&lt;strong&gt;install&lt;/strong&gt;&lt;/em&gt;命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 安装目标文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;install&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;TARGETS&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;[名称]&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;DESTINATION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;[目录]&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 安装普通文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;install&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;FILES&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;[名称]&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;DESTINATION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;[目录]&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主模块和子模块的&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;分别添加对应的&lt;em&gt;&lt;strong&gt;install&lt;/strong&gt;&lt;/em&gt;命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 指定安装路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;install&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;TARGETS&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} &lt;span style=&#34;color:#cd5555&#34;&gt;DESTINATION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;bin&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;install&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;FILES&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;${PROJECT_BINARY_DIR}/config.h&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;DESTINATION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;include&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 指定库的安装路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;install&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;TARGETS&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;} &lt;span style=&#34;color:#cd5555&#34;&gt;DESTINATION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;lib&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;install&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;FILES&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;PROJECT_NAME&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;.h&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;DESTINATION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;include&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后执行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-command&#34; data-lang=&#34;command&#34;&gt;cmake -S ./ -B ./build
cmake --build ./build --config Release
cmake --install ./build --config Release --prefix ./install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;cmake &amp;ndash;install ./build&lt;/strong&gt;&lt;/em&gt;命令就是执行 &lt;strong&gt;./build&lt;/strong&gt;目录中项目的安装，&lt;em&gt;&lt;strong&gt;&amp;ndash;prefix ./install&lt;/strong&gt;&lt;/em&gt;参数表示安装到 &lt;strong&gt;./install&lt;/strong&gt;目录。
&lt;img src=&#34;https://gongluck.github.io/img/cmake_build4.PNG&#34; alt=&#34;cmake_build4.PNG&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;p&gt;启用测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 启用测试
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;enable_testing&lt;/span&gt;()&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加测试使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_test&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;NAME&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;[测试名]&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;COMMAND&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;[测试执行命令及参数]&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;WORKING_DIRECTORY&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;[工作目录]&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set_tests_properties&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;[测试名]&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;PROPERTIES&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;PASS_REGULAR_EXPRESSION&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;[匹配输出]&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主模块&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 分别设置了Debug版本和Release版本可执行文件的输出目录
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/bin&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/bin&lt;/span&gt;) &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 分别设置了Debug版本和Release版本库文件的输出目录
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/lib&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/lib&lt;/span&gt;) &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 定义一个宏，用来简化测试工作
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;macro&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;do_test&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;mycommand&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;myret&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;add_test&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;NAME&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;test_&lt;/span&gt;${&lt;span style=&#34;color:#00688b&#34;&gt;mycommand&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;_&lt;/span&gt;${&lt;span style=&#34;color:#00688b&#34;&gt;myret&lt;/span&gt;} &lt;span style=&#34;color:#cd5555&#34;&gt;COMMAND&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;mycommand&lt;/span&gt;} &lt;span style=&#34;color:#cd5555&#34;&gt;WORKING_DIRECTORY&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;/bin&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 检查测试输出是否包含&amp;#34;${myret}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set_tests_properties&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;test_&lt;/span&gt;${&lt;span style=&#34;color:#00688b&#34;&gt;mycommand&lt;/span&gt;}&lt;span style=&#34;color:#cd5555&#34;&gt;_&lt;/span&gt;${&lt;span style=&#34;color:#00688b&#34;&gt;myret&lt;/span&gt;} &lt;span style=&#34;color:#cd5555&#34;&gt;PROPERTIES&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;PASS_REGULAR_EXPRESSION&lt;/span&gt; ${&lt;span style=&#34;color:#00688b&#34;&gt;myret&lt;/span&gt;})&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;endmacro&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;do_test&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 启用测试
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;enable_testing&lt;/span&gt;()&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 测试程序
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;do_test&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;mydemo&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cmake&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令编译和测试：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Command&#34; data-lang=&#34;Command&#34;&gt;cmake -S ./ -B ./build
cmake --build ./build --config Release
cd ./build
ctest --force-new-ctest-process -C Release
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gongluck.github.io/img/cmake_build5.PNG&#34; alt=&#34;cmake_build5.PNG&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;函数检查&#34;&gt;函数检查&lt;/h3&gt;
&lt;p&gt;主模块&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 添加函数检查功能
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CheckFunctionExists&lt;/span&gt;)   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;check_function_exists&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;HAVEPRINTF&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;HAVEPRINTF&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;# 添加宏定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#658b00&#34;&gt;add_definitions&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;-DHAVEPRINTF&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;endif&lt;/span&gt;()&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查&lt;em&gt;&lt;strong&gt;printf&lt;/strong&gt;&lt;/em&gt;函数并且定义&lt;em&gt;&lt;strong&gt;HAVEPRINTF&lt;/strong&gt;&lt;/em&gt;宏。
&lt;strong&gt;main.c&lt;/strong&gt;也需要调整：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;config.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef USESUBMODULE
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;myfun.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//USESUBMODULE
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello, cmake!&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef USESUBMODULE
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1+1=%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, myfun(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;));
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//USESUBMODULE
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef HAVEPRINTF
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    puts(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;found printf.&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#1e889b&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    puts(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;not found printf.&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//HAVEPRINTF
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令生成：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Command&#34; data-lang=&#34;Command&#34;&gt;cmake -S ./ -B ./build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;很不幸，生成Visual Studio工程时，printf函数总是找不到，但puts这类却是可以找到&lt;/strong&gt;&lt;/strong&gt;
&lt;img src=&#34;https://gongluck.github.io/img/cmake_build6.PNG&#34; alt=&#34;cmake_build6.PNG&#34;&gt;
&lt;img src=&#34;https://gongluck.github.io/img/cmake_build7.PNG&#34; alt=&#34;cmake_build7.PNG&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加版本号&#34;&gt;添加版本号&lt;/h3&gt;
&lt;p&gt;主模块&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 添加版本号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;VERSION_MAJOR&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;VERSION_MINOR&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;config.h.in&lt;/strong&gt;添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#define VERSION_MAJOR @VERSION_MAJOR@
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#define VERSION_MINOR @VERSION_MINOR@
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样生成的&lt;strong&gt;config.h&lt;/strong&gt;文件中就会增加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define VERSION_MAJOR 1
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define VERSION_MINOR 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;strong&gt;main.c&lt;/strong&gt;中就可以直接使用版本号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello, cmake!version:%d.%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;, VERSION_MAJOR, VERSION_MINOR);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;制作安装包&#34;&gt;制作安装包&lt;/h3&gt;
&lt;p&gt;主模块&lt;strong&gt;CMakeLists.txt&lt;/strong&gt;添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-CMake&#34; data-lang=&#34;CMake&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 构建一个CPack安装包
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;InstallRequiredSystemLibraries&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 设置安装包版本号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CPACK_PACKAGE_VERSION_MAJOR&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;${VERSION_MAJOR}&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CPACK_PACKAGE_VERSION_MINOR&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;${VERSION_MINOR}&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;CPack&lt;/span&gt;)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依次执行以下命令即可生成安装包：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Command&#34; data-lang=&#34;Command&#34;&gt;cmake -S . -B ./build
cmake --build ./build --config Release
cpack --config ./build/CPackConfig.cmake -B E:\Code\CMAKE-DEMO\mydemo\package -C Release
cpack --config ./build/CPackSourceConfig.cmake -B E:\Code\CMAKE-DEMO\mydemo\package -C Release
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;cpack&lt;/strong&gt;&lt;/em&gt;命令的参数 &lt;em&gt;&lt;strong&gt;-B&lt;/strong&gt;&lt;/em&gt;后面是的安装包的生成目录，需要绝对路径。
&lt;img src=&#34;https://gongluck.github.io/img/cmake_build8.PNG&#34; alt=&#34;cmake_build7.PNG&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;最后&#34;&gt;最后&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;CMake&lt;/strong&gt;、&lt;strong&gt;CTest&lt;/strong&gt;和&lt;strong&gt;CPack&lt;/strong&gt;的基本使用基本就这些了，生成工程、编译、测试、安装、制作包都基本使用到了。每个命令还有很多可选的功能没有提到，等以后需要再做补充。&lt;/p&gt;- https://gongluck.github.io/cmake/cmake-start/ - </description>
        </item>
    
    
    
        <item>
        <title>CGO导入导出C静态库/动态库</title>
        <link>https://gongluck.github.io/go/cgo_static_and_shared_library/</link>
        <pubDate>Sun, 12 Apr 2020 13:50:36 +0800</pubDate>
        
        <guid>https://gongluck.github.io/go/cgo_static_and_shared_library/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/go/cgo_static_and_shared_library/ -&lt;p&gt;可以直接使用C源码到GO中当然是最好不过了,但如果只有三方库的静态库或者动态库,就要学会如何在GO中使用C的静态库或者动态库了。&lt;/p&gt;
&lt;h3 id=&#34;代码仓库&#34;&gt;代码仓库&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CGO-DEMO.git&#34;&gt;https://github.com/gongluck/CGO-DEMO.git&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;go使用c静态库&#34;&gt;GO使用C静态库&lt;/h3&gt;
&lt;p&gt;首先把下面的C代码编译成静态库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int number_add_mod(int a, int b, int mod);
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;#include &amp;quot;number.h&amp;quot;

int number_add_mod(int a, int b, int mod)
{
    return (a + b) % mod;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译静态库使用命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcc -c -o number.o number.c
ar rcs libnumber.a number.o
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来就可以在GO中使用了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

//#cgo CFLAGS: -I./number
//#cgo LDFLAGS: -L${SRCDIR}/number -lnumber
//#include &amp;quot;number.h&amp;quot;
import &amp;quot;C&amp;quot;
import &amp;quot;fmt&amp;quot;

func main() {
	fmt.Println(C.number_add_mod(10, 5, 12))
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;#cgo&lt;/strong&gt;&lt;/em&gt; 注释中通过 &lt;em&gt;&lt;strong&gt;CFLAGS&lt;/strong&gt;&lt;/em&gt; 和 &lt;em&gt;&lt;strong&gt;LDFLAGS&lt;/strong&gt;&lt;/em&gt; 指定头文件包含路径和静态库的路径。基本和使用 &lt;em&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/em&gt; 差别不大。&lt;/p&gt;
&lt;p&gt;如果是VC环境,创建number.def文件说明导出函数的信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LIBRARY number.lib

EXPORTS
number_add_mod
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进入VC对应的命令行环境执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cl /c number.c
link /LIB /OUT:number.lib number.obj /DEF:number.def
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用mingw工具执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dlltool -dllname number.lib --def number.def --output-lib libnumber.a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到了 &lt;em&gt;&lt;strong&gt;libnumber.a&lt;/strong&gt;&lt;/em&gt; 文件。GO使用lib需要这个 &lt;em&gt;&lt;strong&gt;libnumber.a&lt;/strong&gt;&lt;/em&gt; 作为代替。&lt;/p&gt;
&lt;h3 id=&#34;go使用c动态库&#34;&gt;GO使用C动态库&lt;/h3&gt;
&lt;p&gt;gcc环境使用下面的命令编译动态库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcc -shared -o libnumber.so number.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用前面例子的GO代码就可以使用动态库了。
如果是VC环境,创建number.def文件说明导出函数的信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LIBRARY number.dll

EXPORTS
number_add_mod
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进入VC对应的命令行环境执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cl /c number.c
link /DLL /OUT:number.dll number.obj /DEF:number.def
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用mingw工具执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dlltool -dllname number.dll --def number.def --output-lib libnumber.a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到了 &lt;em&gt;&lt;strong&gt;libnumber.a&lt;/strong&gt;&lt;/em&gt; 文件。GO使用dll需要这个 &lt;em&gt;&lt;strong&gt;libnumber.a&lt;/strong&gt;&lt;/em&gt; 作为导入库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在运行时需要将动态库放到系统能够找到的位置。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;go导出c静态库动态库&#34;&gt;GO导出C静态库/动态库&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;C&amp;quot;

func main() {}

//export number_add_mod
func number_add_mod(a, b, mod C.int) C.int {
	return (a + b) % mod
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时,main函数仍需要保留,但是可以不执行任何代码。使用 &lt;em&gt;&lt;strong&gt;//export&lt;/strong&gt;&lt;/em&gt; 注释表明要导出的GO函数。编译命令要加上目标参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go build -buildmode=c-archive -o number.a
go build -buildmode=c-shared -o number.so
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译成功同时会生成对应的头文件。&lt;/p&gt;- https://gongluck.github.io/go/cgo_static_and_shared_library/ - </description>
        </item>
    
    
    
        <item>
        <title>CGO类型转换</title>
        <link>https://gongluck.github.io/go/cgo_types/</link>
        <pubDate>Sat, 11 Apr 2020 12:09:14 +0800</pubDate>
        
        <guid>https://gongluck.github.io/go/cgo_types/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/go/cgo_types/ -&lt;p&gt;由于CGO和C的数据类型不是完全等价匹配, 所有在使用CGO的过程中需要做类型转换。&lt;/p&gt;
&lt;h3 id=&#34;代码仓库&#34;&gt;代码仓库&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CGO-DEMO.git&#34;&gt;https://github.com/gongluck/CGO-DEMO.git&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;_cgo_exporth&#34;&gt;_cgo_export.h&lt;/h3&gt;
&lt;p&gt;使用 &lt;em&gt;&lt;strong&gt;go tool cgo .\hello.go&lt;/strong&gt;&lt;/em&gt; 命令可以生成 &lt;em&gt;&lt;strong&gt;cgo&lt;/strong&gt;&lt;/em&gt; 的中间文件,其中 &lt;em&gt;&lt;strong&gt;_cgo_export.h&lt;/strong&gt;&lt;/em&gt; 声明了导出函数和C与GO直接类型的关系。&lt;/p&gt;
&lt;h3 id=&#34;c-cgo-go类型映射&#34;&gt;C-CGO-GO类型映射&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;C语言类型&lt;/th&gt;
&lt;th&gt;CGO类型&lt;/th&gt;
&lt;th&gt;Go语言类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;C.char&lt;/td&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;singed char&lt;/td&gt;
&lt;td&gt;C.schar&lt;/td&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned char&lt;/td&gt;
&lt;td&gt;C.uchar&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;C.short&lt;/td&gt;
&lt;td&gt;int16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned short&lt;/td&gt;
&lt;td&gt;C.ushort&lt;/td&gt;
&lt;td&gt;uint16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;C.int&lt;/td&gt;
&lt;td&gt;int32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned int&lt;/td&gt;
&lt;td&gt;C.uint&lt;/td&gt;
&lt;td&gt;uint32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;C.long&lt;/td&gt;
&lt;td&gt;int32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;C.ulong&lt;/td&gt;
&lt;td&gt;uint32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long long int&lt;/td&gt;
&lt;td&gt;C.longlong&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long long int&lt;/td&gt;
&lt;td&gt;C.ulonglong&lt;/td&gt;
&lt;td&gt;uint64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;C.float&lt;/td&gt;
&lt;td&gt;float32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;C.double&lt;/td&gt;
&lt;td&gt;float64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size_t&lt;/td&gt;
&lt;td&gt;C.size_t&lt;/td&gt;
&lt;td&gt;uint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int8_t&lt;/td&gt;
&lt;td&gt;C.int8_t&lt;/td&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint8_t&lt;/td&gt;
&lt;td&gt;C.uint8_t&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int16_t&lt;/td&gt;
&lt;td&gt;C.int16_t&lt;/td&gt;
&lt;td&gt;int16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint16_t&lt;/td&gt;
&lt;td&gt;C.uint16_t&lt;/td&gt;
&lt;td&gt;uint16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int32_t&lt;/td&gt;
&lt;td&gt;C.int32_t&lt;/td&gt;
&lt;td&gt;int32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint32_t&lt;/td&gt;
&lt;td&gt;C.uint32_t&lt;/td&gt;
&lt;td&gt;uint32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int64_t&lt;/td&gt;
&lt;td&gt;C.int64_t&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint64_t&lt;/td&gt;
&lt;td&gt;C.uint64_t&lt;/td&gt;
&lt;td&gt;uint64&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;go字符串和切片&#34;&gt;GO字符串和切片&lt;/h3&gt;
&lt;p&gt;Go语言的字符串、切片、字典、接口和管道等特有的数据类型生成对应的C语言类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef struct { const char *p; ptrdiff_t n; } GoString;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;GoString&lt;/strong&gt;&lt;/em&gt; 类型会对 &lt;em&gt;&lt;strong&gt;_cgo_export.h&lt;/strong&gt;&lt;/em&gt; 头文件产生依赖,可以用 &lt;em&gt;&lt;strong&gt;&lt;em&gt;GoString&lt;/em&gt;&lt;/strong&gt;&lt;/em&gt; 代替。以下两个函数用于获取字符串结构中的长度和指针信息:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;size_t _GoStringLen(_GoString_ s);
const char *_GoStringPtr(_GoString_ s);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;go访问c的结构体联合枚举类型&#34;&gt;GO访问C的结构体、联合、枚举类型&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;package main

/*
#include &amp;lt;stdint.h&amp;gt;

struct A{
    int i;
    float f;
    int type;
    int   size:10;	// The bit field cannot be accessed
    float arr[];	// Zero-length arrays are also inaccessible
};

union B1 {
    int i;
    float f;
};
union B2 {
    int8_t i8;
    int64_t i64;
};

enum C {
    ONE,
    TWO,
};
*/
import &amp;quot;C&amp;quot;

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;unsafe&amp;quot;
)

func main() {
    var a C.struct_A
    fmt.Println(a.i)
    fmt.Println(a.f)
    fmt.Println(a._type)

    var b1 C.union_B1
    fmt.Printf(&amp;quot;%T\n&amp;quot;, b1) // [4]uint8
    var b2 C.union_B2
    fmt.Printf(&amp;quot;%T\n&amp;quot;, b2) // [8]uint8
    fmt.Println(&amp;quot;b1.i:&amp;quot;, *(*C.int)(unsafe.Pointer(&amp;amp;b1)))
    fmt.Println(&amp;quot;b1.f:&amp;quot;, *(*C.float)(unsafe.Pointer(&amp;amp;b1)))

    var c C.enum_C = C.TWO
    fmt.Println(c)
    fmt.Println(C.ONE)
    fmt.Println(C.TWO)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 &lt;em&gt;&lt;strong&gt;C.struct_xxx&lt;/strong&gt;&lt;/em&gt; 来访问C语言中定义的 &lt;em&gt;&lt;strong&gt;struct xxx&lt;/strong&gt;&lt;/em&gt; 结构体类型。结构体的内存布局按照C语言的通用对齐规则,在32位Go语言环境C语言结构体也按照32位对齐规则,在64位Go语言环境按照64位的对齐规则。对于指定了特殊对齐规则的结构体,无法在CGO中访问。如果结构体的成员名字中碰巧是Go语言的关键字,可以通过在成员名开头添加下划线来访问。&lt;/p&gt;
&lt;p&gt;C语言结构体中位字段对应的成员无法在Go语言中访问,如果需要操作位字段成员,需要通过在C语言中定义辅助函数来完成。对应零长数组的成员,无法在Go语言中直接访问数组的元素,但其中零长的数组成员所在位置的偏移量依然可以通过 &lt;em&gt;&lt;strong&gt;unsafe.Offsetof(a.arr)&lt;/strong&gt;&lt;/em&gt; 来访问。&lt;/p&gt;
&lt;p&gt;在C语言中,我们无法直接访问Go语言定义的结构体类型。&lt;/p&gt;
&lt;p&gt;通过 &lt;em&gt;&lt;strong&gt;C.union_xxx&lt;/strong&gt;&lt;/em&gt; 来访问C语言中定义的 &lt;em&gt;&lt;strong&gt;union xxx&lt;/strong&gt;&lt;/em&gt; 类型。但是Go语言中并不支持C语言联合类型,它们会被转为对应大小的字节数组。可以使用unsafe包强制转型为对应类型(这是性能最好的方式)访问联合类型成员;对于复杂的联合类型,推荐通过在C语言中定义辅助函数的方式处理。&lt;/p&gt;
&lt;p&gt;可以通过 &lt;em&gt;&lt;strong&gt;C.enum_xxx&lt;/strong&gt;&lt;/em&gt; 来访问C语言中定义的 &lt;em&gt;&lt;strong&gt;enum xxx&lt;/strong&gt;&lt;/em&gt; 结构体类型。在C语言中,枚举类型底层对应int类型,支持负数类型的值。我们可以通过 &lt;em&gt;&lt;strong&gt;C.ONE&lt;/strong&gt;&lt;/em&gt; 、&lt;em&gt;&lt;strong&gt;C.TWO&lt;/strong&gt;&lt;/em&gt; 等直接访问定义的枚举值。&lt;/p&gt;
&lt;h3 id=&#34;go访问c的字符串数组&#34;&gt;GO访问C的字符串、数组&lt;/h3&gt;
&lt;p&gt;根据在reflect包中有字符串和切片的定义:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type StringHeader struct {
 Data uintptr
 Len  int
}

type SliceHeader struct {
    Data uintptr
    Len  int
    Cap  int
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不单独分配内存,可以在Go语言中直接访问C语言的内存空间。因为Go语言的字符串是只读的,用户需要自己保证Go字符串在使用期间,底层对应的C字符串内容不会发生变化、内存不会被提前释放掉。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

/*
#include &amp;lt;string.h&amp;gt;
char arr[10];
char *s = &amp;quot;Hello&amp;quot;;
*/
import &amp;quot;C&amp;quot;
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
    &amp;quot;unsafe&amp;quot;
)

func main() {
    // C array -&amp;gt; Go slice
    var arr0 []byte
    var arr0Hdr = (*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;arr0))
    arr0Hdr.Data = uintptr(unsafe.Pointer(&amp;amp;C.arr[0]))
    arr0Hdr.Len = 10
    arr0Hdr.Cap = 10

    arr1 := (*[31]byte)(unsafe.Pointer(&amp;amp;C.arr[0]))[:10:10]
    fmt.Println(arr1)

    // C string -&amp;gt; Go string
    var s0 string
    var s0Hdr = (*reflect.StringHeader)(unsafe.Pointer(&amp;amp;s0))
    s0Hdr.Data = uintptr(unsafe.Pointer(C.s))
    s0Hdr.Len = int(C.strlen(C.s))

    sLen := int(C.strlen(C.s))
    s1 := string((*[31]byte)(unsafe.Pointer(C.s))[:sLen:sLen])
    fmt.Println(s1)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在C语言中可以通过 &lt;em&gt;&lt;strong&gt;GoString&lt;/strong&gt;&lt;/em&gt; 和 &lt;em&gt;&lt;strong&gt;GoSlice&lt;/strong&gt;&lt;/em&gt; 来访问Go语言的字符串和切片。但由于GC的存在,可能会潜藏着危险。&lt;/p&gt;
&lt;h3 id=&#34;go指针和数值转换&#34;&gt;GO指针和数值转换&lt;/h3&gt;
&lt;p&gt;为了实现X类型指针到Y类型指针的转换,需要借助 &lt;em&gt;&lt;strong&gt;unsafe.Pointer&lt;/strong&gt;&lt;/em&gt; 作为中间桥接类型实现不同类型指针之间的转换。&lt;em&gt;&lt;strong&gt;unsafe.Pointer&lt;/strong&gt;&lt;/em&gt; 指针类型类似C语言中的 &lt;em&gt;&lt;strong&gt;void*&lt;/strong&gt;&lt;/em&gt; 类型的指针。
任何类型的指针都可以通过强制转换为 &lt;em&gt;&lt;strong&gt;unsafe.Pointer&lt;/strong&gt;&lt;/em&gt; 指针类型去掉原有的类型信息,然后再重新赋予新的指针类型而达到指针间的转换的目的。&lt;/p&gt;
&lt;p&gt;Go语言针对 &lt;em&gt;&lt;strong&gt;unsafe.Pointr&lt;/strong&gt;&lt;/em&gt; 指针类型特别定义了一个 &lt;em&gt;&lt;strong&gt;uintptr&lt;/strong&gt;&lt;/em&gt; 类型。可以 &lt;em&gt;&lt;strong&gt;uintptr&lt;/strong&gt;&lt;/em&gt; 为中介,实现数值类型到unsafe.Pointr指针类型到转换。&lt;/p&gt;- https://gongluck.github.io/go/cgo_types/ - </description>
        </item>
    
    
    
        <item>
        <title>CGO入门</title>
        <link>https://gongluck.github.io/go/cgo_quick_start/</link>
        <pubDate>Thu, 09 Apr 2020 19:31:36 +0800</pubDate>
        
        <guid>https://gongluck.github.io/go/cgo_quick_start/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/go/cgo_quick_start/ -&lt;p&gt;C/C++加上GO代表什么？&lt;/p&gt;
&lt;p&gt;代表着既可以使用GO快速的开发项目,同时可以接纳C/C++的庞大历史遗产和极高性能！而且在GO中使用C/C++十分简单！&lt;/p&gt;
&lt;h3 id=&#34;代码仓库&#34;&gt;代码仓库&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/CGO-DEMO.git&#34;&gt;https://github.com/gongluck/CGO-DEMO.git&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;准备&#34;&gt;准备&lt;/h3&gt;
&lt;p&gt;使用CGO,需要先安装gcc或者mingw。&lt;/p&gt;
&lt;h3 id=&#34;启用cgo特性&#34;&gt;启用CGO特性&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;C&amp;quot;

func main() {
    println(&amp;quot;hello, cgo&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就是这么简单,一句 &lt;em&gt;&lt;strong&gt;import &amp;ldquo;C&amp;rdquo;&lt;/strong&gt;&lt;/em&gt; 就是告诉 &lt;em&gt;&lt;strong&gt;go build&lt;/strong&gt;&lt;/em&gt; 命令在编译和链接阶段启动gcc编译器。&lt;/p&gt;
&lt;h3 id=&#34;使用c标准库的函数&#34;&gt;使用C标准库的函数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;package main

//#include &amp;lt;stdio.h&amp;gt;
import &amp;quot;C&amp;quot;

func main() {
    C.puts(C.CString(&amp;quot;hello, cgo&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;import &amp;ldquo;C&amp;rdquo;&lt;/strong&gt;&lt;/em&gt; 上面紧接着的注释就是C代码,上面就是将标准库的头文件包含进我们的代码中。在GO中使用C的代码都是在伪包&amp;quot;C&amp;quot;中,所以使用C标准库中的 &lt;em&gt;&lt;strong&gt;puts&lt;/strong&gt;&lt;/em&gt; 函数就是 &lt;em&gt;&lt;strong&gt;C.puts(&amp;hellip;)&lt;/strong&gt;&lt;/em&gt; 。由于C和GO中的字符(串)类型不是等价的,使用 &lt;em&gt;&lt;strong&gt;C.CString(&amp;hellip;)&lt;/strong&gt;&lt;/em&gt; 将GO中的 &lt;em&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;/em&gt; 转换成C的 &lt;em&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;/em&gt;* 。&lt;/p&gt;
&lt;h3 id=&#34;使用自定义c函数&#34;&gt;使用自定义C函数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;package main

/*
#include &amp;lt;stdio.h&amp;gt;

static void SayHello(const char* s)
{
    puts(s);
}
*/
import &amp;quot;C&amp;quot;

func main() {
    C.SayHello(C.CString(&amp;quot;hello, cgo\n&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;和前面使用C标准库的函数的例子差不多,只是将自定义函数的定义放到 &lt;em&gt;&lt;strong&gt;import &amp;ldquo;C&amp;rdquo;&lt;/strong&gt;&lt;/em&gt; 上面的注释中,接下来就可以在GO中通过&amp;quot;C&amp;quot;包使用了。另外,也可以将自定义C函数的定义放到C源码文件中,GO代码只在 &lt;em&gt;&lt;strong&gt;import &amp;ldquo;C&amp;rdquo;&lt;/strong&gt;&lt;/em&gt; 上面添加该函数的声明。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

//void SayHello(const char* s);
import &amp;quot;C&amp;quot;

func main() {
    C.SayHello(C.CString(&amp;quot;hello, cgo\n&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C源码文件的内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

void SayHello(const char* s)
{
    puts(s);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果两个源码文件都放在同一层目录下,可以直接使用 &lt;em&gt;&lt;strong&gt;go build&lt;/strong&gt;&lt;/em&gt; 编译。&lt;/p&gt;
&lt;p&gt;其实,自定义的C函数也可以用C++实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;

extern &amp;quot;C&amp;quot; {
    #include &amp;quot;hello.h&amp;quot;
}

void SayHello(const char* s) {
    std::cout &amp;lt;&amp;lt; s;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是现在就必须通过一个C头文件给GO声明该函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void SayHello(const char* s);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GO代码改为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

//#include &amp;quot;hello.h&amp;quot;
import &amp;quot;C&amp;quot;

func main() {
    C.SayHello(C.CString(&amp;quot;hello, cgo\n&amp;quot;))
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;函数的声明是C的,但是具体内部实现可以是C++的。而且能和GO结合使用的只能是C。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;go导出c接口&#34;&gt;GO导出C接口&lt;/h3&gt;
&lt;p&gt;前面的例子都是GO调用C源码(接口),下面使用GO导出C接口。
首先在C头文件中声明函数,为了适配GO,注释了 &lt;em&gt;&lt;strong&gt;const&lt;/strong&gt;&lt;/em&gt; 修饰。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void SayHelloGo(/*const*/ char* s);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在GO源码中实现该接口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;C&amp;quot;

import &amp;quot;fmt&amp;quot;

//export SayHelloGo
func SayHelloGo(s *C.char) {
    fmt.Print(C.GoString(s))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过CGO的 &lt;em&gt;&lt;strong&gt;//export SayHello&lt;/strong&gt;&lt;/em&gt; 指令将Go语言实现的函数导出为C语言函数。接下来就可以使用该实际是GO实现的C接口了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

//#include &amp;lt;hello.h&amp;gt;
import &amp;quot;C&amp;quot;

func main() {
    C.SayHelloGo(C.CString(&amp;quot;hello, cgo Go\n&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;面向c接口的go&#34;&gt;面向C接口的GO&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;package main

//void SayHello(_GoString_ s);
import &amp;quot;C&amp;quot;

import (
    &amp;quot;fmt&amp;quot;
)

func main() {
    C.SayHello(&amp;quot;hello, cgo go&amp;quot;)
}

//export SayHello
func SayHello(s string) {
    fmt.Print(s)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;从Go1.10开始CGO新增加了一个_GoString_预定义的C语言类型，用来表示Go语言字符串。&lt;/strong&gt;&lt;/em&gt;
上面一个GO源码文件中,发生了这样的调用过程。GO的main函数中,调用了&amp;quot;C&amp;quot;包中的 &lt;em&gt;&lt;strong&gt;SayHello&lt;/strong&gt;&lt;/em&gt; 这个C函数,实际这个 &lt;em&gt;&lt;strong&gt;SayHello&lt;/strong&gt;&lt;/em&gt; C函数是GO实现的,所以转向调用GO中的 &lt;em&gt;&lt;strong&gt;SayHello&lt;/strong&gt;&lt;/em&gt; 。&lt;/p&gt;- https://gongluck.github.io/go/cgo_quick_start/ - </description>
        </item>
    
    
    
        <item>
        <title>任务管理器播放BadApple</title>
        <link>https://gongluck.github.io/cpp/badapple-taskmgr/</link>
        <pubDate>Wed, 08 Apr 2020 18:28:36 +0800</pubDate>
        
        <guid>https://gongluck.github.io/cpp/badapple-taskmgr/</guid>
        <description>gongluck&#39;s blog https://gongluck.github.io/cpp/badapple-taskmgr/ -&lt;p&gt;有屏幕的地方就有BadApple!前面做了在控制台显示BadApple了,这一次把画面渲染到任务管理器上！&lt;/p&gt;
&lt;h3 id=&#34;设计思路&#34;&gt;设计思路&lt;/h3&gt;
&lt;p&gt;和上一篇差不多,只是设置指定窗口为libvlc的渲染窗口。找到指定的窗口比较复杂。&lt;/p&gt;
&lt;h3 id=&#34;效果视频&#34;&gt;效果视频&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1B64y1u7rv&#34;&gt;https://www.bilibili.com/video/BV1B64y1u7rv&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;代码仓库&#34;&gt;代码仓库&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gongluck/Character-player/tree/taskmgr&#34;&gt;https://github.com/gongluck/Character-player/tree/taskmgr&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//process.cpp
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;process.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;../errcode.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef _WIN32
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;TlHelp32.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;tchar.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;atlconv.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; gprocess
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;gethandle&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;* processname, std::vector&amp;lt;ProcessInfo&amp;gt;&amp;amp; result)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (processname == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; G_ERROR_INVALIDPARAM;
        }

&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef _WIN32
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;auto&lt;/span&gt; hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
        USES_CONVERSION;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;auto&lt;/span&gt; processT = A2T(processname);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (hSnapshot == INVALID_HANDLE_VALUE || processT == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
        {
            std::cerr &amp;lt;&amp;lt; __FILE__ &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; __LINE__ &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; GetLastError() &amp;lt;&amp;lt; std::endl;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; G_ERROR_INTERNAL;
        }

        result.clear();
        ProcessInfo info = { &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; };
        PROCESSENTRY32 pe = { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(pe) };
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;auto&lt;/span&gt; fOk = FALSE;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (fOk = Process32First(hSnapshot, &amp;amp;pe); fOk; fOk = Process32Next(hSnapshot, &amp;amp;pe))
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!_tcscmp(pe.szExeFile, processT))
            {
                info.processid = pe.th32ProcessID;
                info.parentid = pe.th32ParentProcessID;
                result.push_back(info);
            }
        }
        CloseHandle(hSnapshot);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; G_ERROR_SUCCEED;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; G_ERROR_SUCCEED;
    }

&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef _WIN32
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;    BOOL CALLBACK &lt;span style=&#34;color:#008b45&#34;&gt;EnumChildWindowCB&lt;/span&gt;(HWND h, LPARAM l)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;auto&lt;/span&gt; pinfo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;WindowInfo*&amp;gt;(l);
        DWORD pid = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
        GetWindowThreadProcessId(h, &amp;amp;pid);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pid == pinfo-&amp;gt;processid)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;auto&lt;/span&gt; pchild = std::make_shared&amp;lt;WindowInfo&amp;gt;();
            pchild-&amp;gt;processid = pid;
            pchild-&amp;gt;window = h;
            pinfo-&amp;gt;childs.push_back(pchild);
            EnumChildWindows(h, EnumChildWindowCB, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;LPARAM&amp;gt;(pchild.get()));
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; TRUE;
    }
    BOOL CALLBACK &lt;span style=&#34;color:#008b45&#34;&gt;EnumWindowCB&lt;/span&gt;(HWND h, LPARAM l)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;auto&lt;/span&gt; pinfo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;WindowInfo*&amp;gt;(l);
        DWORD pid = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
        GetWindowThreadProcessId(h, &amp;amp;pid);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (pid == pinfo-&amp;gt;processid)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;auto&lt;/span&gt; pchild = std::make_shared&amp;lt;WindowInfo&amp;gt;();
            pchild-&amp;gt;processid = pid;
            pchild-&amp;gt;window = h;
            pinfo-&amp;gt;childs.push_back(pchild);
            EnumChildWindows(h, EnumChildWindowCB, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;LPARAM&amp;gt;(pchild.get()));
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; TRUE;
    }
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getallwindows&lt;/span&gt;(WindowInfo* info)
    {
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef _WIN32
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (EnumWindows(EnumWindowCB, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;LPARAM&amp;gt;(info)) != TRUE)
        {
            std::cerr &amp;lt;&amp;lt; __FILE__ &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; __LINE__ &amp;lt;&amp;lt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; GetLastError() &amp;lt;&amp;lt; std::endl;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; G_ERROR_INTERNAL;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; G_ERROR_SUCCEED;
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; G_ERROR_SUCCEED;
    }
} &lt;span style=&#34;color:#228b22&#34;&gt;// namespace gprocess
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//main.cpp
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#ifdef _WIN32
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;tchar.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define ssize_t SSIZE_T
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;vlc/vlc.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;../../Code-snippet/cpp/process/process.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#define CHECKEQUALRET(ret, compare)\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;if(ret == compare)\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;{\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    std::cerr &amp;lt;&amp;lt; &amp;#34;error ocurred in &amp;#34; &amp;lt;&amp;lt; __FILE__\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;              &amp;lt;&amp;lt; &amp;#34;`s line &amp;#34; &amp;lt;&amp;lt; __LINE__\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;              &amp;lt;&amp;lt; &amp;#34;, error &amp;#34; &amp;lt;&amp;lt; ret;\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    goto END;\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#define CHECKNEQUALRET(ret, compare)\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;if(ret != compare)\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;{\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    std::cerr &amp;lt;&amp;lt; &amp;#34;error ocurred in &amp;#34; &amp;lt;&amp;lt; __FILE__\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;              &amp;lt;&amp;lt; &amp;#34;`s line &amp;#34; &amp;lt;&amp;lt; __LINE__\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;              &amp;lt;&amp;lt; &amp;#34;, error &amp;#34; &amp;lt;&amp;lt; ret;\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;    goto END;\
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getwindows&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; TCHAR* classname,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; gprocess::WindowInfo&amp;amp; info,
    std::vector&amp;lt;std::shared_ptr&amp;lt;gprocess::WindowInfo&amp;gt;&amp;gt;&amp;amp; result)
{
    std::vector&amp;lt;std::shared_ptr&amp;lt;gprocess::WindowInfo&amp;gt;&amp;gt; tmp;
    TCHAR classname_[MAX_PATH] = { &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; };
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; info.childs.size(); ++i)
    {
        GetClassName(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;HWND&amp;gt;(info.childs[i]-&amp;gt;window), classname_, _countof(classname_));
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (_tcscmp(classname_, classname) == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
        {
            tmp.push_back(info.childs[i]);
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;auto&lt;/span&gt;&amp;amp; each : tmp)
    {
        result.push_back(each);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getwindows&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; TCHAR* classname,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; std::vector&amp;lt;std::shared_ptr&amp;lt;gprocess::WindowInfo&amp;gt;&amp;gt;&amp;amp; windows,
    std::vector&amp;lt;std::shared_ptr&amp;lt;gprocess::WindowInfo&amp;gt;&amp;gt;&amp;amp; result)
{
    std::vector&amp;lt;std::shared_ptr&amp;lt;gprocess::WindowInfo&amp;gt;&amp;gt; tmp;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; windows.size(); ++i)
    {
        getwindows(classname, *windows[i], tmp);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;auto&lt;/span&gt;&amp;amp; each : tmp)
    {
        result.push_back(each);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;** argv)
{
    libvlc_instance_t* inst_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    libvlc_media_t* media_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    libvlc_media_player_t* player_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    libvlc_media_list_t* list_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    libvlc_media_list_player_t* plist_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    HWND wnd_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;

    std::vector&amp;lt;gprocess::ProcessInfo&amp;gt; result;
    gprocess::WindowInfo windowinfo;
    std::vector&amp;lt;std::shared_ptr&amp;lt;gprocess::WindowInfo&amp;gt;&amp;gt; windows;
    std::vector&amp;lt;std::shared_ptr&amp;lt;gprocess::WindowInfo&amp;gt;&amp;gt; tmpwindows;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;auto&lt;/span&gt; ret = gprocess::gethandle(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Taskmgr.exe&amp;#34;&lt;/span&gt;, result);
    CHECKNEQUALRET(ret, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    windowinfo.processid = result[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;].processid;
    ret = gprocess::getallwindows(&amp;amp;windowinfo);
    CHECKNEQUALRET(ret, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);

    ret = getwindows(TEXT(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;TaskManagerWindow&amp;#34;&lt;/span&gt;), windowinfo, windows);
    CHECKNEQUALRET(ret, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    ret = getwindows(TEXT(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;NativeHWNDHost&amp;#34;&lt;/span&gt;), windows, tmpwindows);
    CHECKNEQUALRET(ret, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    windows.clear();
    windows.swap(tmpwindows);
    ret = getwindows(TEXT(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DirectUIHWND&amp;#34;&lt;/span&gt;), windows, tmpwindows);
    CHECKNEQUALRET(ret, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    windows.clear();
    windows.swap(tmpwindows);
    ret = getwindows(TEXT(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;CvChartWindow&amp;#34;&lt;/span&gt;), windows, tmpwindows);
    CHECKNEQUALRET(ret, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    CHECKEQUALRET(tmpwindows.size(), &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);

    wnd_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;HWND&amp;gt;(tmpwindows[tmpwindows.size() - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]-&amp;gt;window);

    inst_ = libvlc_new(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;);
    CHECKEQUALRET(inst_, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;);
    media_ = libvlc_media_new_path(inst_, argc &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; ? &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;badapple.mp4&amp;#34;&lt;/span&gt; : argv[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]);
    CHECKEQUALRET(media_, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;);

    &lt;span style=&#34;color:#228b22&#34;&gt;//player_ = libvlc_media_player_new_from_media(media_);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    player_ = libvlc_media_player_new(inst_);
    CHECKEQUALRET(player_, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;);

    libvlc_media_player_set_hwnd(player_, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;*&amp;gt;(wnd_));

    &lt;span style=&#34;color:#228b22&#34;&gt;// play loop
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    list_ = libvlc_media_list_new(inst_);
    plist_ = libvlc_media_list_player_new(inst_);
    libvlc_media_list_add_media(list_, media_);
    libvlc_media_list_player_set_media_list(plist_, list_);
    libvlc_media_list_player_set_media_player(plist_, player_);
    libvlc_media_list_player_set_playback_mode(plist_, libvlc_playback_mode_loop);
    libvlc_media_list_player_play(plist_);

    std::cin.get();

END:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (player_ != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
    {
        libvlc_media_player_stop(player_);
        libvlc_media_player_release(player_);
        player_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (media_ != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
    {
        libvlc_media_release(media_);
        media_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (plist_ != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
    {
        libvlc_media_list_player_release(plist_);
        plist_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (list_ != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
    {
        libvlc_media_list_release(list_);
        list_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (inst_ != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;)
    {
        libvlc_release(inst_);
        inst_ = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://gongluck.github.io/cpp/badapple-taskmgr/ - </description>
        </item>
    
    
  </channel>
</rss> 